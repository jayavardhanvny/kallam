<?xml version="1.0" encoding="UTF-8"?>
<SqlClass id="class" name="AccountingData" package="org.openbravo.erpWindows.BusinessPartnerCategory">
  <SqlClassComment>WAD Generated class</SqlClassComment>

  <SqlMethod name="selectEdit" type="preparedStatement" return="multiple">
    <SqlMethodComment>Select for edit</SqlMethodComment>
    <Sql><![CDATA[
        SELECT to_char(C_BP_Group_Acct.Created, ?) as created, 
        (SELECT NAME FROM AD_USER u WHERE AD_USER_ID = C_BP_Group_Acct.CreatedBy) as CreatedByR, 
        to_char(C_BP_Group_Acct.Updated, ?) as updated, 
        to_char(C_BP_Group_Acct.Updated, 'YYYYMMDDHH24MISS') as Updated_Time_Stamp,  
        C_BP_Group_Acct.UpdatedBy, 
        (SELECT NAME FROM AD_USER u WHERE AD_USER_ID = C_BP_Group_Acct.UpdatedBy) as UpdatedByR,
        C_BP_Group_Acct.C_AcctSchema_ID, 
(CASE WHEN C_BP_Group_Acct.C_AcctSchema_ID IS NULL THEN '' ELSE  (COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table1.Name), ''))),'') ) END) AS C_AcctSchema_IDR, 
C_BP_Group_Acct.C_Receivable_Acct, 
C_BP_Group_Acct.C_Prepayment_Acct, 
C_BP_Group_Acct.WriteOff_Acct, 
C_BP_Group_Acct.Writeoff_Rev_Acct, 
C_BP_Group_Acct.V_Liability_Acct, 
COALESCE(C_BP_Group_Acct.IsActive, 'N') AS IsActive, 
C_BP_Group_Acct.V_Prepayment_Acct, 
C_BP_Group_Acct.NotInvoicedReceipts_Acct, 
C_BP_Group_Acct.Processing, 
C_BP_Group_Acct.Status, 
C_BP_Group_Acct.NotInvoicedReceivables_Acct, 
C_BP_Group_Acct.NotInvoicedRevenue_Acct, 
C_BP_Group_Acct.PayDiscount_Exp_Acct, 
C_BP_Group_Acct.PayDiscount_Rev_Acct, 
C_BP_Group_Acct.RealizedGain_Acct, 
C_BP_Group_Acct.RealizedLoss_Acct, 
C_BP_Group_Acct.UnEarnedRevenue_Acct, 
C_BP_Group_Acct.UnrealizedGain_Acct, 
C_BP_Group_Acct.UnrealizedLoss_Acct, 
C_BP_Group_Acct.V_Liability_Services_Acct, 
C_BP_Group_Acct.Doubtfuldebt_Acct, 
C_BP_Group_Acct.BadDebtExpense_Acct, 
C_BP_Group_Acct.Baddebtrevenue_Acct, 
C_BP_Group_Acct.AllowanceForDoubtful_Acct, 
C_BP_Group_Acct.C_Bp_Group_Acct_ID, 
C_BP_Group_Acct.AD_Org_ID, 
C_BP_Group_Acct.AD_Client_ID, 
C_BP_Group_Acct.C_BP_Group_ID, 
 
        ? AS LANGUAGE 
        FROM C_BP_Group_Acct left join (select C_AcctSchema_ID, Name from C_AcctSchema) table1 on (C_BP_Group_Acct.C_AcctSchema_ID = table1.C_AcctSchema_ID)
        WHERE 2=2 

        AND 1=1 
        AND C_BP_Group_Acct.C_Bp_Group_Acct_ID = ? 
        AND C_BP_Group_Acct.AD_Client_ID IN ('1') 
           AND C_BP_Group_Acct.AD_Org_ID IN ('1') 
    ]]></Sql>
    <Parameter name="dateTimeFormat"></Parameter>
    <Parameter name="dateTimeFormat"></Parameter>
    
    <Parameter name="paramLanguage"></Parameter>

    <Parameter name="cBpGroupId" optional="true" after="AND 1=1 " id="paramKeyParent"> AND C_BP_Group_Acct.C_BP_Group_ID = ? </Parameter>
    <Parameter name="key"></Parameter>
        <Parameter name="adUserClient" type="replace" optional="true" after="C_BP_Group_Acct.AD_Client_ID IN (" text="'1'"/>
        <Parameter name="adOrgClient" type="replace" optional="true" after="C_BP_Group_Acct.AD_Org_ID IN (" text="'1'"/>

    <Field name="adUserClient" value="void"></Field>
    <Field name="adOrgClient" value="void"></Field>
    <Field name="createdby" value="void"></Field>
    
    <Field name="trBgcolor" value="void"></Field>
    <Field name="totalCount" value="void"></Field>
    <Field name="dateTimeFormat" value=""></Field>
  </SqlMethod>
  
  

  <SqlMethod name="set" type="constant" return="multiple">
      <SqlMethodComment>Create a registry</SqlMethodComment>
      <Sql></Sql>
    <Parameter name="cBpGroupId" id="paramKeyParent"></Parameter>
<Parameter name="baddebtexpenseAcct"></Parameter><Parameter name="baddebtrevenueAcct"></Parameter><Parameter name="cAcctschemaId"></Parameter><Parameter name="adClientId"></Parameter><Parameter name="adOrgId"></Parameter><Parameter name="isactive"></Parameter><Parameter name="createdby"></Parameter><Parameter name="createdbyr"></Parameter><Parameter name="updatedby"></Parameter><Parameter name="updatedbyr"></Parameter><Parameter name="cReceivableAcct"></Parameter><Parameter name="cPrepaymentAcct"></Parameter><Parameter name="vLiabilityAcct"></Parameter><Parameter name="vLiabilityServicesAcct"></Parameter><Parameter name="vPrepaymentAcct"></Parameter><Parameter name="paydiscountExpAcct"></Parameter><Parameter name="paydiscountRevAcct"></Parameter><Parameter name="writeoffAcct"></Parameter><Parameter name="unrealizedgainAcct"></Parameter><Parameter name="unrealizedlossAcct"></Parameter><Parameter name="realizedgainAcct"></Parameter><Parameter name="realizedlossAcct"></Parameter><Parameter name="notinvoicedreceiptsAcct"></Parameter><Parameter name="unearnedrevenueAcct"></Parameter><Parameter name="notinvoicedrevenueAcct"></Parameter><Parameter name="notinvoicedreceivablesAcct"></Parameter><Parameter name="doubtfuldebtAcct"></Parameter><Parameter name="processing"></Parameter><Parameter name="allowancefordoubtfulAcct"></Parameter><Parameter name="status"></Parameter><Parameter name="cBpGroupAcctId"></Parameter><Parameter name="writeoffRevAcct"></Parameter>
   </SqlMethod>






   <SqlMethod name="selectDef4979_0" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table2.Name), ''))), '') ) as CreatedBy FROM AD_User left join (select AD_User_ID, Name from AD_User) table2 on (AD_User.AD_User_ID = table2.AD_User_ID) WHERE AD_User.isActive='Y' AND AD_User.AD_User_ID = ?  
    ]]></Sql>
<Parameter name="CreatedByR"/>
  </SqlMethod>

   <SqlMethod name="selectDef4981_1" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for auxiliar field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT  ( COALESCE(TO_CHAR(TO_CHAR(COALESCE(TO_CHAR(table2.Name), ''))), '') ) as UpdatedBy FROM AD_User left join (select AD_User_ID, Name from AD_User) table2 on (AD_User.AD_User_ID = table2.AD_User_ID) WHERE AD_User.isActive='Y' AND AD_User.AD_User_ID = ?  
    ]]></Sql>
<Parameter name="UpdatedByR"/>
  </SqlMethod>



  <SqlMethod name="selectParentID" type="preparedStatement" return="String" default="">
    <SqlMethodComment>return the parent ID</SqlMethodComment>
    <Sql><![CDATA[
        SELECT C_BP_Group_Acct.C_BP_Group_ID AS NAME
        FROM C_BP_Group_Acct
        WHERE C_BP_Group_Acct.C_Bp_Group_Acct_ID = ?
    ]]></Sql>
    <Parameter name="key"></Parameter>
  </SqlMethod>

   <SqlMethod name="selectParent" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for parent field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT (TO_CHAR(COALESCE(TO_CHAR(table1.Name), ''))) AS NAME FROM C_BP_Group left join (select C_BP_Group_ID, Name from C_BP_Group) table1 on (C_BP_Group.C_BP_Group_ID = table1.C_BP_Group_ID) WHERE C_BP_Group.C_BP_Group_ID = ?  
    ]]></Sql>
<Parameter name="cBpGroupId"/>

  </SqlMethod>




   <SqlMethod name="selectParentTrl" type="preparedStatement" return="String" default="">
    <SqlMethodComment>Select for parent field</SqlMethodComment>
    <Sql><![CDATA[
        SELECT (TO_CHAR(COALESCE(TO_CHAR(table1.Name), ''))) AS NAME FROM C_BP_Group left join (select C_BP_Group_ID, Name from C_BP_Group) table1 on (C_BP_Group.C_BP_Group_ID = table1.C_BP_Group_ID) WHERE C_BP_Group.C_BP_Group_ID = ?  
    ]]></Sql>
<Parameter name="cBpGroupId"/>

  </SqlMethod>








  <SqlMethod name="update" type="preparedStatement" return="rowCount" static="false" connection="true">
    <Sql><![CDATA[
        UPDATE C_BP_Group_Acct
        SET C_AcctSchema_ID = (?) , C_Receivable_Acct = (?) , C_Prepayment_Acct = (?) , WriteOff_Acct = (?) , Writeoff_Rev_Acct = (?) , V_Liability_Acct = (?) , IsActive = (?) , V_Prepayment_Acct = (?) , NotInvoicedReceipts_Acct = (?) , Processing = (?) , Status = (?) , NotInvoicedReceivables_Acct = (?) , NotInvoicedRevenue_Acct = (?) , PayDiscount_Exp_Acct = (?) , PayDiscount_Rev_Acct = (?) , RealizedGain_Acct = (?) , RealizedLoss_Acct = (?) , UnEarnedRevenue_Acct = (?) , UnrealizedGain_Acct = (?) , UnrealizedLoss_Acct = (?) , V_Liability_Services_Acct = (?) , Doubtfuldebt_Acct = (?) , BadDebtExpense_Acct = (?) , Baddebtrevenue_Acct = (?) , AllowanceForDoubtful_Acct = (?) , C_Bp_Group_Acct_ID = (?) , AD_Org_ID = (?) , AD_Client_ID = (?) , C_BP_Group_ID = (?) , updated = now(), updatedby = ? 
        WHERE C_BP_Group_Acct.C_Bp_Group_Acct_ID = ? 
                 AND C_BP_Group_Acct.C_BP_Group_ID = ? 
        AND C_BP_Group_Acct.AD_Client_ID IN ('1') 
        AND C_BP_Group_Acct.AD_Org_ID IN ('1') 
    ]]></Sql>
    <Parameter name="cAcctschemaId"></Parameter> <Parameter name="cReceivableAcct"></Parameter> <Parameter name="cPrepaymentAcct"></Parameter> <Parameter name="writeoffAcct"></Parameter> <Parameter name="writeoffRevAcct"></Parameter> <Parameter name="vLiabilityAcct"></Parameter> <Parameter name="isactive"></Parameter> <Parameter name="vPrepaymentAcct"></Parameter> <Parameter name="notinvoicedreceiptsAcct"></Parameter> <Parameter name="processing"></Parameter> <Parameter name="status"></Parameter> <Parameter name="notinvoicedreceivablesAcct"></Parameter> <Parameter name="notinvoicedrevenueAcct"></Parameter> <Parameter name="paydiscountExpAcct"></Parameter> <Parameter name="paydiscountRevAcct"></Parameter> <Parameter name="realizedgainAcct"></Parameter> <Parameter name="realizedlossAcct"></Parameter> <Parameter name="unearnedrevenueAcct"></Parameter> <Parameter name="unrealizedgainAcct"></Parameter> <Parameter name="unrealizedlossAcct"></Parameter> <Parameter name="vLiabilityServicesAcct"></Parameter> <Parameter name="doubtfuldebtAcct"></Parameter> <Parameter name="baddebtexpenseAcct"></Parameter> <Parameter name="baddebtrevenueAcct"></Parameter> <Parameter name="allowancefordoubtfulAcct"></Parameter> <Parameter name="cBpGroupAcctId"></Parameter> <Parameter name="adOrgId"></Parameter> <Parameter name="adClientId"></Parameter> <Parameter name="cBpGroupId"></Parameter> 
    <Parameter name="updatedby"></Parameter>
    <Parameter id="paramKey" name="cBpGroupAcctId"></Parameter>
    
    <Parameter name="cBpGroupId" id="paramKeyParent"></Parameter>
        <Parameter name="adUserClient" type="replace" optional="true" after="C_BP_Group_Acct.AD_Client_ID IN (" text="'1'"/>
        <Parameter name="adOrgClient" type="replace" optional="true" after="C_BP_Group_Acct.AD_Org_ID IN (" text="'1'"/>
  </SqlMethod>

  <SqlMethod name="insert" type="preparedStatement" return="rowCount" static="false" connection="true">
    <Sql><![CDATA[
        INSERT INTO C_BP_Group_Acct 
        (C_AcctSchema_ID, C_Receivable_Acct, C_Prepayment_Acct, WriteOff_Acct, Writeoff_Rev_Acct, V_Liability_Acct, IsActive, V_Prepayment_Acct, NotInvoicedReceipts_Acct, Processing, Status, NotInvoicedReceivables_Acct, NotInvoicedRevenue_Acct, PayDiscount_Exp_Acct, PayDiscount_Rev_Acct, RealizedGain_Acct, RealizedLoss_Acct, UnEarnedRevenue_Acct, UnrealizedGain_Acct, UnrealizedLoss_Acct, V_Liability_Services_Acct, Doubtfuldebt_Acct, BadDebtExpense_Acct, Baddebtrevenue_Acct, AllowanceForDoubtful_Acct, C_Bp_Group_Acct_ID, AD_Org_ID, AD_Client_ID, C_BP_Group_ID, created, createdby, updated, updatedBy)
        VALUES ((?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), (?), now(), ?, now(), ?)
    ]]></Sql>
    <Parameter name="cAcctschemaId"></Parameter> <Parameter name="cReceivableAcct"></Parameter> <Parameter name="cPrepaymentAcct"></Parameter> <Parameter name="writeoffAcct"></Parameter> <Parameter name="writeoffRevAcct"></Parameter> <Parameter name="vLiabilityAcct"></Parameter> <Parameter name="isactive"></Parameter> <Parameter name="vPrepaymentAcct"></Parameter> <Parameter name="notinvoicedreceiptsAcct"></Parameter> <Parameter name="processing"></Parameter> <Parameter name="status"></Parameter> <Parameter name="notinvoicedreceivablesAcct"></Parameter> <Parameter name="notinvoicedrevenueAcct"></Parameter> <Parameter name="paydiscountExpAcct"></Parameter> <Parameter name="paydiscountRevAcct"></Parameter> <Parameter name="realizedgainAcct"></Parameter> <Parameter name="realizedlossAcct"></Parameter> <Parameter name="unearnedrevenueAcct"></Parameter> <Parameter name="unrealizedgainAcct"></Parameter> <Parameter name="unrealizedlossAcct"></Parameter> <Parameter name="vLiabilityServicesAcct"></Parameter> <Parameter name="doubtfuldebtAcct"></Parameter> <Parameter name="baddebtexpenseAcct"></Parameter> <Parameter name="baddebtrevenueAcct"></Parameter> <Parameter name="allowancefordoubtfulAcct"></Parameter> <Parameter name="cBpGroupAcctId"></Parameter> <Parameter name="adOrgId"></Parameter> <Parameter name="adClientId"></Parameter> <Parameter name="cBpGroupId"></Parameter> 
    <Parameter name="createdby"></Parameter>
    <Parameter name="updatedby"></Parameter>
  </SqlMethod>

  <SqlMethod name="delete" type="preparedStatement" return="rowCount">
    <Sql><![CDATA[
        DELETE FROM C_BP_Group_Acct
        WHERE C_BP_Group_Acct.C_Bp_Group_Acct_ID = ? 
                 AND C_BP_Group_Acct.C_BP_Group_ID = ? 
        AND C_BP_Group_Acct.AD_Client_ID IN ('1') 
        AND C_BP_Group_Acct.AD_Org_ID IN ('1') 
    ]]></Sql>
    <Parameter name="param1"></Parameter>
        <Parameter name="cBpGroupId" id="paramKeyParent"></Parameter>
        <Parameter name="adUserClient" type="replace" optional="true" after="C_BP_Group_Acct.AD_Client_ID IN (" text="'1'"/>
        <Parameter name="adOrgClient" type="replace" optional="true" after="C_BP_Group_Acct.AD_Org_ID IN (" text="'1'"/>
  </SqlMethod>

  <SqlMethod name="selectOrg" type="preparedStatement" return="string">
    <SqlMethodComment>Select for relation</SqlMethodComment>
    <Sql><![CDATA[ 
        SELECT AD_ORG_ID
          FROM C_BP_Group_Acct
         WHERE C_BP_Group_Acct.C_Bp_Group_Acct_ID = ? 
    ]]></Sql>
    <Parameter name="id"></Parameter>
  </SqlMethod>
  
  <SqlMethod name="getCurrentDBTimestamp" type="preparedStatement" return="string">
    <Sql><![CDATA[ 
        SELECT to_char(Updated, 'YYYYMMDDHH24MISS') as Updated_Time_Stamp
          FROM C_BP_Group_Acct
         WHERE C_BP_Group_Acct.C_Bp_Group_Acct_ID = ? 
    ]]></Sql>
    <Parameter name="id"></Parameter>
  </SqlMethod>
</SqlClass>