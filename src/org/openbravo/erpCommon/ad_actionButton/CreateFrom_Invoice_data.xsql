<?xml version="1.0" encoding="UTF-8" ?>
<!--
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html 
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License. 
 * The Original Code is Openbravo ERP. 
 * The Initial Developer of the Original Code is Openbravo SLU 
 * All portions are Copyright (C) 2001-2013 Openbravo SLU 
 * All Rights Reserved. 
 * Contributor(s):  Cheli Pineda__________________________.
 ************************************************************************
-->





<SqlClass name="CreateFromInvoiceData" package="org.openbravo.erpCommon.ad_actionButton">
  <SqlMethod name="selectFromPO" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT o.C_ORDER_ID as ID, Ad_Column_Identifier(to_char('C_Order'), to_char(o.c_order_id), to_char(?)) AS NAME, o.DocumentNo AS NAMEORDER,
        '' AS NAMESHIPMENT,
        l.QtyOrdered-SUM(COALESCE(m.Qty,0))-COALESCE((SELECT SUM(COALESCE(CI.QtyINVOICED, 0))  
       FROM C_ORDERLINE CO LEFT JOIN C_INVOICELINE CI ON CI.C_ORDERLINE_ID = CO.C_ORDERLINE_ID
       WHERE  CI.C_INVOICE_ID=? AND CO.C_ORDERLINE_ID = l.c_orderline_id
       GROUP BY CI.C_orderline_id , CO.QtyORDERED),0) AS QTY, 
       l.C_UOM_ID,uom.UOMSymbol, l.M_Product_ID,Ad_Column_Identifier(to_char('M_Product'), to_char(l.m_product_id), to_char(?)) AS RELATION_NAME, 
        l.C_OrderLine_ID,l.Line, l.ad_org_id, '' as STDPRECISION, 
        '' as M_InOutLine_ID, '' AS PriceActual, '' AS PriceList, '' AS PriceLimit, '' AS Description, '' as PriceStd,
        '' AS QUANTITYORDER, '' AS M_Product_UOM_ID, '' AS M_ATTRIBUTESETINSTANCE_ID, '' AS M_Offer_ID, '' AS PricePrecision,
        l.taxbaseamt, l.CancelPriceAD, '' AS Rate, '' AS gross_unit_price, '' AS grosspricelist, '' AS grosspricestd,
        COALESCE(l.A_Asset_ID, o.A_Asset_ID) AS A_Asset_ID, COALESCE(l.C_Project_ID, o.C_Project_ID) AS C_Project_ID,
        COALESCE(l.C_Costcenter_ID, o.C_Costcenter_ID) AS C_Costcenter_ID,
        COALESCE(l.User1_ID, o.User1_ID) AS User1_ID, COALESCE(l.User2_ID, o.User2_ID) AS User2_ID, l.explode, '' as isOrder, CASE WHEN l.Bom_parent_id is null then 'Y' else 'N' END as isparent, l.bom_parent_id,
        l.epcg_packaging_id, l.em_epcg_noofpackages, '' as em_epcg_ratetype, '' as em_epcg_businessagent, '' as em_rcob_commission  
        FROM C_ORDERLINE l left join M_MATCHPO m on  l.C_OrderLine_ID=m.C_OrderLine_ID
                                                 AND m.C_InvoiceLine_ID IS NOT NULL, 
        C_ORDER o, C_UOM uom,  M_PRODUCT p
        WHERE o.C_ORDER_ID = l.C_ORDER_ID 
        AND o.IsSOTrx='N' 
        AND o.DocStatus IN ('CL','CO') 
        AND o.AD_Client_ID IN ('1') 
        AND o.AD_Org_ID IN ('1') 
        AND l.C_UOM_ID=uom.C_UOM_ID
        AND l.M_Product_ID=p.M_Product_ID
        AND l.C_Order_ID = ? 
        AND NOT EXISTS (SELECT 1
                       FROM C_ORDERLINE CO LEFT JOIN C_INVOICELINE CI ON CI.C_ORDERLINE_ID = CO.C_ORDERLINE_ID left join M_MATCHPO m on  CO.C_OrderLine_ID=m.C_OrderLine_ID
                                                 AND m.C_InvoiceLine_ID IS NOT NULL
                       WHERE CO.C_ORDERLINE_ID = l.c_orderline_id AND CI.C_INVOICE_ID=? 
                       GROUP BY CI.C_orderline_id , CO.QtyORDERED
                       HAVING (SUM(COALESCE(CI.QtyINVOICED, 0))-(COALESCE(CO.QtyORDERED,0)-SUM(COALESCE(m.Qty,0)))) >= 0 )   
        GROUP BY o.C_ORDER_ID, o.DocumentNo, o.DateOrdered, o.GrandTotal, l.QtyOrdered,l.C_UOM_ID,
        uom.UOMSymbol,l.M_Product_ID,p.NAME,l.Line,l.C_OrderLine_ID, l.ad_org_id, l.taxbaseamt,l.CancelPriceAD,
        COALESCE(l.A_Asset_ID, o.A_Asset_ID), COALESCE(l.C_Project_ID, o.C_Project_ID), COALESCE(l.C_Costcenter_ID, o.C_Costcenter_ID),
        COALESCE(l.User1_ID, o.User1_ID), COALESCE(l.User2_ID, o.User2_ID), l.explode, l.bom_parent_id, 
        l.epcg_packaging_id, l.em_epcg_noofpackages 
        HAVING ( (l.explode='Y') OR ((l.QtyOrdered-SUM(COALESCE(m.Qty,0))) <> 0)) 
        ORDER BY NAME, l.Line
      ]]>
    </Sql>
    <Field name="rownum" value="count"/>
    <Parameter name="language"/>
    <Parameter name="piId"/>
    <Parameter name="language"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="o.AD_Client_ID IN (" text="'1'"/>
    <Parameter name="adOrgClient" type="replace" optional="true" after="o.AD_Org_ID IN (" text="'1'"/>
    <Parameter name="poId"/>
    <Parameter name="piId"/>
  </SqlMethod>
  <SqlMethod name="selectFromPOCombo" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT o.C_ORDER_ID as ID, Ad_Column_Identifier(to_char('C_Order'), to_char(o.c_order_id), to_char(?)) AS NAME 
        FROM C_ORDER o JOIN m_pricelist pl ON o.m_pricelist_id = pl.m_pricelist_id
        WHERE o.IsSOTrx='N' 
        AND o.DocStatus IN ('CL','CO') 
        AND o.AD_Client_ID IN ('1') 
        AND o.AD_Org_ID IN ('1')
        AND o.C_BPartner_ID = ?
        AND pl.istaxincluded = ?
        AND EXISTS (SELECT 1 
                     FROM C_ORDERLINE l left join M_MATCHPO m on  l.C_OrderLine_ID=m.C_OrderLine_ID
                                                              and m.C_InvoiceLine_ID IS NOT NULL  
                    WHERE l.C_ORDER_ID = o.C_ORDER_ID  
                    GROUP BY l.QtyOrdered,l.C_OrderLine_ID 
                    HAVING (l.QtyOrdered-SUM(COALESCE(m.Qty,0))) <> 0)
        ORDER BY NAME
      ]]>
    </Sql>
    <Parameter name="language"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="o.AD_Client_ID IN (" text="'1'"/>
    <Parameter name="adOrgClient" type="replace" optional="true" after="o.AD_Org_ID IN (" text="'1'"/>
    <Parameter name="cBpartnerId"/>
    <Parameter name="isTaxIncluded"/>
  </SqlMethod>
  <SqlMethod name="selectFromPOSOTrx" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT o.C_ORDER_ID as ID, Ad_Column_Identifier(to_char('C_Order'), to_char(o.c_order_id), to_char(?)) AS NAME,o.DocumentNo AS NAMEORDER,
        l.QtyOrdered-COALESCE(l.QTYINVOICED,0) AS QTY, l.C_UOM_ID,uom.UOMSymbol, l.M_Product_ID,
	Ad_Column_Identifier(to_char('M_Product'), to_char(l.m_product_id), to_char(?)) AS RELATION_NAME, 
        l.C_OrderLine_ID,l.Line, l.ad_Org_id, l.taxbaseamt,
        COALESCE(l.A_Asset_ID, o.A_Asset_ID) AS A_Asset_ID, COALESCE(l.C_Project_ID, o.C_Project_ID) AS C_Project_ID, COALESCE(l.C_Costcenter_ID, o.C_Costcenter_ID) AS C_Costcenter_ID,
        COALESCE(l.User1_ID, o.User1_ID) AS User1_ID, COALESCE(l.User2_ID, o.User2_ID) AS User2_ID, l.explode, l.Bom_parent_id, 
         CASE WHEN l.Bom_parent_id is null then 'Y' else 'N' END as isparent
        FROM C_INVOICE_CANDIDATE_V ic, C_UOM uom, C_ORDER o, C_ORDERLINE l, M_PRODUCT p 
        WHERE l.C_UOM_ID=uom.C_UOM_ID
        AND o.C_ORDER_ID = ic.C_ORDER_ID 
        AND o.C_ORDER_ID=l.C_ORDER_ID 
        AND ic.AD_Client_ID IN ('1') 
        AND ic.AD_Org_ID IN ('1') 
        AND l.M_Product_ID=p.M_Product_ID 
        AND ic.C_Order_ID = ? 
        GROUP BY o.C_ORDER_ID, o.DocumentNo, o.DateOrdered, o.GrandTotal, l.QtyOrdered,
        l.C_UOM_ID,uom.UOMSymbol,l.M_Product_ID,p.NAME,l.Line,l.C_OrderLine_ID, l.QTYINVOICED, l.ad_org_id, l.taxbaseamt,
        COALESCE(l.A_Asset_ID, o.A_Asset_ID), COALESCE(l.C_Project_ID, o.C_Project_ID), COALESCE(l.C_Costcenter_ID, o.C_Costcenter_ID),
        COALESCE(l.User1_ID, o.User1_ID), COALESCE(l.User2_ID, o.User2_ID), l.explode, l.Bom_parent_id
        ORDER BY NAME, l.Line
      ]]>
    </Sql>
    <Field name="rownum" value="count"/>
    <Parameter name="language"/>
    <Parameter name="language"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="ic.AD_Client_ID IN (" text="'1'"/>
    <Parameter name="adOrgClient" type="replace" optional="true" after="ic.AD_Org_ID IN (" text="'1'"/>
    <Parameter name="poId"/>
  </SqlMethod>
  <SqlMethod name="selectFromPOSOTrxCombo" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT o.C_ORDER_ID as ID, Ad_Column_Identifier(to_char('C_Order'), to_char(o.c_order_id), to_char(?)) AS NAME 
        FROM C_INVOICE_CANDIDATE_V ic,
             C_ORDER o JOIN m_pricelist pl ON o.m_pricelist_id = pl.m_pricelist_id
        WHERE o.C_ORDER_ID = ic.C_ORDER_ID 
        AND ic.AD_Client_ID IN ('1') 
        AND ic.AD_Org_ID IN ('1') 
        AND ic.C_BPartner_ID = ?
        AND pl.istaxincluded = ? 
        AND o.C_Order_Id = ic.C_Order_Id
        AND ((ic.term = 'D' AND ic.qtydelivered <>0) OR (ic.term = 'I' AND exists (SELECT 1 FROM C_ORDERLINE ol WHERE ol.C_ORDER_ID = o.C_ORDER_ID group by ol.c_orderline_id having SUM(ol.QTYORDERED)-SUM(ol.QTYINVOICED)<>0)) OR (ic.term <> 'N' AND (ic.term IN ('O','S') AND (ic.qtyordered = ic.qtydelivered) )) )
        GROUP BY o.C_ORDER_ID, o.DocumentNo, o.DateOrdered, o.GrandTotal 
        ORDER BY NAME
      ]]>
    </Sql>
    <Parameter name="language"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="ic.AD_Client_ID IN (" text="'1'"/>
    <Parameter name="adOrgClient" type="replace" optional="true" after="ic.AD_Org_ID IN (" text="'1'"/>
    <Parameter name="cBpartnerId"/>
    <Parameter name="isTaxIncluded"/>
  </SqlMethod>
  <SqlMethod name="selectFromPOTrl" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT o.C_ORDER_ID as ID, Ad_Column_Identifier(to_char('C_Order'), to_char(o.c_order_id), to_char(?)) AS NAME, o.DocumentNo AS NAMEORDER,
        l.QtyOrdered-SUM(COALESCE(m.Qty,0))-
        COALESCE((SELECT SUM(COALESCE(CI.QtyINVOICED, 0))  
        FROM C_ORDERLINE CO LEFT JOIN C_INVOICELINE CI ON CI.C_ORDERLINE_ID = CO.C_ORDERLINE_ID
        WHERE  CI.C_INVOICE_ID=? AND CO.C_ORDERLINE_ID = l.c_orderline_id
        GROUP BY CI.C_orderline_id , CO.QtyORDERED),0) AS QTY, 
        l.C_UOM_ID, COALESCE(uomt.UOMSYMBOL, uom.UOMSymbol) AS UOMSymbol, 
        l.M_Product_ID,Ad_Column_Identifier(to_char('M_Product'), to_char(l.m_product_id), to_char(?)) AS RELATION_NAME, l.C_OrderLine_ID,l.Line, l.taxbaseamt,
        COALESCE(l.A_Asset_ID, o.A_Asset_ID) AS A_Asset_ID, COALESCE(l.C_Project_ID, o.C_Project_ID) AS C_Project_ID, COALESCE(l.C_Costcenter_ID, o.C_Costcenter_ID) AS C_Costcenter_ID,
        COALESCE(l.User1_ID, o.User1_ID) AS User1_ID, COALESCE(l.User2_ID, o.User2_ID) AS User2_ID 
        FROM C_UOM uom left join  C_UOM_TRL uomt on uom.C_UOM_ID = uomt.C_UOM_ID
                                                and uomt.AD_Language = ?,
             C_ORDERLINE l left join M_MATCHPO m on l.C_OrderLine_ID=m.C_OrderLine_ID
                                                and m.C_InvoiceLine_ID IS NOT NULL,
        C_ORDER o, M_PRODUCT p
        WHERE o.C_ORDER_ID = l.C_ORDER_ID 
        AND o.IsSOTrx='N' 
        AND o.DocStatus IN ('CL','CO') 
        AND o.AD_Client_ID IN ('1') 
        AND o.AD_Org_ID IN ('1') 
        AND l.C_UOM_ID=uom.C_UOM_ID 
        AND l.M_Product_ID=p.M_Product_ID  
        AND l.C_Order_ID = ? 
        AND NOT EXISTS (SELECT 1
                       FROM C_ORDERLINE CO LEFT JOIN C_INVOICELINE CI ON CI.C_ORDERLINE_ID = CO.C_ORDERLINE_ID left join M_MATCHPO m on  CO.C_OrderLine_ID=m.C_OrderLine_ID
                                                 AND m.C_InvoiceLine_ID IS NOT NULL
                       WHERE CO.C_ORDERLINE_ID = l.c_orderline_id AND CI.C_INVOICE_ID=? 
                       GROUP BY CI.C_orderline_id , CO.QtyORDERED
                       HAVING (SUM(COALESCE(CI.QtyINVOICED, 0))-(COALESCE(CO.QtyORDERED,0)-SUM(COALESCE(m.Qty,0)))) >= 0 )  
        GROUP BY o.C_ORDER_ID, o.DocumentNo, o.DateOrdered, o.GrandTotal, l.QtyOrdered,l.C_UOM_ID,
        uom.UOMSymbol, uomt.UOMSYMBOL,l.M_Product_ID,p.NAME,l.Line,l.C_OrderLine_ID,
        l.taxbaseamt, COALESCE(l.A_Asset_ID, o.A_Asset_ID), COALESCE(l.C_Project_ID, o.C_Project_ID), COALESCE(l.C_Costcenter_ID, o.C_Costcenter_ID),
        COALESCE(l.User1_ID, o.User1_ID), COALESCE(l.User2_ID, o.User2_ID)
        HAVING (l.QtyOrdered-SUM(COALESCE(m.Qty,0))) <> 0
        ORDER BY NAME, l.Line
      ]]>
    </Sql>
    <Field name="rownum" value="count"/>
    <Parameter name="adLanguage"/>
    <Parameter name="piId"/>
    <Parameter name="adLanguage"/>
    <Parameter name="adLanguage"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="o.AD_Client_ID IN (" text="'1'"/>
    <Parameter name="adOrgClient" type="replace" optional="true" after="o.AD_Org_ID IN (" text="'1'"/>
    <Parameter name="poId"/>
    <Parameter name="piId"/>
  </SqlMethod>
  <SqlMethod name="selectFromPOTrlSOTrx" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT o.C_ORDER_ID as ID, Ad_Column_Identifier(to_char('C_Order'), to_char(o.c_order_id), to_char(?) ) AS NAME,o.DocumentNo AS NAMEORDER,
        l.QtyOrdered-COALESCE(l.QTYINVOICED,0) AS QTY, l.C_UOM_ID, COALESCE(uomt.UOMSymbol, uom.UOMSymbol) AS UOMSymbol, 
        l.M_Product_ID,Ad_Column_Identifier(to_char('M_Product'), to_char(l.m_product_id), to_char(?)) AS RELATION_NAME, l.C_OrderLine_ID,l.Line, l.taxbaseamt,
        COALESCE(l.A_Asset_ID, o.A_Asset_ID) AS A_Asset_ID, COALESCE(l.C_Project_ID, o.C_Project_ID) AS C_Project_ID, COALESCE(l.C_Costcenter_ID, o.C_Costcenter_ID) AS C_Costcenter_ID,
        COALESCE(l.User1_ID, o.User1_ID) AS User1_ID, COALESCE(l.User2_ID, o.User2_ID) AS User2_ID
        FROM C_UOM uom left join C_UOM_TRL uomt on uom.C_UOM_ID = uomt.C_UOM_ID
                                               and  uomt.AD_Language = ?, 
        C_INVOICE_CANDIDATE_V ic,   C_ORDER o, C_ORDERLINE l, M_PRODUCT p 
        WHERE l.C_UOM_ID=uom.C_UOM_ID
        AND o.C_ORDER_ID = ic.C_ORDER_ID 
        AND o.C_ORDER_ID=l.C_ORDER_ID 
        AND ic.AD_Client_ID IN ('1') 
        AND ic.AD_Org_ID IN ('1') 
        AND l.M_Product_ID=p.M_Product_ID
        AND ic.C_Order_ID = ? 
        GROUP BY o.C_ORDER_ID, o.DocumentNo, o.DateOrdered, o.GrandTotal, l.QtyOrdered,
        l.C_UOM_ID,uom.UOMSymbol, uomt.UOMSymbol,l.M_Product_ID,p.NAME,l.Line,l.C_OrderLine_ID, l.QTYINVOICED,
        l.taxbaseamt, COALESCE(l.A_Asset_ID, o.A_Asset_ID), COALESCE(l.C_Project_ID, o.C_Project_ID), COALESCE(l.C_Costcenter_ID, o.C_Costcenter_ID),
        COALESCE(l.User1_ID, o.User1_ID), COALESCE(l.User2_ID, o.User2_ID)
        ORDER BY NAME, l.Line
      ]]>
    </Sql>
    <Field name="rownum" value="count"/>
    <Parameter name="adLanguage"/>
    <Parameter name="adLanguage"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="ic.AD_Client_ID IN (" text="'1'"/>
    <Parameter name="adOrgClient" type="replace" optional="true" after="ic.AD_Org_ID IN (" text="'1'"/>
    <Parameter name="adLanguage"/>
    <Parameter name="poId"/>
  </SqlMethod>
  
  <SqlMethod name="selectFromPOUpdate" type="preparedStatement" connection="true" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
      SELECT (CASE WHEN B.M_InOutLine_ID IS NULL THEN A.QTY ELSE B.QTY END) AS ID, 
      A.C_UOM_ID,uom.UOMSymbol, A.M_Product_ID,Ad_Column_Identifier(to_char('M_Product'), to_char(A.m_product_id), to_char(?)) AS NAME, 
      A.C_OrderLine_ID,A.Line, uom.stdprecision AS stdprecision, cur.priceprecision, 
      B.M_InOutLine_ID, A.Description, (CASE WHEN B.M_InOutLine_ID IS NULL THEN A.quantityOrder ELSE B.quantityOrder END) AS quantityOrder, 
      (CASE WHEN B.M_InOutLine_ID IS NULL THEN A.M_Product_UOM_ID ELSE B.M_Product_UOM_ID END) AS M_Product_UOM_ID, A.M_ATTRIBUTESETINSTANCE_ID, A.ad_org_id,
      A.taxbaseamt, A.a_asset_id, A.c_project_id, A.c_costcenter_id, A.user1_id, A.user2_id, A.explode, 'Y' as isOrder, 
      B.epcg_packaging_id, B.em_epcg_noofpackages
      FROM c_currency cur,C_UOM uom, M_PRODUCT p, 
      (SELECT COALESCE(l.A_Asset_ID, o.A_Asset_ID) AS A_Asset_ID, COALESCE(l.C_Project_ID, o.C_Project_ID) AS C_Project_ID, COALESCE(l.C_Costcenter_ID, o.C_Costcenter_ID) AS C_Costcenter_ID,
       COALESCE(l.User1_ID, o.User1_ID) AS User1_ID, COALESCE(l.User2_ID, o.User2_ID) AS User2_ID, l.explode,l.ad_org_id,l.C_CURRENCY_ID,l.C_UOM_ID, l.M_Product_ID, l.Line, l.Description, l.C_OrderLine_ID, (l.QtyOrdered-SUM(COALESCE(mp.Qty,0))-
       COALESCE((SELECT SUM(COALESCE(CI.QtyINVOICED, 0))  
       FROM C_ORDERLINE CO LEFT JOIN C_INVOICELINE CI ON CI.C_ORDERLINE_ID = CO.C_ORDERLINE_ID
       WHERE  CI.C_INVOICE_ID=? AND CO.C_ORDERLINE_ID = l.c_orderline_id
       GROUP BY CI.C_orderline_id , CO.QtyORDERED),0)) AS QTY,
      l.quantityOrder*C_DIVIDE((l.QtyOrdered-SUM(COALESCE(mp.Qty,0))-COALESCE((SELECT SUM(COALESCE(CI.QtyINVOICED, 0))  
       FROM C_ORDERLINE CO LEFT JOIN C_INVOICELINE CI ON CI.C_ORDERLINE_ID = CO.C_ORDERLINE_ID
       WHERE  CI.C_INVOICE_ID=? AND CO.C_ORDERLINE_ID = l.c_orderline_id
       GROUP BY CI.C_orderline_id , CO.QtyORDERED),0)),l.QtyOrdered) as quantityOrder, 
       l.M_Product_UOM_ID, l.M_ATTRIBUTESETINSTANCE_ID, l.taxbaseamt
        FROM C_ORDERLINE l left join M_MATCHPO mp on l.C_OrderLine_ID=mp.C_OrderLine_ID
                                                  and mp.C_InvoiceLine_ID IS NOT NULL
        LEFT JOIN C_Order o ON l.C_Order_ID = o.C_Order_ID
        GROUP BY l.ad_org_id,l.C_CURRENCY_ID,l.C_UOM_ID, l.M_Product_ID, l.Line, l.Description, l.C_OrderLine_ID, l.QtyOrdered, l.quantityOrder, l.M_Product_UOM_ID,
        l.M_ATTRIBUTESETINSTANCE_ID, l.taxbaseamt, COALESCE(l.A_Asset_ID, o.A_Asset_ID), COALESCE(l.C_Project_ID, o.C_Project_ID), COALESCE(l.C_Costcenter_ID, o.C_Costcenter_ID),
        COALESCE(l.User1_ID, o.User1_ID), COALESCE(l.User2_ID, o.User2_ID), l.explode) A left join 
      (SELECT il.M_InOutLine_ID, il.C_OrderLine_ID, (il.MovementQty-SUM(COALESCE(mi.Qty,0))) AS QTY,
      il.quantityOrder*C_DIVIDE((il.MovementQty-SUM(COALESCE(mi.Qty,0))),(il.MovementQty)) as quantityOrder, il.M_Product_UOM_ID,
      il.epcg_packaging_id, il.em_epcg_noofpackages 
        FROM M_INOUTLINE il left join M_MATCHINV mi on il.M_InOutLine_ID=mi.M_InOutLine_ID,
             M_INOUT io
        WHERE il.C_OrderLine_ID IS NOT NULL
        AND io.M_InOut_ID = il.M_InOut_ID
        AND io.Processed = 'Y'
        GROUP BY il.M_InOutLine_ID, il.C_OrderLine_ID, il.MovementQty, il.quantityOrder, il.M_Product_UOM_ID,
        il.epcg_packaging_id, il.em_epcg_noofpackages 
        HAVING (il.MovementQty-SUM(COALESCE(mi.Qty,0))) <> 0) B on A.C_OrderLine_ID=B.C_OrderLine_ID
      WHERE A.C_UOM_ID=uom.C_UOM_ID
      AND cur.C_CURRENCY_ID=A.C_CURRENCY_ID
      AND A.M_Product_ID=p.M_Product_ID
      ORDER BY A.Line
      ]]>
    </Sql>
    <Parameter name="adLanguage"/>
    <Parameter name="piId"/>
    <Parameter name="piId"/>
    <Parameter name="cOrderlineId" optional="true" type="argument" after="AND A.M_Product_ID=p.M_Product_ID" text=" AND A.C_OrderLine_ID IN "/>
  </SqlMethod>
  <SqlMethod name="selectFromPOUpdateSOTrx" type="preparedStatement" connection="true" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT (CASE WHEN il.M_INOUTLINE_ID IS NULL THEN (l.QtyOrdered-COALESCE(l.QTYINVOICED ,0)) ELSE il.MOVEMENTQTY END) AS ID, 
        l.C_UOM_ID,uom.UOMSymbol, l.M_Product_ID,Ad_Column_Identifier(to_char('M_Product'), to_char(l.m_product_id), to_char(?)) AS NAME, 
        l.C_OrderLine_ID,l.Line, max(uom.stdprecision) AS stdprecision, cur.priceprecision, il.M_InOutLine_ID as M_InOutLine_ID, l.Description,
        (CASE WHEN il.M_INOUTLINE_ID IS NULL THEN l.quantityOrder*C_DIVIDE((l.QtyOrdered-COALESCE(l.QTYINVOICED ,0)),(l.QtyOrdered)) ELSE il.quantityOrder END) AS quantityOrder, 
        (CASE WHEN il.M_INOUTLINE_ID IS NULL THEN l.M_Product_UOM_ID ELSE il.M_Product_UOM_ID END) AS M_Product_UOM_ID, l.M_ATTRIBUTESETINSTANCE_ID, l.ad_org_id,
        l.taxbaseamt, COALESCE(l.A_Asset_ID, o.A_Asset_ID) as A_Asset_ID, COALESCE(l.C_Project_ID, o.C_Project_ID) as C_Project_ID,
        COALESCE(l.C_Costcenter_ID, o.C_Costcenter_ID) as C_Costcenter_ID, COALESCE(l.User1_ID, o.User1_ID) as User1_ID, COALESCE(l.User2_ID, o.User2_ID) as User2_ID, l.explode, 'Y' as isOrder,
        l.epcg_packaging_id, l.em_epcg_noofpackages, o.em_epcg_ratetype, o.em_epcg_businessagent, o.em_rcob_commission 
        FROM C_ORDERLINE l left join (SELECT M_InOutLine.* FROM M_InOutLine, M_InOut
                                      WHERE M_InOut.M_InOut_ID = M_InOutLine.M_InOut_ID
                                      AND M_InOutLine.IsInvoiced = 'N'
                                      AND M_InOut.Processed='Y') il  on l.C_OrderLine_ID = il.C_OrderLine_ID,
        C_UOM uom,  M_PRODUCT p  ,c_currency cur, c_order o
        WHERE cur.C_CURRENCY_ID=l.C_CURRENCY_ID AND l.C_UOM_ID=uom.C_UOM_ID
        AND l.C_Order_ID=o.C_Order_ID
        AND l.M_Product_ID=p.M_Product_ID 
        GROUP BY l.QtyOrdered,l.qtydelivered,l.C_UOM_ID,uom.UOMSymbol,l.M_Product_ID,p.NAME,l.Line,l.C_OrderLine_ID, 
        l.QTYINVOICED, il.M_InOutLine_ID, il.MovementQty, l.Description, l.quantityOrder, il.quantityOrder, 
        l.M_Product_UOM_ID, il.M_Product_UOM_ID, l.M_ATTRIBUTESETINSTANCE_ID,l.ad_org_id, cur.priceprecision,
        l.taxbaseamt, COALESCE(l.A_Asset_ID, o.A_Asset_ID), COALESCE(l.C_Project_ID, o.C_Project_ID), COALESCE(l.C_Costcenter_ID, o.C_Costcenter_ID),
        COALESCE(l.User1_ID, o.User1_ID), COALESCE(l.User2_ID, o.User2_ID), l.explode,
        l.epcg_packaging_id, l.em_epcg_noofpackages, o.em_epcg_ratetype, o.em_epcg_businessagent, o.em_rcob_commission 
        HAVING ( (l.explode='Y') OR ((l.QtyOrdered-COALESCE(l.QTYINVOICED ,0)) <> 0)) 
        ORDER BY l.Line
      ]]>
    </Sql>
    <Field name="rownum" value="count"/>
    <Parameter name="adLanguage"/>
    <Parameter name="cOrderlineId" optional="true" type="argument" after=" AND l.M_Product_ID=p.M_Product_ID " text=" AND l.C_OrderLine_ID IN "/>
  </SqlMethod>
  <SqlMethod name="selectFromShipment" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT s.M_InOut_ID AS ID, Ad_Column_Identifier(to_char('M_InOut'), to_char(s.M_InOut_ID), to_char(?)) AS NAME, 
        s.DocumentNo AS NAMESHIPMENT, 
        (l.MovementQty-SUM(COALESCE(mi.Qty,0))) AS QTY, l.C_UOM_ID,uom.UOMSymbol, l.M_Product_ID,Ad_Column_Identifier(to_char('M_Product'), to_char(l.m_product_id), to_char(?))||' '||(CASE WHEN ma.serno IS NOT NULL THEN TO_CHAR('('||' '||ma.serno||' '||')') ELSE TO_CHAR('')  END) AS RELATION_NAME, 
        l.M_InOutLine_ID,l.Line, l.M_InOutLine_ID as C_OrderLine_ID,
        COALESCE(l.A_Asset_ID, s.A_Asset_ID) AS A_Asset_ID, COALESCE(l.C_Project_ID, s.C_Project_ID) AS C_Project_ID, 
        COALESCE(l.C_Costcenter_ID, s.C_Costcenter_ID) AS C_Costcenter_ID,
        COALESCE(l.User1_ID, s.User1_ID) AS User1_ID, COALESCE(l.User2_ID, s.User2_ID) AS User2_ID, l.explode, l.Bom_parent_id, 
        CASE WHEN l.Bom_parent_id is null then 'Y' else 'N' END as isparent
        FROM M_INOUTLINE l left join M_ATTRIBUTESETINSTANCE ma on l.M_ATTRIBUTESETINSTANCE_ID = ma.M_ATTRIBUTESETINSTANCE_ID
                           left join M_MATCHINV mi             on l.M_InOutLine_ID=mi.M_InOutLine_ID
                           left join c_orderline ol on l.c_orderline_id = ol.c_orderline_id
                           left join c_order o on ol.c_order_id = o.c_order_id
                           left join m_pricelist pl on pl.m_pricelist_id = o.m_pricelist_id,
        M_INOUT s, C_UOM uom,  M_PRODUCT p
        WHERE s.M_INOUT_ID = l.M_INOUT_ID 
        AND s.IsSOTrx='N' 
        AND s.DocStatus IN ('CL','CO') 
        AND s.AD_Client_ID IN ('1') 
        AND s.AD_Org_ID IN ('1') 
        AND l.C_UOM_ID=uom.C_UOM_ID 
        AND l.M_Product_ID=p.M_Product_ID 
        AND l.M_InOut_ID=? 
        AND (l.c_orderline_id is null OR pl.istaxincluded = ?)
        GROUP BY s.M_InOut_ID, s.DocumentNo, s.MovementDate, l.MovementQty,l.C_UOM_ID,uom.UOMSymbol,
        l.M_Product_ID,ma.serno,p.NAME, l.M_InOutLine_ID,l.Line,l.C_OrderLine_ID,
        COALESCE(l.A_Asset_ID, s.A_Asset_ID), COALESCE(l.C_Project_ID, s.C_Project_ID), COALESCE(l.C_Costcenter_ID, s.C_Costcenter_ID),
        COALESCE(l.User1_ID, s.User1_ID), COALESCE(l.User2_ID, s.User2_ID), l.explode, l.bom_parent_id
        HAVING  (((l.MovementQty-SUM(COALESCE(mi.Qty,0))) <> 0) OR (l.explode='Y'))
        ORDER BY NAME, l.Line
      ]]>
    </Sql>
    <Field name="rownum" value="count"/>
    <Parameter name="adLanguage"/>
    <Parameter name="adLanguage"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="s.AD_Client_ID IN (" text="'1'"/>
    <Parameter name="adOrgClient" type="replace" optional="true" after="s.AD_Org_ID IN (" text="'1'"/>
    <Parameter name="mInoutId"/>
    <Parameter name="isTaxIncluded"/>
  </SqlMethod>
  <SqlMethod name="selectFromShipmentCombo" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT s.M_InOut_ID AS ID, Ad_Column_Identifier(to_char('M_InOut'), to_char(s.M_InOut_ID), to_char(?)) AS NAME 
        FROM M_INOUT s 
        WHERE s.IsSOTrx='N' 
        AND s.DocStatus IN ('CL','CO') 
        AND s.ISLOGISTIC <> 'Y'
        AND s.AD_Client_ID IN ('1') 
        AND s.AD_Org_ID IN ('1') 
        AND s.C_BPartner_ID = ? 
        AND EXISTS (SELECT 1 
                     FROM M_INOUTLINE l
                           left join M_MATCHINV mi on l.M_InOutLine_ID=mi.M_InOutLine_ID
                           left join c_orderline ol on l.c_orderline_id = ol.c_orderline_id
                           left join c_order o on ol.c_order_id = o.c_order_id
                           left join m_pricelist pl on pl.m_pricelist_id = o.m_pricelist_id
                      WHERE l.M_INOUT_ID = s.M_INOUT_ID 
                        AND (l.c_orderline_id is null OR pl.istaxincluded = ?)
                      GROUP BY l.MovementQty, l.M_InOutLine_ID 
                      HAVING  (l.MovementQty-SUM(COALESCE(mi.Qty,0))) <> 0)
        ORDER BY NAME
      ]]>
    </Sql>
    <Field name="rownum" value="count"/>
    <Parameter name="adLanguage"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="s.AD_Client_ID IN (" text="'1'"/>
    <Parameter name="adOrgClient" type="replace" optional="true" after="s.AD_Org_ID IN (" text="'1'"/>
    <Parameter name="cBpartnerId"/>
    <Parameter name="isTaxIncluded"/>
  </SqlMethod>
  <SqlMethod name="selectFromShipmentSOTrx" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT s.M_InOut_ID AS ID, Ad_Column_Identifier(to_char('M_InOut'), to_char(s.M_InOut_ID), to_char(?)) AS NAME,
        s.DocumentNo AS NAMESHIPMENT,
        (l.MovementQty - sum(COALESCE(CASE WHEN i.docstatus = 'CO' THEN il.qtyinvoiced ELSE 0 END, 0))) AS QTY, l.C_UOM_ID,uom.UOMSymbol,
        l.M_Product_ID,Ad_Column_Identifier(to_char('M_Product'), to_char(l.m_product_id), to_char(?))||' '||(CASE WHEN ma.serno IS NOT NULL THEN TO_CHAR('('||' '||ma.serno||' '||')') ELSE TO_CHAR('') END) AS RELATION_NAME, l.M_InOutLine_ID,l.Line,
        l.M_InOutLine_ID as C_OrderLine_ID,
        COALESCE(l.A_Asset_ID, s.A_Asset_ID) AS A_Asset_ID, COALESCE(l.C_Project_ID, s.C_Project_ID) AS C_Project_ID, 
        COALESCE(l.C_Costcenter_ID, s.C_Costcenter_ID) AS C_Costcenter_ID,
        COALESCE(l.User1_ID, s.User1_ID) AS User1_ID, COALESCE(l.User2_ID, s.User2_ID) AS User2_ID, l.explode, l.Bom_parent_id, 
        CASE WHEN l.Bom_parent_id is null then 'Y' else 'N' END as isparent
        FROM M_INOUTLINE l
                left join M_ATTRIBUTESETINSTANCE ma on l.M_ATTRIBUTESETINSTANCE_ID = ma.M_ATTRIBUTESETINSTANCE_ID
                left join c_orderline ol on l.c_orderline_id = ol.c_orderline_id
                left join c_order o on ol.c_order_id = o.c_order_id
                left join m_pricelist pl on pl.m_pricelist_id = o.m_pricelist_id
                left join c_invoiceline il on l.m_inoutline_id = il.m_inoutline_id
                left join c_invoice i on il.c_invoice_id = i.c_invoice_id,
        M_INOUT s, C_UOM uom, M_PRODUCT p 
        WHERE s.M_INOUT_ID = l.M_INOUT_ID
        AND s.IsSOTrx='Y' 
        AND s.DocStatus IN ('CL','CO') 
        AND s.AD_Client_ID IN ('1') 
        AND s.AD_Org_ID IN ('1') 
        AND l.C_UOM_ID=uom.C_UOM_ID 
        AND l.M_Product_ID=p.M_Product_ID 
        AND l.M_InOut_ID=?
        AND (l.c_orderline_id is null OR pl.istaxincluded = ?)
        GROUP BY s.M_InOut_ID, s.DocumentNo, s.MovementDate, l.MovementQty,l.C_UOM_ID,uom.UOMSymbol,
        l.M_Product_ID,p.NAME, ma.serno, l.M_InOutLine_ID,l.Line,l.C_OrderLine_ID,
        COALESCE(l.A_Asset_ID, s.A_Asset_ID), COALESCE(l.C_Project_ID, s.C_Project_ID), COALESCE(l.C_Costcenter_ID, s.C_Costcenter_ID),
        COALESCE(l.User1_ID, s.User1_ID), COALESCE(l.User2_ID, s.User2_ID), l.explode, l.Bom_parent_id
        HAVING (l.movementqty >= 0 AND l.movementqty > SUM(COALESCE(CASE WHEN i.docstatus = 'CO' THEN il.qtyinvoiced ELSE 0 END, 0)))
           OR (l.movementqty < 0 AND l.movementqty < SUM(COALESCE(CASE WHEN i.docstatus = 'CO' THEN il.qtyinvoiced ELSE 0 END, 0)))
           OR (l.explode='Y')
        ORDER BY NAME, l.Line
      ]]>
    </Sql>
    <Field name="rownum" value="count"/>
    <Parameter name="adLanguage"/>
    <Parameter name="adLanguage"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="s.AD_Client_ID IN (" text="'1'"/>
    <Parameter name="adOrgClient" type="replace" optional="true" after="s.AD_Org_ID IN (" text="'1'"/>
    <Parameter name="mInoutId"/>
    <Parameter name="isTaxIncluded"/>
  </SqlMethod>
  <SqlMethod name="selectFromShipmentSOTrxCombo" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT s.M_InOut_ID AS ID, Ad_Column_Identifier(to_char('M_InOut'), to_char(s.M_InOut_ID), to_char(?)) AS NAME 
        FROM M_INOUT s 
        WHERE s.IsSOTrx='Y' 
        AND s.ISLOGISTIC <> 'Y'
        AND s.DocStatus IN ('CL','CO') 
        AND s.AD_Client_ID IN ('1') 
        AND s.AD_Org_ID IN ('1')
        AND s.C_BPartner_ID = ?  
        AND EXISTS (SELECT 1 FROM M_INOUTLINE l 
                           left join c_orderline ol on l.c_orderline_id = ol.c_orderline_id
                           left join c_order o on ol.c_order_id = o.c_order_id
                           left join m_pricelist pl on pl.m_pricelist_id = o.m_pricelist_id
                           left join c_invoiceline il on l.m_inoutline_id = il.m_inoutline_id
                           left join c_invoice i on il.c_invoice_id = i.c_invoice_id
                    WHERE l.M_INOUT_ID = s.M_INOUT_ID
                    AND (l.c_orderline_id is null OR pl.istaxincluded = ?)
                    GROUP BY l.m_inoutline_id, l.movementqty
                    HAVING ( l.movementqty >= 0 AND l.movementqty > Sum(COALESCE(CASE WHEN i.docstatus = 'CO' THEN il.qtyinvoiced ELSE 0 END, 0)) )
                      OR ( l.movementqty < 0 AND l.movementqty < Sum(COALESCE(CASE WHEN i.docstatus = 'CO' THEN il.qtyinvoiced ELSE 0 END, 0)) )
                    )
        AND NOT EXISTS (SELECT 1 FROM C_INVOICE_CANDIDATE_V ic, C_ORDER o 
        WHERE o.C_ORDER_ID = s.C_ORDER_ID
        AND o.C_ORDER_ID = ic.C_ORDER_ID
        AND ic.term = 'N')
        AND NOT EXISTS (SELECT 1
        FROM C_ORDER o , C_ORDERLINE ol
        WHERE o.C_ORDER_ID = s.C_ORDER_ID
        AND o.C_ORDER_ID = ol.C_ORDER_ID
        GROUP BY o.INVOICERULE
        HAVING (o.INVOICERULE = 'O' AND SUM(ol.qtyordered) <> SUM(ol.qtydelivered)))
        ORDER BY NAME
      ]]>
    </Sql>
    <Parameter name="adLanguage"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="s.AD_Client_ID IN (" text="'1'"/>
    <Parameter name="adOrgClient" type="replace" optional="true" after="s.AD_Org_ID IN (" text="'1'"/>
    <Parameter name="cBpartnerId"/>
    <Parameter name="isTaxIncluded"/>
  </SqlMethod>
  <SqlMethod name="selectFromShipmentTrl" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
      SELECT s.M_InOut_ID AS ID, Ad_Column_Identifier(to_char('M_InOut'), to_char(s.M_InOut_ID), to_char(?)) AS NAME,
      s.DocumentNo AS NAMESHIPMENT,
        (l.MovementQty-SUM(COALESCE(mi.Qty,0))) AS QTY, l.C_UOM_ID, COALESCE(uomt.UOMSymbol, uom.UOMSymbol) AS UOMSymbol, 
        l.M_Product_ID,Ad_Column_Identifier(to_char('M_Product'), to_char(l.m_product_id), to_char(?))||' '||(CASE WHEN ma.serno IS NOT NULL THEN TO_CHAR('('||' '||ma.serno||' '||')') ELSE TO_CHAR('')  END) AS RELATION_NAME, l.M_InOutLine_ID,l.Line, l.M_InOutLine_ID as C_OrderLine_ID,
        COALESCE(l.A_Asset_ID, s.A_Asset_ID) AS A_Asset_ID, COALESCE(l.C_Project_ID, s.C_Project_ID) AS C_Project_ID, 
        COALESCE(l.C_Costcenter_ID, s.C_Costcenter_ID) AS C_Costcenter_ID,
        COALESCE(l.User1_ID, s.User1_ID) AS User1_ID, COALESCE(l.User2_ID, s.User2_ID) AS User2_ID
        FROM M_INOUTLINE l
                left join M_ATTRIBUTESETINSTANCE ma on l.M_ATTRIBUTESETINSTANCE_ID = ma.M_ATTRIBUTESETINSTANCE_ID
                left join M_MATCHINV mi             on l.M_InOutLine_ID=mi.M_InOutLine_ID
                left join c_orderline ol on l.c_orderline_id = ol.c_orderline_id
                left join c_order o on ol.c_order_id = o.c_order_id
                left join m_pricelist pl on pl.m_pricelist_id = o.m_pricelist_id,
             C_UOM uom
                left join C_UOM_TRL uomt on uom.C_UOM_ID = uomt.C_UOM_ID and uomt.AD_Language = ?,
        M_INOUT s,   M_PRODUCT p
        WHERE s.M_INOUT_ID = l.M_INOUT_ID 
        AND s.IsSOTrx='N' 
        AND s.DocStatus IN ('CL','CO') 
        AND s.AD_Client_ID IN ('1') 
        AND s.AD_Org_ID IN ('1') 
        AND l.C_UOM_ID=uom.C_UOM_ID 
        AND l.M_Product_ID=p.M_Product_ID 
        AND l.M_InOut_ID=? 
        AND (l.c_orderline_id is null OR pl.istaxincluded = ?)
        GROUP BY s.M_InOut_ID, s.DocumentNo, s.MovementDate, l.MovementQty,l.C_UOM_ID,uom.UOMSymbol, uomt.UOMSymbol,
        l.M_Product_ID,p.NAME, ma.serno, l.M_InOutLine_ID,l.Line,l.C_OrderLine_ID,
        COALESCE(l.A_Asset_ID, s.A_Asset_ID), COALESCE(l.C_Project_ID, s.C_Project_ID), COALESCE(l.C_Costcenter_ID, s.C_Costcenter_ID),
        COALESCE(l.User1_ID, s.User1_ID), COALESCE(l.User2_ID, s.User2_ID)
        HAVING  (l.MovementQty-SUM(COALESCE(mi.Qty,0))) <> 0
        ORDER BY NAME, l.Line
      ]]>
    </Sql>
    <Field name="rownum" value="count"/>
    <Parameter name="adLanguage"/>
    <Parameter name="adLanguage"/>
    <Parameter name="adLanguage"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="s.AD_Client_ID IN (" text="'1'"/>
    <Parameter name="adOrgClient" type="replace" optional="true" after="s.AD_Org_ID IN (" text="'1'"/>
    <Parameter name="mInoutId"/>
    <Parameter name="isTaxIncluded"/>
  </SqlMethod>  
  <SqlMethod name="selectFromShipmentTrlSOTrx" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT s.M_InOut_ID AS ID, Ad_Column_Identifier(to_char('M_InOut'), to_char(s.M_InOut_ID), to_char(?)) AS NAME,
        s.DocumentNo AS NAMESHIPMENT,
        (l.MovementQty - SUM(COALESCE(CASE WHEN i.docstatus = 'CO' THEN il.qtyinvoiced ELSE 0 END, 0))) AS QTY, l.C_UOM_ID,COALESCE(uomt.UOMSymbol, uom.UOMSymbol) AS UOMSymbol, 
        l.M_Product_ID,Ad_Column_Identifier(to_char('M_Product'), to_char(l.m_product_id), to_char(?))||' '|| (CASE WHEN ma.serno IS NOT NULL THEN TO_CHAR('('||' '||ma.serno||' '||')') ELSE TO_CHAR('')  END) AS RELATION_NAME, l.M_InOutLine_ID,l.Line, l.M_InOutLine_ID as C_OrderLine_ID, 
        COALESCE(l.A_Asset_ID, s.A_Asset_ID) AS A_Asset_ID, COALESCE(l.C_Project_ID, s.C_Project_ID) AS C_Project_ID, 
        COALESCE(l.C_Costcenter_ID, s.C_Costcenter_ID) AS C_Costcenter_ID,
        COALESCE(l.User1_ID, s.User1_ID) AS User1_ID, COALESCE(l.User2_ID, s.User2_ID) AS User2_ID
        FROM M_INOUTLINE l
              left join M_ATTRIBUTESETINSTANCE ma on l.M_ATTRIBUTESETINSTANCE_ID = ma.M_ATTRIBUTESETINSTANCE_ID
              left join c_orderline ol on l.c_orderline_id = ol.c_orderline_id
              left join c_order o on ol.c_order_id = o.c_order_id
              left join m_pricelist pl on pl.m_pricelist_id = o.m_pricelist_id
              left join c_invoiceline il on l.m_inoutline_id = il.m_inoutline_id
              left join c_invoice i on il.c_invoice_id = i.c_invoice_id,
             C_UOM uom     left join C_UOM_TRL uomt            on uom.C_UOM_ID = uomt.C_UOM_ID
                                                              and uomt.AD_Language = ? ,
        M_INOUT s,    M_PRODUCT p 
        WHERE s.M_INOUT_ID = l.M_INOUT_ID
        AND s.IsSOTrx='Y' 
        AND s.DocStatus IN ('CL','CO') 
        AND s.AD_Client_ID IN ('1') 
        AND s.AD_Org_ID IN ('1') 
        AND l.C_UOM_ID=uom.C_UOM_ID 
        AND l.M_Product_ID=p.M_Product_ID 
        AND l.M_InOut_ID=? 
        AND (l.c_orderline_id is null OR pl.istaxincluded = ?)
        GROUP BY s.M_InOut_ID, s.DocumentNo, s.MovementDate, l.MovementQty,l.C_UOM_ID,uom.UOMSymbol, uomt.UOMSymbol,
        l.M_Product_ID,p.NAME,ma.serno, l.M_InOutLine_ID,l.Line,l.C_OrderLine_ID,
        COALESCE(l.A_Asset_ID, s.A_Asset_ID), COALESCE(l.C_Project_ID, s.C_Project_ID), COALESCE(l.C_Costcenter_ID, s.C_Costcenter_ID),
        COALESCE(l.User1_ID, s.User1_ID), COALESCE(l.User2_ID, s.User2_ID)
        HAVING (l.movementqty >= 0 AND l.movementqty > SUM(COALESCE(CASE WHEN i.docstatus = 'CO' THEN il.qtyinvoiced ELSE 0 END, 0)))
          OR (l.movementqty < 0 AND l.movementqty < SUM(COALESCE(CASE WHEN i.docstatus = 'CO' THEN il.qtyinvoiced ELSE 0 END, 0)))
        ORDER BY NAME, l.Line
      ]]>
    </Sql>
    <Field name="rownum" value="count"/>
    <Parameter name="adLanguage"/>
    <Parameter name="adLanguage"/>
    <Parameter name="adLanguage"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="s.AD_Client_ID IN (" text="'1'"/>
    <Parameter name="adOrgClient" type="replace" optional="true" after="s.AD_Org_ID IN (" text="'1'"/>
    <Parameter name="mInoutId"/>
    <Parameter name="isTaxIncluded"/>
  </SqlMethod>
  <SqlMethod name="selectFromShipmentUpdate" type="preparedStatement" connection="true" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
      SELECT (l.MovementQty-SUM(COALESCE(mi.Qty,0))) AS ID, l.C_UOM_ID,uom.UOMSymbol, l.M_Product_ID,Ad_Column_Identifier(to_char('M_Product'), to_char(l.m_product_id), to_char(?)) AS NAME, 
      l.M_InOutLine_ID,l.Line, l.C_OrderLine_ID, max(uom.STDPRECISION) as stdprecision, l.Description, l.quantityOrder*C_DIVIDE((l.MovementQty-SUM(COALESCE(mi.Qty,0))),l.MovementQty) as quantityOrder, 
      l.M_Product_UOM_ID, l.M_ATTRIBUTESETINSTANCE_ID, l.ad_org_id, COALESCE(co.taxbaseamt,0) * C_DIVIDE((l.MovementQty-SUM(COALESCE(mi.Qty,0))),COALESCE(co.qtyordered,1)) as taxbaseamt,
      COALESCE(l.A_Asset_ID, s.A_Asset_ID) AS A_Asset_ID, COALESCE(l.C_Project_ID, s.C_Project_ID) AS C_Project_ID, 
      COALESCE(l.C_Costcenter_ID, s.C_Costcenter_ID) AS C_Costcenter_ID,
      COALESCE(l.User1_ID, s.User1_ID) AS User1_ID, COALESCE(l.User2_ID, s.User2_ID) AS User2_ID,
      l.explode, 'N' as isOrder,
      l.epcg_packaging_id, l.em_epcg_noofpackages 
      FROM M_INOUTLINE l left join M_MATCHINV mi on l.M_InOutLine_ID=mi.M_InOutLine_ID
            left join C_ORDERLINE co ON co.C_ORDERLINE_ID=l.C_ORDERLINE_ID,
      C_UOM uom,  M_PRODUCT p, M_InOut s
      WHERE l.M_InOut_ID = s.M_InOut_ID
      AND l.C_UOM_ID=uom.C_UOM_ID
      AND l.M_Product_ID=p.M_Product_ID
      GROUP BY l.MovementQty,l.C_UOM_ID,uom.UOMSymbol,l.M_Product_ID,p.NAME, l.M_InOutLine_ID,l.Line,l.C_OrderLine_ID, l.Description,l.quantityOrder, l.M_Product_UOM_ID, l.M_ATTRIBUTESETINSTANCE_ID, l.ad_org_id, co.taxbaseamt,co.qtyordered,
      COALESCE(l.A_Asset_ID, s.A_Asset_ID), COALESCE(l.C_Project_ID, s.C_Project_ID), COALESCE(l.C_Costcenter_ID, s.C_Costcenter_ID),
      COALESCE(l.User1_ID, s.User1_ID), COALESCE(l.User2_ID, s.User2_ID),l.explode, 
      l.epcg_packaging_id, l.em_epcg_noofpackages
      ORDER BY l.Line
      ]]>
    </Sql>
    <Parameter name="adLanguage"/>
    <Parameter name="cInOutLineId" optional="true" type="argument" after="AND l.M_Product_ID=p.M_Product_ID" text=" AND l.M_InOutLine_ID IN "/>
  </SqlMethod>
  <SqlMethod name="selectFromShipmentUpdateSOTrx" type="preparedStatement" connection="true" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT (l.MovementQty - sum(COALESCE(CASE WHEN i.docstatus = 'CO' THEN il.qtyinvoiced ELSE 0 END, 0))) AS ID,
        l.C_UOM_ID,uom.UOMSymbol, l.M_Product_ID,Ad_Column_Identifier(to_char('M_Product'), to_char(l.m_product_id), to_char(?)) AS NAME, l.M_InOutLine_ID,l.Line,
        l.C_OrderLine_ID, max(uom.STDPRECISION) as stdprecision, l.Description,l.quantityOrder, l.M_Product_UOM_ID,
        l.M_ATTRIBUTESETINSTANCE_ID, l.ad_org_id,
        COALESCE(l.A_Asset_ID, s.A_Asset_ID) AS A_Asset_ID, COALESCE(l.C_Project_ID, s.C_Project_ID) AS C_Project_ID, 
        COALESCE(l.C_Costcenter_ID, s.C_Costcenter_ID) AS C_Costcenter_ID,
        COALESCE(l.User1_ID, s.User1_ID) AS User1_ID, COALESCE(l.User2_ID, s.User2_ID) AS User2_ID, 
        l.explode, 'N' as isOrder, 
        l.epcg_packaging_id, l.em_epcg_noofpackages, i.em_rcob_commission 
        FROM C_UOM uom, M_INOUTLINE l
          left join c_invoiceline il on l.m_inoutline_id = il.m_inoutline_id
          left join c_invoice i on il.c_invoice_id = i.c_invoice_id 
        , M_PRODUCT p , M_InOut s
        WHERE l.M_InOut_ID = s.M_InOut_ID
        AND l.C_UOM_ID=uom.C_UOM_ID
        AND l.M_Product_ID=p.M_Product_ID 
        GROUP BY l.MovementQty,l.C_UOM_ID,uom.UOMSymbol,l.M_Product_ID,p.NAME, l.M_InOutLine_ID,l.Line,l.C_OrderLine_ID, l.Description, l.quantityOrder, l.M_Product_UOM_ID, l.M_ATTRIBUTESETINSTANCE_ID, l.ad_org_id, l.m_inout_id,
        COALESCE(l.A_Asset_ID, s.A_Asset_ID), COALESCE(l.C_Project_ID, s.C_Project_ID), COALESCE(l.C_Costcenter_ID, s.C_Costcenter_ID),
        COALESCE(l.User1_ID, s.User1_ID), COALESCE(l.User2_ID, s.User2_ID), l.explode, 
        l.epcg_packaging_id, l.em_epcg_noofpackages, i.em_rcob_commission 
        HAVING (l.movementqty >= 0 AND l.movementqty > SUM(COALESCE(CASE WHEN i.docstatus = 'CO' THEN il.qtyinvoiced ELSE 0 END, 0)))
          OR (l.movementqty < 0 AND l.movementqty < SUM(COALESCE(CASE WHEN i.docstatus = 'CO' THEN il.qtyinvoiced ELSE 0 END, 0)))
          OR(l.explode='Y') 
        ORDER BY l.Line
        
      ]]>
    </Sql>
    <Field name="rownum" value="count"/>
    <Parameter name="adLanguage"/>
    <Parameter name="cOrderlineId" optional="true" type="argument" after="AND l.M_Product_ID=p.M_Product_ID " text=" AND l.M_InOutLine_ID IN "/>
  </SqlMethod>
  <SqlMethod name="set" type="constant" return="multiple">
      <SqlMethodComment></SqlMethodComment>
      <Sql></Sql>
  </SqlMethod>
  <SqlMethod name="selectPriceList" type="preparedStatement" connection="true" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
      SELECT plv.M_PriceList_Version_ID AS ID, cur.Priceprecision
      FROM M_PRICELIST pl, M_PRICELIST_VERSION plv, C_CURRENCY cur
      WHERE pl.M_PriceList_ID = plv.M_PriceList_ID 
      AND pl.C_Currency_ID = cur.C_Currency_ID
      AND plv.IsActive='Y'
      AND plv.ValidFrom <= TO_DATE(?) AND pl.M_PriceList_ID=? 
      ORDER BY plv.ValidFrom DESC
      ]]>
    </Sql>
    <Parameter name="validfrom"/>
    <Parameter name="mPricelistId"/>
  </SqlMethod>

  <SqlMethod name="selectPrices" type="preparedStatement" connection="true" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
      SELECT PriceActual, PriceList, PriceLimit, Description,
          '' AS C_ORDERLINE_ID, PriceStd, CancelPriceAD,
          gross_unit_price, COALESCE(grosspricelist,0) AS grosspricelist, COALESCE(grosspricestd,0) AS grosspricestd
      FROM C_OrderLine 
      WHERE C_OrderLine_ID=?
      ]]>
    </Sql>
    <Parameter name="cOrderlineId"/>
  </SqlMethod>
  <SqlMethod name="selectBOM" type="preparedStatement" connection="true" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
      SELECT M_BOM_PriceStd(pp.M_Product_ID,pp.M_PriceList_Version_ID) AS PriceStd,
      M_BOM_PriceList(pp.M_Product_ID,pp.M_PriceList_Version_ID) AS PriceList,
      M_BOM_PriceLimit(pp.M_Product_ID,pp.M_PriceList_Version_ID) AS PriceLimit, 
      M_GET_OFFER_PRICE(M_GET_OFFER(to_date(?), ?, pp.M_Product_ID), M_BOM_PriceStd(pp.M_Product_ID,pp.M_PriceList_Version_ID)) AS PriceActual, 
      M_GET_OFFER(to_date(?), ?, pp.M_Product_ID) AS M_Offer_ID
      FROM M_PRODUCTPRICE pp 
      WHERE pp.M_Product_ID=? 
      AND pp.M_PriceList_Version_ID=? 
      ]]>
    </Sql>
    <Parameter name="dateinvoiced"/>
    <Parameter name="cBpartnerId"/>
    <Parameter name="dateinvoiced"/>
    <Parameter name="cBpartnerId"/>
    <Parameter name="mProductId"/>
    <Parameter name="mPricelistVersionId"/>
  </SqlMethod>
  <SqlMethod name="insert" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      INSERT INTO C_INVOICELINE 
        (C_InvoiceLine_ID,C_Invoice_ID, AD_Client_ID,AD_Org_ID,IsActive,
        Created,CreatedBy,Updated,UpdatedBy, 
        C_OrderLine_ID,M_InOutLine_ID, Line,Description, M_Product_ID,
        C_UOM_ID,QtyInvoiced, PriceList,
        PriceActual,PriceLimit, LineNetAmt,
        ChargeAmt,C_Tax_ID, taxamt , QuantityOrder, M_Product_UOM_ID,
        M_Attributesetinstance_ID, PriceStd, taxbaseamt, excludeforwithholding,
        gross_unit_price, line_gross_amount, grosspricelist, grosspricestd,
        isdeferred, defplantype, periodnumber, c_period_id,
        a_asset_id, c_project_id, c_costcenter_id, user1_id, user2_id, explode, 
        BOM_Parent_id, 
        epcg_packaging_id, em_epcg_noofpackages
        )
      VALUES 
        (?, ?, ?, ?, 'Y', 
         now(), ?, now(), ?, 
         ?, ?, (SELECT (COALESCE(Max(Line),0))+10 FROM C_InvoiceLine WHERE C_Invoice_ID=?), ?, ?, 
         ?, TO_NUMBER(?), TO_NUMBER(?), 
         TO_NUMBER(?), TO_NUMBER(?), TO_NUMBER(?),
         0, ?, TO_NUMBER(?), TO_NUMBER(?), ?, 
         ?, TO_NUMBER(?), TO_NUMBER(?), 'N',
         TO_NUMBER(?), TO_NUMBER(?), TO_NUMBER(?), TO_NUMBER(?),
         ?, ?, TO_NUMBER(?), ?,
         ?, ?, ?, ?, ?, ?,
         (CASE to_char(?) WHEN 'Y' THEN (SELECT c_invoiceline_id 
                                FROM c_invoiceline 
                                WHERE c_invoice_id=? 
                                   and c_orderline_id = (SELECT BOM_parent_id 
                                                         FROM c_orderline 
                                                         WHERE c_orderline_id = ?))
          ELSE (SELECT c_invoiceline_id 
                FROM c_invoiceline 
                WHERE c_invoice_id=? 
                and m_inoutline_id = (SELECT BOM_parent_id 
                                      FROM m_inoutline 
                                      WHERE m_inoutline_id = ?)) END
         ), ?, TO_NUMBER(?)
        )
    </Sql>
    <Parameter name="cInvoicelineId"/>
    <Parameter name="cInvoiceId"/>
    <Parameter name="adClientId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="adUserId"/>
    <Parameter name="adUserId"/>
    <Parameter name="cOrderlineId"/>
    <Parameter name="mInoutlineId"/>
    <Parameter name="cInvoiceId"/>
    <Parameter name="description"/>
    <Parameter name="mProductId"/>
    <Parameter name="cUomId"/>
    <Parameter name="qtyinvoiced"/>
    <Parameter name="pricelist"/>
    <Parameter name="priceactual"/>
    <Parameter name="pricelimit"/>
    <Parameter name="linenetamt"/>
    <Parameter name="cTaxId"/>
    <Parameter name="taxAmt"/>
    <Parameter name="quantityOrder"/>
    <Parameter name="mProductUomId"/>
    <Parameter name="mAttributesetinstanceId"/>
    <Parameter name="pricestd"/>
    <Parameter name="taxBaseAmt"/>
    <Parameter name="grossUnitPrice"/>
    <Parameter name="grossAmount"/>
    <Parameter name="priceListGross"/>
    <Parameter name="priceStdGross"/>
    <Parameter name="isDeferredRevenue"/>
    <Parameter name="revplantype"/>
    <Parameter name="periodnumber"/>
    <Parameter name="cPeriodId"/>
    <Parameter name="aAssetId"/>
    <Parameter name="cProjectId"/>
    <Parameter name="cCostcenterId"/>
    <Parameter name="user1Id"/>
    <Parameter name="user2Id"/>
    <Parameter name="explode"/>
    <Parameter name="isOrder"/>
    <Parameter name="cInvoiceId"/>
    <Parameter name="cOrderlineId"/>
    <Parameter name="cInvoiceId"/>
    <Parameter name="mInoutlineId"/>
    <Parameter name="epcgPackagingId"/>
    <Parameter name="emEpcgNoofpackages"/>
    
  </SqlMethod>
  <SqlMethod name="insertAcctDimension" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment>Copies the order line accounting dimensions to invoice lines</SqlMethodComment>
    <Sql>
      INSERT INTO C_INVOICELINE_ACCTDIMENSION
        (C_InvoiceLine_AcctDimension_ID,C_InvoiceLine_ID, AD_Client_ID,AD_Org_ID,IsActive,
        Created,CreatedBy,Updated,UpdatedBy,
        C_Project_ID, C_Campaign_ID, User1_ID,
        User2_ID, C_Activity_ID, C_Costcenter_ID,
        C_BPartner_ID, M_Product_ID, A_Asset_ID, Amt
        )
        (SELECT GET_UUID(), ?, ?, ?, 'Y',
         now(), ?, now(), ?, C_Project_ID, C_Campaign_ID,
         User1_ID, User2_ID, C_Activity_ID, C_Costcenter_Id,
         C_BPartner_ID, M_Product_ID, A_Asset_ID, Amt
         FROM C_OrderLine_AcctDimension
         WHERE C_OrderLine_ID = ?
         )
    </Sql>
    <Parameter name="cInvoicelineId"/>
    <Parameter name="adClientId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="adUserId"/>
    <Parameter name="adUserId"/>
    <Parameter name="cOrderlineId"/>
  </SqlMethod>
  <SqlMethod name="insertShipmentAcctDimension" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment>Copies the in/out line accounting dimensions to invoice lines</SqlMethodComment>
    <Sql>
      INSERT INTO C_INVOICELINE_ACCTDIMENSION
        (C_InvoiceLine_AcctDimension_ID,C_InvoiceLine_ID, AD_Client_ID,AD_Org_ID,IsActive,
        Created,CreatedBy,Updated,UpdatedBy,
        C_Project_ID, C_Campaign_ID, User1_ID,
        User2_ID, C_Activity_ID, C_Costcenter_ID,
        C_BPartner_ID, M_Product_ID, A_Asset_ID,
        Amt
        )
        (SELECT GET_UUID(), ?, ?, ?, 'Y',
         now(), ?, now(), ?, C_Project_ID, C_Campaign_ID,
         User1_ID, User2_ID, C_Activity_ID, C_Costcenter_Id,
         C_BPartner_ID, M_Product_ID, A_Asset_ID,
         (Quantity*(SELECT PriceActual FROM C_InvoiceLine WHERE C_InvoiceLine_ID = ?))
         FROM M_InOutLine_AcctDimension
         WHERE M_InOutLine_ID = ?
         )
    </Sql>
    <Parameter name="cInvoicelineId"/>
    <Parameter name="adClientId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="adUserId"/>
    <Parameter name="adUserId"/>
    <Parameter name="cInvoicelineId"/>
    <Parameter name="mInoutlineId"/>
  </SqlMethod>
  <SqlMethod name="updateC_Order_ID" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql><![CDATA[
      UPDATE C_Invoice SET C_Order_id = ?
      WHERE C_Invoice_ID = ?
    ]]></Sql>
    <Parameter name="cOrderId"/>
    <Parameter name="cInvoiceId"/>
  </SqlMethod>
  <SqlMethod name="deleteC_Order_ID" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql> <![CDATA[
      UPDATE C_INVOICE SET C_Order_ID=NULL
      WHERE C_Invoice_ID=?
      AND C_Order_ID IS NOT NULL AND C_Order_ID <> ?
    ]]></Sql>
    <Parameter name="cInvoiceId"/>
    <Parameter name="cOrderId"/>
  </SqlMethod>
  <SqlMethod name="selectProject" type="preparedStatement" return="String" default="">
    <SqlMethodComment></SqlMethodComment>
    <Sql><![CDATA[
      SELECT C_Project_ID
      FROM C_INVOICE
      WHERE C_INVOICE_ID = ? 
    ]]></Sql>
    <Parameter name="cInvoiceId"/>
  </SqlMethod>
  <SqlMethod name="getTax" type="preparedStatement" return="String" default="">
    <SqlMethodComment></SqlMethodComment>
    <Sql><![CDATA[
      SELECT C_Tax_ID
      FROM C_ORDERLINE
      WHERE C_ORDERLINE_ID = ? 
    ]]></Sql>
    <Parameter name="cOrderLineId"/>
  </SqlMethod>
  <SqlMethod name="getOffersPriceInvoice" type="preparedStatement" return="String" default="0">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      SELECT ROUND(M_GET_OFFERS_PRICE(TO_DATE(?),?,?,TO_NUMBER(?), TO_NUMBER(?), ?),
                    (SELECT PRICEPRECISION 
                       FROM C_CURRENCY C,
                            C_INVOICE  I 
                      WHERE C.C_CURRENCY_ID = I.C_CURRENCY_ID
                        AND I.C_INVOICE_ID  = ?)) AS TOTAL FROM DUAL
    </Sql>
    <Parameter name="dateordered"/>
    <Parameter name="cBpartnerId"/>
    <Parameter name="mProductId"/>
    <Parameter name="pricestd"/>
    <Parameter name="qty"/>
    <Parameter name="pricelist"/>
    <Parameter name="invoiceid"/>
  </SqlMethod>
  <SqlMethod name="selectTaxRate" type="preparedStatement" return="String" default="">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      SELECT Rate
      FROM C_TAX
      WHERE C_Tax_ID = ?
    </Sql>
    <Parameter name="cTaxId"/>
  </SqlMethod>
</SqlClass>
