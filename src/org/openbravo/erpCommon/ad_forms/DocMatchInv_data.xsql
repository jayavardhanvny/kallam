<?xml version="1.0" encoding="UTF-8" ?>
<!--
 ******************************************************************************
 * The contents of this file are subject to the   Compiere License  Version 1.1
 * ("License"); You may not use this file except in compliance with the License
 * You may obtain a copy of the License at http://www.compiere.org/license.html
 * Software distributed under the License is distributed on an  "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific language governing rights and limitations under the License.
 * The Original Code is                  Compiere  ERP & CRM  Business Solution
 * The Initial Developer of the Original Code is Jorg Janke  and ComPiere, Inc.
 * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke, parts
 * created by ComPiere are Copyright (C) ComPiere, Inc.;   All Rights Reserved.
 * Contributor(s): Openbravo SLU
 * Contributions are Copyright (C) 2001-2013 Openbravo S.L.U.
 ******************************************************************************
-->

<SqlClass name="DocMatchInvData" package="org.openbravo.erpCommon.ad_forms">
  <SqlClassComment></SqlClassComment>
  <SqlMethod name="select" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT '' AS M_MATCHINV_ID, '' AS AD_CLIENT_ID, '' AS AD_ORG_ID, '' AS ISACTIVE,
          '' AS CREATED, '' AS CREATEDBY, '' AS UPDATED, '' AS UPDATEDBY, '' AS M_INOUTLINE_ID,
          '' AS C_INVOICELINE_ID, '' AS M_PRODUCT_ID, '' AS DATETRX, '' AS QTY, '' AS PROCESSING,
          '' AS PROCESSED, '' AS POSTED, '' AS DATEACCT, '' AS DATEDOC, '' AS C_BPARTNER_ID,
          '' AS LINENETAMT, '' AS C_CURRENCY_ID, '' AS stdprecision, '' as orderAcctDate,
          '' AS INVOICESTATUS, '' AS INOUTSTATUS, '' AS MOVEMENTQTY, '' AS QTYINVOICED,
          '' AS C_ORDERLINE_ID, '' AS LINE, '' AS DESCRIPTION,
          '' AS M_C_GLITEM_ID, '' AS PRICELIST, '' AS PRICEACTUAL, '' AS PRICELIMIT,
          '' AS C_CHARGE_ID, '' AS CHARGEAMT, '' AS C_UOM_ID, '' as C_TAX_ID,
          '' AS S_RESOURCEASSIGNMENT_ID, '' AS TAXAMT, '' AS M_ATTRIBUTESETINSTANCE_ID,
          '' AS ISDESCRIPTION, '' AS QUANTITYORDER, '' AS M_PRODUCT_UOM_ID,
          '' AS C_CAMPAIGN_ID, '' AS C_PROJECT_ID,
          '' AS USER1_ID, '' AS USER2_ID, '' AS GLITEM_CREDIT_ACCT,
          '' AS GLITEM_DEBIT_ACCT, '' AS INOUTPROJECT, '' AS C_INVOICE_ID, '' AS INOUTUSER1, 
          '' AS INOUTUSER2,'' AS INOUTCAMPAING, '' AS C_ACTIVITY_ID,  '' AS INOUTACTIVITY,
          '' AS C_COSTCENTER_ID, '' AS INOUTCOSCENTER, '' AS ISSOTRX, '' as A_Asset_ID
        FROM DUAL
      ]]>
    </Sql>
  </SqlMethod>
  <SqlMethod name="selectRegistro" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
    <![CDATA[
        SELECT M.M_MATCHINV_ID, M.AD_CLIENT_ID, M.AD_ORG_ID, M.ISACTIVE, M.CREATED, M.CREATEDBY, M.UPDATED,        
        M.UPDATEDBY, M.M_INOUTLINE_ID, M.C_INVOICELINE_ID, M.M_PRODUCT_ID, M.DATETRX, M.QTY, M.PROCESSING,        
        M.PROCESSED, M.POSTED, M.DATETRX AS DATEACCT, M.DATETRX AS DATEDOC, I.C_BPARTNER_ID, IO.DATEACCT as orderAcctDate,        
        IO.DOCSTATUS AS INOUTSTATUS, I.DOCSTATUS AS INVOICESTATUS, IOL.MOVEMENTQTY, IL.QTYINVOICED,        
        I.C_PROJECT_ID, COALESCE(IO.C_PROJECT_ID,IOL.C_PROJECT_ID)  AS INOUTPROJECT, I.USER1_ID, COALESCE(IO.USER1_ID,IOL.USER1_ID) AS INOUTUSER1, 
        I.USER2_ID, COALESCE(IO.USER2_ID,IOL.USER2_ID) AS INOUTUSER2,  I.C_COSTCENTER_ID, COALESCE(IO.C_COSTCENTER_ID,IOL.C_COSTCENTER_ID) AS INOUTCOSCENTER,
        I.C_CAMPAIGN_ID,IO.C_CAMPAIGN_ID as INOUTCAMPAING, I.C_ACTIVITY_ID, IO.C_ACTIVITY_ID AS INOUTACTIVITY
        FROM M_MATCHINV M, C_INVOICELINE IL, C_INVOICE I, M_INOUTLINE IOL, M_INOUT IO      
        WHERE IL.C_INVOICELINE_ID = M.C_INVOICELINE_ID
        AND IL.C_INVOICE_ID = I.C_INVOICE_ID
        AND IOL.M_INOUTLINE_ID = M.M_INOUTLINE_ID
        AND IO.M_INOUT_ID = IOL.M_INOUT_ID
        AND M.AD_Client_ID=?
        AND M.M_MATCHINV_ID=?
    ]]>
    </Sql>
    <Parameter name="client"/>
    <Parameter name="id"/>
    </SqlMethod>
  <SqlMethod name="selectProductAverageCost" type="preparedStatement" return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      SELECT COALESCE(M_GET_PRODUCT_COST(?, TO_DATE(?), TO_CHAR(NULL)),0) FROM DUAL
    </Sql>
    <Parameter name="mProductID"/>
    <Parameter name="date"/>
  </SqlMethod>
  <SqlMethod name="selectInvoiceData" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      SELECT L.LINENETAMT, I.C_CURRENCY_ID, I.DATEACCT, I.ISSOTRX, I.C_INVOICE_ID
      FROM C_INVOICELINE L, C_INVOICE I
      WHERE L.AD_CLIENT_ID = ?
        AND L.C_INVOICELINE_ID = ?
        AND I.C_INVOICE_ID = L.C_INVOICE_ID
    </Sql>
    <Parameter name="adClientId"/>
    <Parameter name="cInvoiceLineId"/>
  </SqlMethod>
  <SqlMethod name="selectClientCurrencyPrecission" type="preparedStatement" return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      select stdprecision 
      from c_currency cu, ad_client cl
       where cu.c_currency_id=cl.c_currency_id
         and cl.ad_client_id=?
    </Sql>
    <Parameter name="adClientId"/>
  </SqlMethod>
  <SqlMethod name="selectInvoiceLine" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      SELECT C_INVOICELINE.C_INVOICELINE_ID, C_INVOICELINE.AD_CLIENT_ID, 
        COALESCE(C_INVOICELINE_ACCTDIMENSION.AD_ORG_ID,C_INVOICELINE.AD_ORG_ID) AS AD_ORG_ID,
        C_INVOICELINE.ISACTIVE, C_INVOICELINE.C_INVOICE_ID, C_INVOICELINE.C_ORDERLINE_ID, C_INVOICELINE.M_INOUTLINE_ID,
        C_INVOICELINE.LINE, C_INVOICELINE.DESCRIPTION, 
        C_INVOICELINE.ACCOUNT_ID AS M_C_GLITEM_ID, C_INVOICELINE.QTYINVOICED,
        C_INVOICELINE.PRICELIST, C_INVOICELINE.PRICEACTUAL, C_INVOICELINE.PRICELIMIT,
        COALESCE(C_INVOICELINE_ACCTDIMENSION.AMT, C_INVOICELINE.LINENETAMT) AS LINENETAMT,
        C_INVOICELINE.C_CHARGE_ID, C_INVOICELINE.CHARGEAMT, C_INVOICELINE.C_UOM_ID, '' as C_TAX_ID,
        C_INVOICELINE.S_RESOURCEASSIGNMENT_ID, C_INVOICELINE.TAXAMT, C_INVOICELINE.M_ATTRIBUTESETINSTANCE_ID,
        C_INVOICELINE.ISDESCRIPTION, C_INVOICELINE.QUANTITYORDER, C_INVOICELINE.M_PRODUCT_UOM_ID,
        C_INVOICELINE_ACCTDIMENSION.C_CAMPAIGN_ID, 
        COALESCE(C_INVOICELINE.C_PROJECT_ID, C_INVOICELINE_ACCTDIMENSION.C_PROJECT_ID) as C_PROJECT_ID,
        COALESCE(C_INVOICELINE.USER1_ID, C_INVOICELINE_ACCTDIMENSION.USER1_ID) as USER1_ID,
        COALESCE(C_INVOICELINE.USER2_ID, C_INVOICELINE_ACCTDIMENSION.USER2_ID) as USER2_ID,
        COALESCE(C_INVOICELINE.C_COSTCENTER_ID, C_INVOICELINE_ACCTDIMENSION.C_COSTCENTER_ID) as C_COSTCENTER_ID,
        COALESCE(C_INVOICELINE.C_BPARTNER_ID, C_INVOICELINE_ACCTDIMENSION.C_BPARTNER_ID) as C_BPARTNER_ID,
        COALESCE(C_INVOICELINE.M_PRODUCT_ID, C_INVOICELINE_ACCTDIMENSION.M_PRODUCT_ID) as M_PRODUCT_ID,
        '' AS GLITEM_CREDIT_ACCT, '' AS GLITEM_DEBIT_ACCT
      FROM C_INVOICELINE left join C_INVOICELINE_ACCTDIMENSION on C_INVOICELINE.C_INVOICELINE_ID = C_INVOICELINE_ACCTDIMENSION.C_INVOICELINE_ID
      WHERE C_INVOICELINE.C_INVOICELINE_ID = ?
      ORDER BY LINE
    </Sql>
    <Parameter name="cInvoiceLineId"/>
  </SqlMethod>
  <SqlMethod name="selectInvoiceLineTotal" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT MAX(C_INVOICELINE.C_INVOICELINE_ID) AS C_INVOICELINE_ID, C_INVOICELINE.AD_CLIENT_ID,
        C_INVOICELINE.AD_ORG_ID, C_INVOICELINE.ISACTIVE, C_INVOICELINE.C_INVOICE_ID,
        MAX(C_INVOICELINE.C_ORDERLINE_ID) AS C_ORDERLINE_ID, MAX(C_INVOICELINE.M_INOUTLINE_ID) AS M_INOUTLINE_ID,
        MAX(C_INVOICELINE.LINE) AS LINE, MAX(C_INVOICELINE.DESCRIPTION) AS DESCRIPTION, C_INVOICELINE.M_PRODUCT_ID,
        SUM(C_INVOICELINE.QTYINVOICED) AS QTYINVOICED, C_INVOICELINE.PRICELIST, C_INVOICELINE.PRICEACTUAL,
        C_INVOICELINE.PRICELIMIT, SUM(COALESCE(C_INVOICELINE_ACCTDIMENSION.AMT, C_INVOICELINE.LINENETAMT)) AS LINENETAMT, MAX(C_INVOICELINE.C_CHARGE_ID) AS C_CHARGE_ID,
        SUM(C_INVOICELINE.CHARGEAMT) AS CHARGEAMT, C_INVOICELINE.C_UOM_ID, '' as C_TAX_ID,
        C_INVOICELINE.S_RESOURCEASSIGNMENT_ID, SUM(C_INVOICELINE.TAXAMT) AS TAXAMT,
        C_INVOICELINE.M_ATTRIBUTESETINSTANCE_ID,
        C_INVOICELINE.ISDESCRIPTION, SUM(C_INVOICELINE.QUANTITYORDER) AS QUANTITYORDER, C_INVOICELINE.M_PRODUCT_UOM_ID,
        C_INVOICELINE_ACCTDIMENSION.C_CAMPAIGN_ID, C_INVOICELINE_ACCTDIMENSION.C_PROJECT_ID,
        C_INVOICELINE_ACCTDIMENSION.USER1_ID, C_INVOICELINE_ACCTDIMENSION.USER2_ID
        FROM C_INVOICELINE left join C_INVOICELINE_ACCTDIMENSION on C_INVOICELINE.C_INVOICELINE_ID = C_INVOICELINE_ACCTDIMENSION.C_INVOICELINE_ID
        WHERE  C_INVOICELINE.C_INVOICELINE_ID = ?
        GROUP BY C_INVOICELINE.AD_CLIENT_ID, C_INVOICELINE.AD_ORG_ID, C_INVOICELINE.ISACTIVE, C_INVOICELINE.C_INVOICE_ID,
        C_INVOICELINE.M_PRODUCT_ID,C_INVOICELINE.PRICELIST, C_INVOICELINE.PRICEACTUAL, C_INVOICELINE.PRICELIMIT,
        C_INVOICELINE.C_UOM_ID, C_INVOICELINE.C_TAX_ID, C_INVOICELINE.S_RESOURCEASSIGNMENT_ID,
        C_INVOICELINE.M_ATTRIBUTESETINSTANCE_ID,C_INVOICELINE.ISDESCRIPTION, C_INVOICELINE.M_PRODUCT_UOM_ID,
        C_INVOICELINE_ACCTDIMENSION.C_CAMPAIGN_ID, C_INVOICELINE_ACCTDIMENSION.C_PROJECT_ID,
        C_INVOICELINE_ACCTDIMENSION.USER1_ID, C_INVOICELINE_ACCTDIMENSION.USER2_ID
        ORDER BY LINE
     ]]>
     </Sql>
     <Parameter name="C_Invoice_ID"/>
   </SqlMethod>
  <SqlMethod name="selectInOutLineTotal" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
          SELECT COALESCE(A.AD_ORG_ID,IO.AD_ORG_ID) AS AD_ORG_ID, IO.M_PRODUCT_ID, IO.LINE, IO.DESCRIPTION,
          IO.C_UOM_ID, IO.M_INOUTLINE_ID, COALESCE(A.Quantity, IO.MOVEMENTQTY) as MOVEMENTQTY,
          A.C_Campaign_ID, COALESCE(A.C_Project_Id, IO.C_Project_Id) AS C_Project_Id, COALESCE(A.User1_ID, IO.User1_ID) AS User1_ID,
          COALESCE(A.User2_ID, IO.User2_ID) AS User2_ID, COALESCE(A.C_Costcenter_ID, IO.C_Costcenter_ID) AS C_Costcenter_ID,
          COALESCE(A.A_Asset_ID,IO.A_Asset_ID) AS A_Asset_ID, COALESCE(A.C_BPartner_ID, IO.C_BPartner_ID) AS C_BPartner_ID, A.C_Activity_ID
          FROM M_InOutLine IO left join M_InOutLine_AcctDimension A ON IO.M_InOutLine_ID = A.M_InOutLine_ID
          WHERE IO.M_InOutLine_ID=?
          ORDER BY Line
     ]]>
     </Sql>
     <Parameter name="M_InOutLine_ID"/>
   </SqlMethod>
 </SqlClass>
