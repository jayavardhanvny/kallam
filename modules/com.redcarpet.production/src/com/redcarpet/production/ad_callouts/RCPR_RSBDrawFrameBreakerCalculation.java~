package com.redcarpet.production.ad_callouts;

import java.math.RoundingMode;
import com.redcarpet.production.data.RCPRShift;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import org.openbravo.erpCommon.ad_callouts.SimpleCallout;
import javax.servlet.ServletException;
import org.apache.commons.lang.StringUtils;
import org.openbravo.dal.service.OBDal;

public class RCPR_RSBDrawFrameBreakerCalculation extends SimpleCallout {

    protected void execute(CalloutInfo info) throws ServletException {
        
        String strInitialHank = info.getStringParameter("inpinitialhank", null);
        String strFinalHank = info.getStringParameter("inpfinalhank", null);
        BigDecimal retVal = new BigDecimal(BigDecimalUtil.getPlainStrNumber(strFinalHank).doubleValue() - 
                BigDecimalUtil.getPlainStrNumber(strInitialHank).doubleValue());
        DecimalFormat fr = new DecimalFormat("##.##");
        info.addResult("inpproducedhanks", fr.format(retVal));
        
        String strShfitTimeMins = info.getStringParameter("inpshifttimeinmins", null);
        String strMachineWorkingHrs = info.getStringParameter("inpmachineworkinghours", null);
        BigDecimal value = calculateMachineStoppageTime(strShfitTimeMins, strMachineWorkingHrs);
        fr = new DecimalFormat("##.##");
        info.addResult("inpmachinestoppagemins", fr.format(value));
        
        String strShiftId = info.getStringParameter("inprcprShiftId", null);
        RCPRShift shift = OBDal.getInstance().get(RCPRShift.class, strShiftId);
        info.addResult("inpshifttimeinmins", shift.getShiftInMins());
        
        //(Produced hank / 100% Hank) * 100
        String strProducedHanks = info.getStringParameter("inpproducedhanks", null);
        String strHanksMD = info.getStringParameter("inphankmd", null);
        value = calculateEffeciencyAchived(strProducedHanks, strHanksMD);
        DecimalFormat df = new DecimalFormat("##.##");
        info.addResult("inpefficencyachevied", df.format(value));

        BigDecimal deProducedhanks = info.getBigDecimalParameter("inpproducedhanks");
        BigDecimal deSilverhank = info.getBigDecimalParameter("inpsilverhank");
        BigDecimal deLbs = info.getBigDecimalParameter("inplbstokgsconversion");
        BigDecimal result = calculateProductionInKGS(deProducedhanks, deSilverhank, deLbs);
        info.addResult("inpprodinkgs", result);

    }

    private BigDecimal calculateEffeciencyAchived(String strProducedHanks, String strHanksMD) {
        BigDecimal bdProducedHanks = BigDecimalUtil.getPlainStrNumber(strProducedHanks);
        BigDecimal bdHanksMd = BigDecimalUtil.getPlainStrNumber(strHanksMD);
        BigDecimal retVal = BigDecimal.ZERO;
        try {
            retVal = bdProducedHanks.divide(bdHanksMd, RoundingMode.HALF_UP).multiply(new BigDecimal(100));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return retVal;

    }

    private BigDecimal calculateProductionInKGS(BigDecimal deProducedhanks, BigDecimal deSilverhank, BigDecimal deLbs) {
        
        BigDecimal retVal = BigDecimal.ZERO;
        try {
            retVal = (deProducedhanks.divide(deSilverhank, RoundingMode.HALF_UP)).divide(deLbs, RoundingMode.HALF_UP);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return retVal;
    }
    
    public BigDecimal calculateMachineStoppageTime(String strShiftTimeMins, String strMachineWorkingHrs) {

        strShiftTimeMins = getPlainStrNumber(strShiftTimeMins);
        strMachineWorkingHrs = getPlainStrNumber(strMachineWorkingHrs);
        BigDecimal retVal = BigDecimal.ZERO;
        try {
            double shiftTme = new BigDecimal(strShiftTimeMins).doubleValue();
            double machWorkHrs = new BigDecimal(strMachineWorkingHrs).doubleValue();
            double machWorkMins = machWorkHrs*60;
            retVal = new BigDecimal((shiftTme - machWorkMins));///60
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return retVal;
    }

    public String getPlainStrNumber(String value) {
        return  StringUtils.equalsIgnoreCase(value, "") ? "0" : value.replace(",", "");
    }
    
    
}
