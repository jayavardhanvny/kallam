package com.redcarpet.production.ad_callouts;

import java.math.RoundingMode;
import com.redcarpet.production.data.RCPRShift;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import javax.servlet.ServletException;
import org.openbravo.dal.service.OBDal;
import org.openbravo.erpCommon.ad_callouts.SimpleCallout;

public class RCPR_DoublingCalculation extends SimpleCallout {

    protected void execute(CalloutInfo info) throws ServletException {

        String strShiftId = info.getStringParameter("inprcprShiftId", null);
        RCPRShift shift = OBDal.getInstance().get(RCPRShift.class, strShiftId);
        info.addResult("inpshifttimeinmins", shift.getShiftInMins());

        String strInitialHank = info.getStringParameter("inpinitialhank", null);
        String strFinalHank = info.getStringParameter("inpfinalhank", null);
        BigDecimal retVal = new BigDecimal(BigDecimalUtil.getPlainStrNumber(strFinalHank).doubleValue()
                - BigDecimalUtil.getPlainStrNumber(strInitialHank).doubleValue());
        DecimalFormat fr = new DecimalFormat("##.##");
        info.addResult("inpproducedhanks", fr.format(retVal));

        BigDecimal dePrdHanks = BigDecimalUtil.getPlainStrNumber(info.getStringParameter("inpproducedhanks", null));
        BigDecimal dePrdConst = BigDecimalUtil.getPlainStrNumber(info.getStringParameter("inpproductionconstant", null));
        String strResult = calculateProducedKgs(dePrdHanks, dePrdConst);
        info.addResult("inpprodinkgs", strResult);

        dePrdHanks = BigDecimalUtil.getPlainStrNumber(info.getStringParameter("inpproducedhanks", null));
        BigDecimal deHanksPerShift = BigDecimalUtil.getPlainStrNumber(info.getStringParameter("inphankspershift", null));
        strResult = calculateEffeciency(dePrdHanks, deHanksPerShift);
        info.addResult("inpefficency", strResult);


    }

    private String calculateProducedKgs(BigDecimal dePrdHanks, BigDecimal dePrdConst) {
        BigDecimal temp = dePrdHanks.multiply(dePrdConst);
        String strResult = BigDecimalUtil.getDecimalPrecisionValue(temp.doubleValue());
        return strResult;
    }

    private String calculateEffeciency(BigDecimal dePrdHanks, BigDecimal deHanksPerShift) {
        BigDecimal temp = dePrdHanks.divide(deHanksPerShift, RoundingMode.HALF_UP);
        temp.multiply(new BigDecimal(100));
        String strResult = BigDecimalUtil.getDecimalPrecisionValue(temp.doubleValue());
        return strResult;
    }
}
