<?xml version="1.0" encoding="UTF-8" ?>
<!--
 ************************************************************************************
 * Copyright (C) 2011 Openbravo S.L.U.
 * Licensed under the Openbravo Commercial License version 1.0
 * You may obtain a copy of the License at http://www.openbravo.com/legal/obcl.html
 * or in the legal folder of this module distribution.
 ************************************************************************************
-->
<SqlClass name="AlertsForWrongInvoicesData" package="org.openbravo.advpaymentmngt.modulescript">
   <SqlClassComment></SqlClassComment>
   <SqlMethod name="select" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
      select distinct fin_payment_schedule.ad_client_id, ad_column_identifier('c_invoice', fin_payment_schedule.c_invoice_id, 'en_US') as invoice, 
      fin_payment_schedule.c_invoice_id, fin_payment_schedule.ad_org_id, c_invoice.issotrx, '' as ad_role_id, '' as ad_alertrule_id, '' as ad_alert_id
      from c_invoice, fin_payment_schedule, fin_payment_scheduledetail
      where c_invoice.c_invoice_id = fin_payment_schedule.c_invoice_id 
      and fin_payment_schedule.fin_payment_schedule_id = fin_payment_scheduledetail.fin_payment_schedule_invoice
      and fin_payment_scheduledetail.iscanceled = 'N'
      group by fin_payment_schedule.ad_client_id, fin_payment_schedule.ad_org_id, c_invoice.issotrx, fin_payment_schedule.fin_payment_schedule_id, fin_payment_schedule.c_invoice_id, fin_payment_schedule.amount
      having fin_payment_schedule.amount <> sum(fin_payment_scheduledetail.amount + coalesce(fin_payment_scheduledetail.writeoffamt,0))
      order by 1, 2
      ]]>
    </Sql>
  </SqlMethod>
  <SqlMethod name="selectVoidAlerts" type="preparedStatement" return="multiple">
    <SqlMethodComment>Identify alerts created not taking in account the void payment functionality.</SqlMethodComment>
    <Sql>
      <![CDATA[
      select distinct fin_payment_schedule.c_invoice_id, ad_alert.ad_alert_id
      from fin_payment_schedule, fin_payment_scheduledetail, ad_alert
      where fin_payment_schedule.fin_payment_schedule_id = fin_payment_scheduledetail.fin_payment_schedule_invoice
            and ad_alert.referencekey_id = fin_payment_schedule.c_invoice_id
      and exists (select 1
                  from fin_payment_scheduledetail psd
                  where psd.fin_payment_scheduledetail_id = fin_payment_scheduledetail.fin_payment_scheduledetail_id
                        and psd.iscanceled = 'Y')
      and ad_alert.ad_alertrule_id = ?
      group by fin_payment_schedule.fin_payment_schedule_id, fin_payment_schedule.c_invoice_id, fin_payment_schedule.amount, ad_alert.ad_alert_id
      having fin_payment_schedule.amount <> sum(fin_payment_scheduledetail.amount + coalesce(fin_payment_scheduledetail.writeoffamt,0))
      ]]>
    </Sql>
    <Parameter name="alertRuleId"/>
  </SqlMethod>  
  <SqlMethod name="existsAlertRule" type="preparedStatement" return="boolean">
    <SqlMethodComment></SqlMethodComment>
    <Sql><![CDATA[
       SELECT COUNT(*) AS EXISTING
       FROM AD_ALERTRULE
       WHERE NAME = ?
         AND ISACTIVE = 'Y'
         AND AD_CLIENT_ID = ?
      ]]>
    </Sql>
    <Parameter name="alertRule"/>
    <Parameter name="client"/>
  </SqlMethod>
  <SqlMethod name="existsAlert" type="preparedStatement" return="boolean">
    <SqlMethodComment></SqlMethodComment>
    <Sql><![CDATA[
       SELECT COUNT(*) AS EXISTING
       FROM AD_ALERT
       WHERE AD_ALERTRULE_ID = ?
       AND REFERENCEKEY_ID = ?
       AND ISFIXED = 'N'
      ]]>
    </Sql>
    <Parameter name="alertRule"/>
    <Parameter name="invoice"/>
  </SqlMethod>
  <SqlMethod name="getAlertRuleId" type="preparedStatement" return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql><![CDATA[
       SELECT MAX(ad_alertrule_id) AS name
       FROM AD_ALERTRULE
       WHERE NAME LIKE ?
         AND ISACTIVE = 'Y'
         AND AD_CLIENT_ID = ?
      ]]></Sql>
    <Parameter name="name"/>
    <Parameter name="client"/>
  </SqlMethod>
  <SqlMethod name="selectOldAlertRules" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql><![CDATA[
       SELECT ad_alertrule_id
       FROM AD_ALERTRULE
       WHERE (name = 'Wrong purchase invoice. Wrong amount in payment plan detail' OR
              name = 'Wrong sales invoice. Wrong amount in payment plan detail')
         AND ISACTIVE = 'Y'
         AND lower(SQL) not like '%iscanceled%'
      ]]></Sql>
  </SqlMethod>
  <SqlMethod name="getRoleId" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql><![CDATA[
       SELECT distinct ad_role_id
       FROM ad_window_access
       WHERE ad_window_id = ?
       AND AD_CLIENT_ID = ?
         AND ISACTIVE = 'Y'
      ]]></Sql>
    <Parameter name="window"/>
    <Parameter name="clientId"/>
  </SqlMethod>
  <SqlMethod name="insertAlertRule" type="preparedStatement" return="rowcount">
    <SqlMethodComment></SqlMethodComment>
    <Sql><![CDATA[
      INSERT INTO AD_ALERTRULE (
        AD_ALERTRULE_ID, AD_CLIENT_ID, AD_ORG_ID,ISACTIVE,
        CREATED, CREATEDBY,  UPDATED, UPDATEDBY,
        NAME, AD_TAB_ID, FILTERCLAUSE, TYPE,
        SQL
      ) VALUES (
        get_uuid(), ?, '0', 'Y',
        now(), '100', now(), '100',
        ?, ?, '', 'D',
        ?
      )
    ]]></Sql>
    <Parameter name="clientId"/>
    <Parameter name="name"/>
    <Parameter name="tabId"/>
    <Parameter name="sql"/>
  </SqlMethod>
  <SqlMethod name="insertAlert" type="preparedStatement" return="rowcount">
    <SqlMethodComment></SqlMethodComment>
    <Sql><![CDATA[
      INSERT INTO AD_Alert (
        AD_Alert_ID, AD_Client_ID, AD_Org_ID, IsActive,
        Created, CreatedBy, Updated, UpdatedBy,
        Description, AD_AlertRule_ID, Record_Id, Referencekey_ID
      ) VALUES (
        get_uuid(), ?, ?, 'Y',
        NOW(), '0', NOW(), '0',
        ?, ?, ?, ?)
      ]]>
    </Sql>
    <Parameter name="client"/>
    <Parameter name="org"/>
    <Parameter name="description" />
    <Parameter name="adAlertRuleId" />
    <Parameter name="recordId" />
    <Parameter name="referencekey_id" />
  </SqlMethod>
  <SqlMethod name="insertAlertRecipient" type="preparedStatement" return="rowcount">
    <SqlMethodComment></SqlMethodComment>
    <Sql><![CDATA[
    INSERT INTO ad_alertrecipient(
            ad_user_id, ad_client_id, ad_org_id, isactive, created, createdby, 
            updated, updatedby, ad_alertrecipient_id, ad_alertrule_id, ad_role_id, 
            sendemail)
    VALUES (null, ?, ?, 'Y', now(), '100', 
            now(), '100', get_uuid(), ?, ?, 
            'N')
      ]]>
    </Sql>
    <Parameter name="client"/>
    <Parameter name="org"/>
    <Parameter name="adAlertRuleId" />
    <Parameter name="role" />
  </SqlMethod>
  <SqlMethod name="updateAlertRuleSql" type="preparedStatement" return="rowcount">
    <SqlMethodComment></SqlMethodComment>
    <Sql><![CDATA[
      UPDATE ad_alertrule SET SQL = ? WHERE ad_alertrule_id = ?
      ]]>
    </Sql>
    <Parameter name="sql"/>
    <Parameter name="adAlertRuleId"/>
  </SqlMethod>
  <SqlMethod name="updateAlertStatus" type="preparedStatement" return="rowcount">
    <SqlMethodComment></SqlMethodComment>
    <Sql><![CDATA[
      UPDATE ad_alert SET status = ?, isfixed = ? WHERE ad_alert_id = ?
      ]]>
    </Sql>
    <Parameter name="status"/>
    <Parameter name="isfixed"/>
    <Parameter name="alertId"/>
  </SqlMethod>
</SqlClass>
