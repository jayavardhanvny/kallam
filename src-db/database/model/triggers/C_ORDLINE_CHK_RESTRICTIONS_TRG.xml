<?xml version="1.0"?>
  <database name="TRIGGER C_ORDLINE_CHK_RESTRICTIONS_TRG">
    <trigger name="C_ORDLINE_CHK_RESTRICTIONS_TRG" table="C_ORDERLINE" fires="before" insert="true" update="true" delete="true" foreach="row">
      <body><![CDATA[
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2012 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/

  v_Processed VARCHAR(60) ;
  v_C_ORDER_ID VARCHAR2(32) ;
  v_Docaction VARCHAR(60) ;
  v_Docstatus VARCHAR(60);
  v_DocumentNo C_ORDER.DocumentNO%TYPE;
  v_IsSOTrx CHAR(1);
  v_Message VARCHAR2(2000):='';
  v_QTYVARIABLE CHAR(1);
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN RETURN;
    END IF;


  IF INSERTING THEN
    v_C_ORDER_ID:=:NEW.C_ORDER_ID;
  ELSE
    v_C_ORDER_ID:=:OLD.C_ORDER_ID;
  END IF;
  IF UPDATING THEN
    IF((COALESCE(:old.LINE, 0) <> COALESCE(:NEW.LINE, 0) OR COALESCE(:old.M_PRODUCT_ID, '0') <> COALESCE(:NEW.M_PRODUCT_ID, '0') OR COALESCE(:old.QTYORDERED, 0) <> COALESCE(:NEW.QTYORDERED, 0) OR COALESCE(:old.PRICELIST, 0) <> COALESCE(:NEW.PRICELIST, 0) OR COALESCE(:old.PRICEACTUAL, 0) <> COALESCE(:NEW.PRICEACTUAL, 0) OR COALESCE(:old.PRICELIMIT, 0) <> COALESCE(:NEW.PRICELIMIT, 0) OR COALESCE(:old.LINENETAMT, 0) <> COALESCE(:NEW.LINENETAMT, 0) OR COALESCE(:old.C_CHARGE_ID, '0') <> COALESCE(:NEW.C_CHARGE_ID, '0') OR COALESCE(:old.CHARGEAMT, 0) <> COALESCE(:NEW.CHARGEAMT, 0) OR COALESCE(:old.C_TAX_ID, '0') <> COALESCE(:NEW.C_TAX_ID, '0')  OR COALESCE(:old.DIRECTSHIP, '.') <> COALESCE(:NEW.DIRECTSHIP, '.') OR COALESCE(:old.M_ATTRIBUTESETINSTANCE_ID, '0') <> COALESCE(:NEW.M_ATTRIBUTESETINSTANCE_ID, '0') OR COALESCE(:old.QUANTITYORDER, 0) <> COALESCE(:NEW.QUANTITYORDER, 0) OR COALESCE(
      :old.M_PRODUCT_UOM_ID, '0') <> COALESCE(:NEW.M_PRODUCT_UOM_ID, '0')
      OR COALESCE(:old.QtyInvoiced, 0) <> COALESCE(:NEW.QtyInvoiced, 0))) THEN
      SELECT PROCESSED,
        DOCACTION, DOCSTATUS, DocumentNo, ISSOTRX
      INTO v_Processed,
        v_Docaction, v_DocStatus, v_DocumentNo, v_IsSOTrx
      FROM C_ORDER
      WHERE C_ORDER_ID=v_C_ORDER_ID;

      IF (:NEW.M_PRODUCT_ID IS NOT NULL) THEN
        SELECT ISQUANTITYVARIABLE INTO v_QTYVARIABLE
        FROM M_PRODUCT
        WHERE M_PRODUCT_ID = :NEW.M_PRODUCT_ID;
      END IF;

      IF((COALESCE(:OLD.LINE, 0) <> COALESCE(:NEW.LINE, 0))
          OR(COALESCE(:OLD.M_PRODUCT_ID, '0') <> COALESCE(:NEW.M_PRODUCT_ID, '0'))
          OR(COALESCE(:OLD.QTYORDERED, 0) <> COALESCE(:NEW.QTYORDERED, 0))
          OR(COALESCE(:OLD.PRICELIST, 0) <> COALESCE(:NEW.PRICELIST, 0))
          OR(COALESCE(:OLD.PRICEACTUAL, 0) <> COALESCE(:NEW.PRICEACTUAL, 0))
          OR(COALESCE(:OLD.PRICELIMIT, 0) <> COALESCE(:NEW.PRICELIMIT, 0))
          OR(COALESCE(:OLD.LINENETAMT, 0) <> COALESCE(:NEW.LINENETAMT, 0))
          OR(COALESCE(:OLD.C_CHARGE_ID, '0') <> COALESCE(:NEW.C_CHARGE_ID, '0'))
          OR(COALESCE(:OLD.CHARGEAMT, 0) <> COALESCE(:NEW.CHARGEAMT, 0))
          OR(COALESCE(:OLD.C_TAX_ID, '0') <> COALESCE(:NEW.C_TAX_ID, '0'))
          OR(COALESCE(:OLD.DIRECTSHIP, '.') <> COALESCE(:NEW.DIRECTSHIP, '.'))
          OR(COALESCE(:OLD.M_ATTRIBUTESETINSTANCE_ID, '0') <> COALESCE(:NEW.M_ATTRIBUTESETINSTANCE_ID, '0'))
          OR(COALESCE(:OLD.QUANTITYORDER, 0) <> COALESCE(:NEW.QUANTITYORDER, 0))
          OR(COALESCE(:OLD.M_PRODUCT_UOM_ID, '0') <> COALESCE(:NEW.M_PRODUCT_UOM_ID, '0'))
          OR(COALESCE(:old.AD_ORG_ID, '0') <> COALESCE(:new.AD_ORG_ID, '0'))
          OR(COALESCE(:old.AD_CLIENT_ID, '0') <> COALESCE(:new.AD_CLIENT_ID, '0'))
        ) THEN
        IF (v_Processed='Y' AND v_Docaction <> 'CL') THEN
          RAISE_APPLICATION_ERROR(-20000, '@20501@') ;
        ELSIF (v_IsSOTrx ='Y' AND v_DocStatus = 'DR' AND (:OLD.QTYDELIVERED <> 0 OR :OLD.QTYINVOICED <> 0) AND (COALESCE(:OLD.PRICEACTUAL, 0) = COALESCE(:NEW.PRICEACTUAL, 0) OR :OLD.QTYINVOICED <> 0)) THEN
          RAISE_APPLICATION_ERROR(-20000, '@DeliveredInvoicedOrderline@');
        END IF;
      ELSIF (v_QTYVARIABLE <> 'Y' AND v_IsSOTrx = 'Y' AND ABS(:new.QtyInvoiced) > ABS(:new.QtyOrdered)) THEN
        v_Message := '@OrderDocumentno@' || ' ' || v_DocumentNo || ' ' || '@line@' || :old.line || '. ';
        v_Message := v_Message || '@QtyInvoicedHigherOrdered@';
        RAISE_APPLICATION_ERROR(-20000, v_Message);
      END IF;
    END IF;
  END IF;
  
  IF(DELETING OR INSERTING) THEN
  SELECT PROCESSED,
    DOCACTION
  INTO v_Processed,
    v_Docaction
  FROM C_ORDER
  WHERE C_ORDER_ID=v_C_ORDER_ID;
    IF (v_Processed='Y' and v_Docaction<> 'CL') THEN
    RAISE_APPLICATION_ERROR(-20000, '@20501@') ;
  END IF;
  END IF;
END C_ORDLINE_CHK_RESTRICTIONS_TRG
]]></body>
    </trigger>
  </database>
