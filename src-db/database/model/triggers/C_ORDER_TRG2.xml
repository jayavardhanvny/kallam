<?xml version="1.0"?>
  <database name="TRIGGER C_ORDER_TRG2">
    <trigger name="C_ORDER_TRG2" table="C_ORDER" fires="after" insert="true" update="true" delete="false" foreach="row">
      <body><![CDATA[




    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SLU
    * All portions are Copyright (C) 2001-2009 Openbravo SLU
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/
    v_DateNull DATE := TO_DATE('01-01-1900','DD-MM-YYYY');
    
    TYPE RECORD IS REF CURSOR;
    Cur_Discounts RECORD;
    V_RequiresDescription CHAR(1);
        
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN RETURN;
    END IF;

  IF(UPDATING)
    THEN  IF((COALESCE(:old.PaymentRule, '.') <> COALESCE(:NEW.PaymentRule, '.')
    OR COALESCE(:old.C_PaymentTerm_ID, '0') <> COALESCE(:NEW.C_PaymentTerm_ID, '0')
    OR COALESCE(:old.DateAcct, v_DateNull) <> COALESCE(:NEW.DateAcct, v_DateNull)))
    THEN
    -- Propagate Changes of Payment Info to existing invoices
  UPDATE C_Invoice
    SET PaymentRule=:new.PaymentRule,
    C_PaymentTerm_ID=:new.C_PaymentTerm_ID,
    DateAcct=:new.DateAcct
  WHERE C_Order_ID=:new.C_Order_ID
    AND DocStatus NOT IN('RE', 'CL', 'CO') ;
  END IF;
 END IF;
 
 
 -- Discounts
 IF (INSERTING) THEN
 FOR Cur_Discounts IN
    (
    SELECT C_DISCOUNT_ID,
      LINE,
      CASCADE
    FROM C_BPARTNER_DISCOUNT
    WHERE C_BPARTNER_ID=:NEW.C_BPARTNER_ID
      AND ISACTIVE='Y'
      AND(ISCUSTOMER=:NEW.ISSOTRX
      OR ISVENDOR <> :NEW.ISSOTRX)
      AND APPLYINORDER='Y'
    ORDER BY LINE
    )
  LOOP
    INSERT
    INTO C_ORDER_DISCOUNT
      (
        C_ORDER_DISCOUNT_ID, AD_CLIENT_ID, AD_ORG_ID,
        ISACTIVE, CREATED, CREATEDBY,
        UPDATED, UPDATEDBY, C_ORDER_ID,
        C_DISCOUNT_ID, LINE, CASCADE
      )
      VALUES
      (
        get_uuid(), :NEW.AD_Client_ID, :NEW.AD_Org_ID,
         'Y', now(),  :NEW.CREATEDBY,
        now(), :NEW.UPDATEDBY, :NEW.C_ORDER_ID,
        Cur_Discounts.C_DISCOUNT_ID, Cur_Discounts.LINE, Cur_Discounts.CASCADE
      )
      ;
  END LOOP;
  END IF;
  IF(INSERTING OR UPDATING) THEN
  	IF(:NEW.C_INCOTERMS_ID IS NOT NULL) THEN
  		SELECT REQUIRESDESCRIPTION INTO V_RequiresDescription FROM C_INCOTERMS WHERE C_INCOTERMS_ID = :NEW.C_INCOTERMS_ID;
  		IF(V_RequiresDescription = 'Y' AND :NEW.INCOTERMSDESCRIPTION IS NULL) THEN
  			RAISE_APPLICATION_ERROR(-20000, '@NoIncotermDescription@');
  		END IF;
  	END IF;  	
  END IF;
END C_ORDER_TRG2
]]></body>
    </trigger>
  </database>
