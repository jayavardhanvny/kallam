<?xml version="1.0"?>
  <database name="TRIGGER AD_MENU_TRG">
    <trigger name="AD_MENU_TRG" table="AD_MENU" fires="after" insert="true" update="true" delete="true" foreach="row">
      <body><![CDATA[
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SLU
  * Contributions are Copyright (C) 2001-2012 Openbravo, S.L.U.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************/



  v_xTree_ID VARCHAR2(32);
  v_xParent_ID VARCHAR2(32);
  v_NextNo     VARCHAR2(32);
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN RETURN;
    END IF;


  -- Insert AD_Menu Trigger
  --  for Translation
  --  and TreeNode
  IF INSERTING THEN
    --  Create Translation Row
    INSERT
    INTO AD_Menu_Trl
      (
        AD_Menu_Trl_ID, AD_Menu_ID, AD_Language, AD_Client_ID,
        AD_Org_ID, IsActive, Created,
        CreatedBy, Updated, UpdatedBy,
        Name, Description, IsTranslated
      )
    SELECT get_uuid(), :new.AD_Menu_ID,
      AD_Language.AD_Language, :new.AD_Client_ID, :new.AD_Org_ID,
      :new.IsActive, :new.Created, :new.CreatedBy,
      :new.Updated, :new.UpdatedBy, :new.Name,
      :new.Description,
       'N'
    FROM AD_Language, ad_module m
    WHERE AD_Language.IsActive='Y'
      AND IsSystemLanguage='Y'
      and m.ad_module_id = :new.ad_module_id
    and m.ad_language != AD_Language.AD_Language;
    --  Create TreeNode --
    --  get AD_Tree_ID + ParentID
    SELECT c.AD_Tree_Menu_ID,
      n.Node_ID
    INTO v_xTree_ID,
      v_xParent_ID
    FROM AD_ClientInfo c,
      AD_TreeNode n
    WHERE c.AD_Tree_Menu_ID=n.AD_Tree_ID
      AND n.Parent_ID IS NULL
      AND c.AD_Client_ID=:new.AD_Client_ID;
    --  DBMS_OUTPUT.PUT_LINE('Tree='||v_xTree_ID||'  Node='||:new.AD_Menu_ID||'  Parent='||v_xParent_ID);
    --  Insert into TreeNode
    INSERT
    INTO AD_TreeNode
      (
        AD_TreeNode_ID, AD_Client_ID, AD_Org_ID, IsActive,
        Created, CreatedBy, Updated,
        UpdatedBy, AD_Tree_ID, Node_ID,
        Parent_ID, SeqNo
      )
      VALUES
      (
        get_uuid(), :new.AD_Client_ID, :new.AD_Org_ID, 'Y',
        :new.Created, :new.CreatedBy, :new.Updated,
        :new.UpdatedBy, v_xTree_ID, :new.AD_Menu_ID,
        v_xParent_ID,(
        CASE :new.IsSummary
          WHEN 'Y'
          THEN 100
          ELSE 999
        END
        )
      )
      ;
    -- Summary Nodes first
  END IF;
  -- Inserting
  -- AD_Ref_List update trigger
  --  synchronize name,...
  IF UPDATING THEN
    IF(COALESCE(:old.Name, '.') <> COALESCE(:NEW.Name, '.')
   OR COALESCE(:old.Description, '.') <> COALESCE(:NEW.Description, '.'))
  THEN
     UPDATE AD_Menu_Trl
        SET IsTranslated='N',
        Updated=now()
      WHERE AD_Menu_ID=:new.AD_Menu_ID;
    END IF;
  END IF;
  -- Updating
  IF DELETING THEN
    --  Delete TreeNode
    --  get AD_Tree_ID, AD_Menu_ID
    SELECT c.AD_Tree_Menu_ID
      INTO v_xTree_ID
      FROM AD_ClientInfo c,
        AD_TreeNode n
      WHERE c.AD_Tree_Menu_ID=n.AD_Tree_ID
        AND n.Parent_ID IS NULL
        AND c.AD_Client_ID=:old.AD_Client_ID;
    --Assign children to principal node
    UPDATE AD_Treenode
      SET Parent_ID='0'
    WHERE AD_Tree_ID=v_xTree_ID
      AND Parent_ID=:old.AD_Menu_ID;
    --Delete node
    DELETE
      FROM AD_Treenode
      WHERE AD_Client_ID=:old.AD_Client_ID
        AND AD_Tree_ID=v_xTree_ID
        AND Node_ID=:old.AD_Menu_ID;
  END IF;
  -- Deleting
EXCEPTION
WHEN NO_DATA_FOUND THEN
  RAISE_APPLICATION_ERROR(-20000, '@20005@') ;
END AD_MENU_TRG
]]></body>
    </trigger>
  </database>
