<?xml version="1.0"?>
  <database name="TRIGGER C_DEBT_PAYMENT_TRG">
    <trigger name="C_DEBT_PAYMENT_TRG" table="C_DEBT_PAYMENT" fires="before" insert="true" update="true" delete="true" foreach="row">
      <body><![CDATA[




    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SLU
    * All portions are Copyright (C) 2001-2012 Openbravo SLU
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/

 v_IsProcessed VARCHAR(60);
 v_Canceled NUMBER:=0;
 v_Generated NUMBER:=0;
 v_Applied NUMBER:=0;
 v_Settlement_ID VARCHAR2(32);
 v_Currency_ID VARCHAR2(32);
 v_S_Currency_ID VARCHAR2(32);
 v_S_Date  DATE;
 v_Client_ID VARCHAR2(32);
 v_Org_ID VARCHAR2(32);
 v_multiplier NUMBER:=1;
 v_Oldmultiplier NUMBER:=1;
 v_Processed VARCHAR(60);
 v_Aux NUMBER;

BEGIN

    IF AD_isTriggerEnabled()='N' THEN RETURN;
    END IF;


  /* Checking constraints */
  IF (DELETING) THEN
    IF (:old.isValid = 'Y') THEN
      SELECT COALESCE(MAX(Processed),'Y') INTO v_Processed
      FROM C_Invoice
      WHERE C_Invoice_ID = :old.C_Invoice_ID;
      --dbms_output.put_line('inv:'||coalesce(:old.C_Invoice_ID,'null') ||' ord:'|| coalesce(:old.C_Order_ID,'null'));
      IF (v_Processed = 'Y' AND NOT (:old.C_Invoice_ID IS NULL AND :old.C_Order_ID IS NOT NULL)) THEN
        RAISE_APPLICATION_ERROR(-20000, '@20513@');
      END IF;
    END IF;
  ELSIF (INSERTING) THEN
    IF (:new.C_Settlement_Generate_ID IS NOT NULL) THEN
      SELECT processed INTO v_IsProcessed
       FROM C_Settlement
       WHERE C_Settlement_ID =:new.C_Settlement_Generate_ID;
      IF v_IsProcessed='Y' THEN
        RAISE_APPLICATION_ERROR(-20000, '@20510@');
      END IF;
    END IF;

  IF (COALESCE(:NEW.IsAutomaticGenerated,'Y')='N' AND :NEW.C_Order_ID IS NOT NULL) THEN
      -- Check if it is totally invoiced
      SELECT COALESCE(SUM(NOTINVOICED),0)
        INTO v_Aux
        FROM (SELECT (ABS(O.QTYORDERED)- ABS(COALESCE(LL.QTYINVOICED,0))) AS NOTINVOICED
                FROM C_ORDERLINE O LEFT JOIN (SELECT IL.C_INVOICELINE_ID, IL.QTYINVOICED, IL.C_ORDERLINE_ID
                                                FROM C_INVOICELINE IL,
                                                     C_INVOICE I
                                                WHERE IL.C_INVOICE_ID = I.C_INVOICE_ID
                                                  AND I.PROCESSED='Y') LL
                                                  ON LL.C_ORDERLINE_ID = O.C_ORDERLINE_ID
              WHERE O.C_ORDER_ID = :NEW.C_Order_ID) AAA;
        IF v_Aux = 0 THEN
          select count(*)
            into v_Aux
            from c_orderline
           where c_order_id = :NEW.C_Order_ID;
           if v_Aux>0 then
             RAISE_APPLICATION_ERROR(-20000, '@OrderCompletelyInvoiced@');
           end if;
        END IF;

      -- If Order is processed, DP should be valid
      SELECT PROCESSED
       INTO v_IsProcessed
        FROM C_ORDER
      WHERE C_ORDER_ID = :NEW.C_Order_ID;
      IF v_IsProcessed = 'Y' THEN
         :NEW.IsValid:='Y';
      END IF;
    END IF;

  IF (COALESCE(:new.IsAutomaticGenerated,'Y')='N' AND :new.C_Invoice_ID IS NOT NULL) THEN
      SELECT Processed
     INTO v_IsProcessed
     FROM C_Invoice
    WHERE C_Invoice_ID = :new.C_Invoice_ID;
    IF v_IsProcessed = 'Y' THEN
      RAISE_APPLICATION_ERROR(-20000, '@20508@');
    END IF;
    END IF;
    :new.Status := :new.Status_Initial;
  ELSIF (UPDATING) THEN
    IF (:old.IsValid = 'Y' AND ((:old.IsActive <> :new.IsActive)
                   OR (:old.IsReceipt<>:new.IsReceipt)
               OR (COALESCE(:old.C_Settlement_Generate_ID,'0')<>COALESCE(:new.C_Settlement_Generate_ID,'0'))
               -- OR (COALESCE(:old.C_Invoice_ID,'0')<>COALESCE(:new.C_Invoice_ID,'0'))
                OR (COALESCE(:old.C_BPartner_ID,'0')<>COALESCE(:new.C_BPartner_ID,'0'))
               OR (:old.C_Currency_ID<>:new.C_Currency_ID)
               OR (:old.Amount<>:new.Amount)
               OR (:old.IsManual<>:new.IsManual))) THEN
      RAISE_APPLICATION_ERROR(-20000, '@20501@');
    END IF;
    IF (C_DEBT_PAYMENT_STATUS(:old.C_Settlement_Cancel_ID,:old.Cancel_Processed,:old.Generate_Processed,
        :old.IsPaid,:old.IsValid,:old.C_CashLine_ID,:old.C_BankStatementLine_ID) NOT IN ('P','I')
     AND ((COALESCE(:old.C_BankAccount_ID,'0')<>COALESCE(:new.C_BankAccount_ID,'0')) OR
       (COALESCE(:old.C_CashBook_ID,'0')<>COALESCE(:new.C_CashBook_ID,'0')) OR
        (:old.PaymentRule<>:new.PaymentRule) OR (:old.DatePlanned<>:new.DatePlanned))) THEN
      RAISE_APPLICATION_ERROR(-20000, '@20511@');
    END IF;
    IF (:new.C_Settlement_Cancel_ID IS NOT NULL) THEN
     IF (:old.C_Settlement_Cancel_ID<>:new.C_Settlement_Cancel_ID) THEN
        RAISE_APPLICATION_ERROR(-20000, '@20512@');
     END IF;
     IF ((COALESCE(:old.C_Settlement_Cancel_ID,'0')<>COALESCE(:new.C_Settlement_Cancel_ID,'0'))
      OR (:old.IsPaid<>:new.IsPaid)
      OR (:old.WriteOffAmt<>:new.WriteOffAmt)) THEN
          SELECT processed INTO v_IsProcessed FROM C_Settlement
          WHERE C_Settlement_ID =:new.C_Settlement_Cancel_ID;

          IF v_IsProcessed='Y' THEN
           RAISE_APPLICATION_ERROR(-20000, '@20510@');
          END IF;
     END IF;
    END IF;
    IF (:new.C_Settlement_Generate_ID IS NOT NULL) THEN
      IF ((:old.C_GLItem_ID<>:new.C_GLItem_ID)
        OR (:old.IsDirectPosting<>:new.IsDirectPosting)) THEN
        SELECT processed INTO v_IsProcessed FROM C_Settlement
          WHERE C_Settlement_ID =:new.C_Settlement_Generate_ID;
          IF v_IsProcessed='Y' THEN
           RAISE_APPLICATION_ERROR(-20000, '@20510@');
          END IF;
      END IF;
    END IF;
  END IF;


  /**
  * Calculate amounts for Settlements
  */
  IF (DELETING) THEN
    IF (:old.C_Settlement_Generate_ID IS NOT NULL AND :old.Generate_Processed = 'N') THEN
   IF (:old.IsReceipt = 'N') THEN
     v_multiplier := -1;
  END IF;
      v_Generated := (- COALESCE(:old.Amount, 0))*v_multiplier;
  IF (:old.IsPaid = 'Y') THEN
     v_Applied := (COALESCE(:old.Amount, 0) - COALESCE(:old.WriteOffAmt, 0))*v_multiplier;
  END IF;
  v_Settlement_ID := :old.C_Settlement_Generate_ID;
  v_Currency_ID := :old.C_Currency_ID;
    END IF;
  END IF;
  IF (UPDATING) THEN
    IF (:new.Ad_Org_Id!=:old.ad_Org_ID) and (:NEW.C_Invoice_ID is not null) THEN
     SELECT Processed
         INTO v_IsProcessed
         FROM C_Invoice
        WHERE C_Invoice_ID = :new.C_Invoice_ID;
        IF v_IsProcessed = 'Y' THEN
          RAISE_APPLICATION_ERROR(-20000, '@20508@');
        END IF;
    END IF;

     IF (:old.C_Settlement_Generate_ID IS NOT NULL AND :old.Generate_Processed = 'N'
    AND :new.Generate_Processed = 'N')
   THEN
   IF (:old.IsReceipt = 'N') THEN
    v_Oldmultiplier := -1;
   END IF;
  IF (:new.IsReceipt = 'N') THEN
      v_multiplier := -1;
  END IF;
    v_Generated := v_Generated - (COALESCE(:old.Amount, 0)*v_Oldmultiplier);
  IF (:old.IsPaid = 'Y') THEN
      v_Applied := COALESCE(v_Applied, 0) - (COALESCE(:old.Amount, 0) - COALESCE(:old.WriteOffAmt, 0))*v_Oldmultiplier;
  END IF;
     v_Generated := v_Generated + (COALESCE(:new.Amount, 0)*v_multiplier);
  IF (:new.IsPaid = 'Y') THEN
      v_Applied := COALESCE(v_Applied,0) + (COALESCE(:new.Amount,0) - COALESCE(:new.WriteOffAmt,0))*v_multiplier;
  END IF;
  v_Settlement_ID := :new.C_Settlement_Generate_ID;
  v_Currency_ID := :new.C_Currency_ID;
    END IF;
    IF (:old.C_Settlement_Cancel_ID IS NOT NULL AND :old.Cancel_Processed = 'N' AND :new.Cancel_Processed = 'N') THEN
   IF (:old.IsReceipt = 'N') THEN
    v_multiplier := -1;
   END IF;
   IF (:old.IsPaid = 'Y') THEN
    v_Applied := COALESCE(v_Applied,0) - (COALESCE(:old.Amount,0) - COALESCE(:old.WriteOffAmt,0))*v_multiplier;
   ELSE
    v_Canceled := COALESCE(v_Canceled,0) - (COALESCE(:old.Amount,0) - COALESCE(:old.WriteOffAmt,0))*v_multiplier;
   END IF;
   v_Settlement_ID := :old.C_Settlement_Cancel_ID;
   v_Currency_ID := :old.C_Currency_ID;
  END IF;
  IF (:new.C_Settlement_Cancel_ID IS NOT NULL AND :old.Cancel_Processed = 'N' AND :new.Cancel_Processed = 'N') THEN
   IF (:new.IsReceipt = 'N') THEN
    v_multiplier := -1;
   END IF;
   IF (:new.IsPaid = 'Y') THEN
    v_Applied := COALESCE(v_Applied,0) + (COALESCE(:new.Amount,0) - COALESCE(:new.WriteOffAmt,0))*v_multiplier;
   ELSE
    v_Canceled := COALESCE(v_Canceled,0) + (COALESCE(:new.Amount,0) - COALESCE(:new.WriteOffAmt,0))*v_multiplier;
   END IF;
   v_Settlement_ID := :new.C_Settlement_Cancel_ID;
   v_Currency_ID := :new.C_Currency_ID;
  END IF;
 END IF;
  IF (INSERTING) THEN
    IF (:new.C_Settlement_Generate_ID IS NOT NULL AND :new.Generate_Processed = 'N') THEN
   IF (:new.IsReceipt = 'N') THEN
    v_multiplier := -1;
   END IF;
   v_Generated := COALESCE(:new.Amount,0)*v_multiplier;
   IF (:new.IsPaid = 'Y') THEN
    v_Applied := COALESCE(v_Applied,0) + (COALESCE(:new.Amount,0) - COALESCE(:new.WriteOffAmt,0))*v_multiplier;
   END IF;
   v_Settlement_ID := :new.C_Settlement_Generate_ID;
   v_Currency_ID := :new.C_Currency_ID;
    END IF;
  END IF;
  IF (v_Settlement_ID IS NOT NULL) THEN
    SELECT C_Currency_ID, DateTrx, AD_Client_ID, AD_Org_ID
  INTO v_S_Currency_ID, v_S_Date, v_Client_ID, v_Org_ID
  FROM C_Settlement WHERE C_Settlement_ID = v_Settlement_ID;

  IF (v_Currency_ID <> v_S_Currency_ID) THEN
   v_Canceled :=C_Currency_Convert(v_Canceled, v_Currency_ID, v_S_Currency_ID, v_S_Date, null, v_Client_ID, v_Org_ID);
   v_Generated := C_Currency_Convert(v_Generated, v_Currency_ID, v_S_Currency_ID, v_S_Date, null, v_Client_ID, v_Org_ID);
   v_Applied :=C_Currency_Convert(v_Applied, v_Currency_ID, v_S_Currency_ID, v_S_Date, null, v_Client_ID, v_Org_ID);
  END IF;
  -- Update header
    UPDATE C_Settlement
    SET CanceledNotChargeAmt = COALESCE(CanceledNotChargeAmt, 0) + COALESCE(v_Canceled, 0),
  GeneratedAmt = COALESCE(GeneratedAmt, 0) + COALESCE(v_Generated, 0),
  ChargedAmt = COALESCE(ChargedAmt, 0) + COALESCE(v_Applied, 0)
    WHERE C_Settlement_ID = v_Settlement_ID;
 END IF;
END C_DEBT_PAYMENT_TRG
]]></body>
    </trigger>
  </database>
