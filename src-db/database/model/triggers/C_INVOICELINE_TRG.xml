<?xml version="1.0"?>
  <database name="TRIGGER C_INVOICELINE_TRG">
    <trigger name="C_INVOICELINE_TRG" table="C_INVOICELINE" fires="after" insert="true" update="true" delete="true" foreach="row">
      <body><![CDATA[
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2012 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/




 v_newTaxBaseAmt  NUMBER;
 v_oldTaxBaseAmt  NUMBER;
 v_oldLine NUMBER:= 0;
 v_newLine NUMBER:= 0;
 v_taxAmt NUMBER:= 0;
 v_HasTaxLine  BOOLEAN := FALSE;
 v_isPosted   VARCHAR(60);
 v_ID    varchar2(32);
 v_Processed   VARCHAR(60);
 v_Prec NUMBER:=2;
  v_UOM_ID   varchar2(32);
 v_Currency   VARCHAR2(32);
 v_ChargeAmt   NUMBER;
 v_LineNetAmt  NUMBER;
 v_CinvoiceTaxID varchar2(32);
 v_AttrSetValueType M_Product.AttrSetValueType%TYPE;
 v_count NUMBER;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN RETURN;
    END IF;


IF (UPDATING) THEN
 IF NOT(COALESCE(:old.QtyInvoiced,0) <> COALESCE(:NEW.QtyInvoiced,0)
  OR COALESCE(:old.LineNetAmt,0) <> COALESCE(:NEW.LineNetAmt,0)
  OR COALESCE(:old.ChargeAmt,0) <> COALESCE(:NEW.ChargeAmt,0)
  OR COALESCE(:old.M_Product_ID,'0') <> COALESCE(:NEW.M_Product_ID,'0')
  OR COALESCE(:old.C_Tax_ID,'0') <> COALESCE(:NEW.C_Tax_ID,'0')
  OR COALESCE(:old.C_Uom_ID,'0') <> COALESCE(:NEW.C_Uom_ID,'0'))
 THEN
  RETURN;
 END IF;
  SELECT COUNT(1) INTO v_Count
  FROM M_MATCHINV WHERE C_INVOICELINE_ID=:OLD.C_InvoiceLine_ID;
  IF (:OLD.M_INOUTLINE_ID IS NOT NULL AND v_Count<>0 AND :OLD.QTYINVOICED <> :NEW.QTYINVOICED) THEN
    RAISE_APPLICATION_ERROR(-20000, '@QtyChangedForInvoiceLineLinked@');
  END IF;
 END IF;
 -- Difference, ID
 IF (UPDATING OR INSERTING) THEN
     IF (:NEW.M_PRODUCT_ID IS NOT NULL) THEN
       SELECT C_UOM_ID INTO v_UOM_ID FROM M_PRODUCT WHERE M_PRODUCT_ID=:NEW.M_PRODUCT_ID;
       IF (COALESCE(v_UOM_ID,'0') <> COALESCE(:NEW.C_UOM_ID,'0')) THEN
       IF (:NEW.M_INOUTLINE_ID IS NOT NULL) THEN
       SELECT C_UOM_ID INTO v_UOM_ID FROM M_INOUTLINE WHERE M_INOUTLINE_ID = :NEW.M_INOUTLINE_ID;
    IF (COALESCE(v_UOM_ID,'0') <> COALESCE(:NEW.C_UOM_ID,'0')) THEN
       RAISE_APPLICATION_ERROR(-20000, '@20111@');
    END IF;
      ELSIF (:NEW.C_ORDERLINE_ID IS NOT NULL) THEN
       SELECT C_UOM_ID INTO v_UOM_ID FROM C_ORDERLINE WHERE C_ORDERLINE_ID = :NEW.C_ORDERLINE_ID;
    IF (COALESCE(v_UOM_ID,'0') <> COALESCE(:NEW.C_UOM_ID,'0')) THEN
       RAISE_APPLICATION_ERROR(-20000, '@20111@');
    END IF;
    ELSE
       RAISE_APPLICATION_ERROR(-20000, '@20111@');
    END IF;
       END IF;
     END IF;
  v_ID := :NEW.C_Invoice_ID;
 ELSE
  v_ID := :OLD.C_Invoice_ID;
 END IF;
 IF (INSERTING OR UPDATING) THEN
  --Does not allow to change the attribute set value
  -- for products which attribute set value type is Fixed
  IF (:NEW.M_PRODUCT_ID IS NOT NULL AND COALESCE(:new.M_AttributeSetInstance_ID,'0')!='0') THEN
   SELECT ATTRSETVALUETYPE 
   INTO v_AttrSetValueType
   FROM M_PRODUCT 
   WHERE M_PRODUCT_ID=:NEW.M_PRODUCT_ID;
   IF (v_AttrSetValueType='F') THEN
    RAISE_APPLICATION_ERROR(-20000, '@AttrSetValueFixed@');
   END IF;
  END IF;
 END IF;
END C_INVOICELINE_TRG
]]></body>
    </trigger>
  </database>
