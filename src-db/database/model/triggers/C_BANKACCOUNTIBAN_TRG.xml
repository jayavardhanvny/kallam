<?xml version="1.0"?>
  <database name="TRIGGER C_BANKACCOUNTIBAN_TRG">
    <trigger name="C_BANKACCOUNTIBAN_TRG" table="C_BANKACCOUNT" fires="before" insert="true" update="true" delete="false" foreach="row">
      <body><![CDATA[
  /*************************************************************************
  * The contents of this file are subject to the Openbravo  Public  License
  * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
  * Version 1.1  with a permitted attribution clause; you may not  use this
  * file except in compliance with the License. You  may  obtain  a copy of
  * the License at http://www.openbravo.com/legal/license.html
  * Software distributed under the License  is  distributed  on  an "AS IS"
  * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  * License for the specific  language  governing  rights  and  limitations
  * under the License.
  * The Original Code is Openbravo ERP.
  * The Initial Developer of the Original Code is Openbravo SLU
  * All portions are Copyright (C) 2001-2012 Openbravo SLU
  * All Rights Reserved.
  * Contributor(s):  ______________________________________.
  ************************************************************************/

  v_IBAN_check NUMBER;
  v_Bank NVARCHAR2(4);
  v_Branch NVARCHAR2(4);
  v_DigitBank NVARCHAR2(1);
  v_Location NVARCHAR2(32);
  v_CountryId NVARCHAR2(2);
  v_BankName NVARCHAR2(60);
  v_Length NUMBER;
  v_ShortLength NUMBER;
  v_BankNameLength NUMBER;
  v_CodeAccountLength NUMBER;
  v_ProposedDisplayedAccount NVARCHAR2(512);
  v_LimitLength NUMBER:=50;
  v_LastNumAccount NUMBER:=4;
  v_AccountSeparator NVARCHAR2(5):='(...)';
  v_BankSeparator NVARCHAR2(3):='...';
  v_I_AccountNumberOrig NVARCHAR2(60);
  v_I_AccountNumberFinal NVARCHAR2(600):='';
  v_i_char NVARCHAR2(2);
  v_i_char_ascii NUMBER;
  v_i NUMBER:=1;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN RETURN;
    END IF;


  --  Default Accounts for all AcctSchema
  IF(INSERTING OR UPDATING) THEN
    SELECT NAME
    INTO v_BankName
    FROM C_BANK
    WHERE C_BANK_ID=:NEW.C_BANK_ID;
    IF (:NEW.CODEACCOUNT IS NOT NULL OR :NEW.DIGITCONTROL IS NOT NULL) THEN
      SELECT CODEBANK, CODEBRANCH, DIGITCONTROL
      INTO v_Bank, v_Branch, v_DigitBank
      FROM C_BANK
      WHERE C_BANK_ID=:NEW.C_BANK_ID;
      IF (v_Bank IS NULL OR v_Branch IS NULL OR v_DigitBank IS NULL) THEN
        RAISE_APPLICATION_ERROR(-20000, '@20258@');
      END IF;
    END IF;
    IF (:NEW.IBAN IS NOT NULL) THEN
    
        v_I_AccountNumberOrig:=SUBSTR(:NEW.IBAN, 5, LENGTH(:NEW.IBAN)-4);
        v_CodeAccountLength:=LENGTH(v_I_AccountNumberOrig);
        WHILE (v_i<=v_CodeAccountLength) LOOP 
          v_i_char:=SUBSTR(v_I_AccountNumberOrig, v_i, 1);
          v_i_char_ascii:=ASCII(v_i_char);
          --It is not a number, transforming to number
          IF ((v_i_char_ascii<48) OR (v_i_char_ascii>57)) THEN
            v_i_char:=TO_CHAR(v_i_char_ascii-55);
          END IF;
          v_I_AccountNumberFinal:=v_I_AccountNumberFinal||v_i_char;
          v_i:=v_i+1;
        END LOOP;
       
        SELECT MOD(TO_NUMBER(v_I_AccountNumberFinal||
                            TRIM(TO_CHAR(ASCII(SUBSTR(UPPER(:NEW.IBAN),1,1))-55))
                            ||TRIM(TO_CHAR(ASCII(SUBSTR(UPPER(:NEW.IBAN),2,1))-55))||
                            SUBSTR(:NEW.IBAN,3,2)
                            , '999999999999999999999999999999999999999999999999999999999999'
		                     )
                   ,97) AS DC
           INTO v_IBAN_check
        FROM DUAL;        
        IF (v_IBAN_check <> 1) THEN
          RAISE_APPLICATION_ERROR(-20000, '@20257@');
        END IF;
        SELECT C_LOCATION_ID
        INTO v_Location
        FROM C_BANK
        WHERE C_BANK_ID=:NEW.C_BANK_ID;
        IF (v_Location IS NULL) THEN
          RAISE_APPLICATION_ERROR(-20000, '@20260@');
        END IF;
        SELECT IBANCOUNTRY, IBANNODIGITS
        INTO v_CountryId, v_Length
        FROM C_COUNTRY
        WHERE C_COUNTRY_ID=(
          SELECT C_COUNTRY_ID
          FROM C_LOCATION
          WHERE C_LOCATION_ID=v_Location
          );
        IF ((v_CountryId IS NULL OR v_Length IS NULL) OR (v_CountryId <> SUBSTR(UPPER(:NEW.IBAN),1,2) OR v_Length <> LENGTH(:NEW.IBAN))) THEN
          RAISE_APPLICATION_ERROR(-20000, '@20259@');
        END IF;
      END IF;
    IF (:NEW.SHOWSPANISH='Y') THEN
      SELECT CODEBANK, CODEBRANCH, DIGITCONTROL
      INTO v_Bank, v_Branch, v_DigitBank
      FROM C_BANK
      WHERE C_BANK_ID=:NEW.C_BANK_ID;
      
      SELECT v_BankName || '. ' || v_Bank || '-' || v_Branch || '-' || v_DigitBank || :NEW.DIGITCONTROL || '-' || :NEW.CODEACCOUNT, 
             LENGTH(v_BankName || '. ' || v_Bank || '-' || v_Branch || '-' || v_DigitBank || :NEW.DIGITCONTROL || '-' || :NEW.CODEACCOUNT)
      INTO v_ProposedDisplayedAccount, v_Length
      FROM DUAL;

      IF (v_Length > v_LimitLength) THEN
       SELECT LENGTH(:NEW.CODEACCOUNT), LENGTH(v_BankName)
       INTO v_CodeAccountLength, v_BankNameLength
       FROM DUAL;
       --Remove some letters of the bank name
       SELECT SUBSTR(v_ProposedDisplayedAccount, 1, v_BankNameLength-(v_Length-v_LimitLength+LENGTH(v_BankSeparator)-1)) || v_BankSeparator || SUBSTR(v_ProposedDisplayedAccount, v_BankNameLength+LENGTH(v_BankSeparator)-1, v_Length)
       INTO v_ProposedDisplayedAccount
       FROM DUAL;
      END IF;


    ELSIF (:NEW.SHOWIBAN='Y') THEN
      SELECT v_BankName || '. ' || SUBSTR(UPPER(:NEW.IBAN),1,4) || '-' || SUBSTR(:NEW.IBAN, 5, LENGTH(:NEW.IBAN)-4),
             LENGTH(v_BankName || '. ' || SUBSTR(UPPER(:NEW.IBAN),1,4) || '-' || SUBSTR(:NEW.IBAN, 5, LENGTH(:NEW.IBAN)-4)), 
             LENGTH(v_BankName)
      INTO v_ProposedDisplayedAccount, v_Length, v_BankNameLength
      FROM DUAL;
      
      IF (v_Length > v_LimitLength) THEN
        SELECT v_Length + LENGTH(v_AccountSeparator) - v_LimitLength, LENGTH(SUBSTR(:NEW.IBAN, 5, LENGTH(:NEW.IBAN)-4))
        INTO v_ShortLength, v_CodeAccountLength
        FROM DUAL;
        IF (v_ShortLength < v_CodeAccountLength-v_LastNumAccount) THEN
          --Remove some account numbers
          SELECT SUBSTR(v_ProposedDisplayedAccount, 1, v_Length-v_CodeAccountLength+v_CodeAccountLength-v_LastNumAccount-v_ShortLength) || v_AccountSeparator || SUBSTR(v_ProposedDisplayedAccount, v_Length-v_LastNumAccount+1, v_Length)
          INTO v_ProposedDisplayedAccount
          FROM DUAL;     
        ELSE
          --Remove some letters of the bank name
          SELECT SUBSTR(v_ProposedDisplayedAccount, 1, v_BankNameLength-(v_Length-v_LimitLength+LENGTH(v_BankSeparator)-1)) || v_BankSeparator || SUBSTR(v_ProposedDisplayedAccount, v_BankNameLength+LENGTH(v_BankSeparator)-1, v_Length)
          INTO v_ProposedDisplayedAccount
          FROM DUAL;       
        END IF;     
      END IF;

    ELSE
      SELECT v_BankName || '. ' || :NEW.GENERICACCOUNT, 
             LENGTH(v_BankName || '. ' || :NEW.GENERICACCOUNT),
             LENGTH(v_BankName)
      INTO v_ProposedDisplayedAccount, v_Length, v_BankNameLength
      FROM DUAL;
      IF (v_Length > v_LimitLength) THEN
        SELECT v_Length + LENGTH(v_AccountSeparator) - v_LimitLength, LENGTH(:NEW.GENERICACCOUNT)
        INTO v_ShortLength, v_CodeAccountLength
        FROM DUAL;
        IF (v_ShortLength < v_CodeAccountLength-v_LastNumAccount) THEN
          --Remove some account numbers
          SELECT SUBSTR(v_ProposedDisplayedAccount, 1, v_Length-v_CodeAccountLength+v_CodeAccountLength-v_LastNumAccount-v_ShortLength) || v_AccountSeparator || SUBSTR(v_ProposedDisplayedAccount, v_Length-v_LastNumAccount+1, v_Length)
          INTO v_ProposedDisplayedAccount
          FROM DUAL;     
        ELSE
          --Remove some letters of the bank name
          SELECT SUBSTR(v_ProposedDisplayedAccount, 1, v_BankNameLength-(v_Length-v_LimitLength+LENGTH(v_BankSeparator)-1)) || v_BankSeparator || SUBSTR(v_ProposedDisplayedAccount, v_BankNameLength+LENGTH(v_BankSeparator)-1, v_Length)
          INTO v_ProposedDisplayedAccount
          FROM DUAL;
        END IF;    
      END IF;     
    END IF;
    
    
    :NEW.DISPLAYEDACCOUNT:=v_ProposedDisplayedAccount; 
  END IF;
EXCEPTION
 WHEN NO_DATA_FOUND THEN
  RAISE_APPLICATION_ERROR(-20000, '@20257@') ;
END C_BANKACCOUNTIBAN_TRG
]]></body>
    </trigger>
  </database>
