<?xml version="1.0"?>
  <database name="TRIGGER M_PRODUCTIONLINE_TRG">
    <trigger name="M_PRODUCTIONLINE_TRG" table="M_PRODUCTIONLINE" fires="after" insert="true" update="true" delete="true" foreach="row">
      <body><![CDATA[




  v_ID VARCHAR2(32);
  v_RO            NUMBER;
  V_STOCKED       NUMBER;
  v_MOVEMENTQTY   NUMBER;
  v_QUANTITYORDER NUMBER;
  v_AttrSetValueType M_Product.AttrSetValueType%TYPE;
  v_PRODUCTION_ID VARCHAR2(32);
  v_LINE NUMBER;
  /*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SLU
  * Contributions are Copyright (C) 2001-2012 Openbravo, S.L.U.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************/
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN RETURN;
    END IF;


  IF INSERTING OR UPDATING THEN
    v_ID:=:new.M_ProductionPlan_ID;
  ELSIF DELETING THEN
    v_ID:=:old.M_ProductionPlan_ID;
  END IF;
  --  ReadOnly Check
  SELECT COUNT(*)
  INTO v_RO
  FROM M_Production p,
    M_ProductionPlan pp
  WHERE p.M_Production_ID=pp.M_Production_ID
    AND pp.M_ProductionPlan_ID=v_ID
    AND(p.Processed='Y'
    OR p.Posted='Y') ;
  IF (v_RO > 0) THEN
    IF (DELETING OR INSERTING) THEN
      RAISE_APPLICATION_ERROR(-20000, '@20501@') ;
    END IF;
    IF (UPDATING) THEN
      IF (:old.M_ProductionPlan_ID <> :new.M_ProductionPlan_ID
          OR :old.M_Product_ID <> :new.M_Product_ID
          OR :old.movementqty <> :new.movementqty
          OR :old.M_Locator_ID <> :new.M_Locator_ID
          OR :old.M_Attributesetinstance_ID <> :new.M_Attributesetinstance_ID
          OR :old.M_Product_UOM_ID <> :new.M_Product_UOM_ID
          OR :old.quantityorder <> :new.quantityorder
          OR :old.C_UOM_ID <> :new.C_UOM_ID
          OR :old.Productiontype <> :new.Productiontype) THEN
        RAISE_APPLICATION_ERROR(-20000, '@20501@') ;
      END IF;
    END IF;
  ELSIF (v_RO = 0) THEN
    -- Updating inventory
    IF UPDATING OR DELETING THEN
      SELECT COUNT(*)
      INTO V_STOCKED
      FROM M_PRODUCT
      WHERE M_Product_ID=:OLD.M_PRODUCT_ID
        AND IsStocked='Y'
        AND ProductType='I';
      IF V_STOCKED > 0 THEN
        IF :OLD.PRODUCTIONTYPE='+' THEN
          v_MOVEMENTQTY:=:OLD.MOVEMENTQTY;
          v_QUANTITYORDER:=:OLD.QUANTITYORDER;
        ELSE
          v_MOVEMENTQTY:=-:OLD.MOVEMENTQTY;
          v_QUANTITYORDER:=-:OLD.QUANTITYORDER;
        END IF;
        M_UPDATE_INVENTORY(:OLD.AD_CLIENT_ID, :OLD.AD_ORG_ID, :OLD.UPDATEDBY, :OLD.M_PRODUCT_ID, :OLD.M_LOCATOR_ID, :OLD.M_ATTRIBUTESETINSTANCE_ID, :OLD.C_UOM_ID, :OLD.M_PRODUCT_UOM_ID, NULL, NULL, NULL, -v_MOVEMENTQTY, -v_QUANTITYORDER) ;
	-- FIXME: this shall be removed/reviewed when new warehouse management is implemented
	SELECT M_PRODUCTIONPLAN.M_PRODUCTION_ID , M_PRODUCTIONPLAN.LINE
	INTO v_PRODUCTION_ID, v_LINE
	FROM M_PRODUCTIONPLAN
	WHERE M_PRODUCTIONPLAN_ID = v_ID;
 M_UPDATE_STOCKAUX(:OLD.AD_CLIENT_ID, :OLD.AD_ORG_ID, :OLD.UPDATEDBY, :OLD.M_PRODUCT_ID, :OLD.M_LOCATOR_ID, :OLD.M_ATTRIBUTESETINSTANCE_ID, :OLD.C_UOM_ID, :OLD.M_PRODUCT_UOM_ID,-v_MOVEMENTQTY, -v_QUANTITYORDER, v_PRODUCTION_ID,'325', v_LINE);
	-- END FIXME
      END IF;
    END IF;
    IF INSERTING OR UPDATING THEN
      SELECT COUNT(*)
      INTO V_STOCKED
      FROM M_PRODUCT
      WHERE M_Product_ID=:NEW.M_PRODUCT_ID
        AND IsStocked='Y'
        AND ProductType='I';
      IF V_STOCKED > 0 THEN
        IF :NEW.PRODUCTIONTYPE='+' THEN
          v_MOVEMENTQTY:=:NEW.MOVEMENTQTY;
          v_QUANTITYORDER:=:NEW.QUANTITYORDER;
        ELSE
          v_MOVEMENTQTY:=-:NEW.MOVEMENTQTY;
          v_QUANTITYORDER:=-:NEW.QUANTITYORDER;
        END IF;
        M_UPDATE_INVENTORY(:NEW.AD_CLIENT_ID, :NEW.AD_ORG_ID, :NEW.UPDATEDBY, :NEW.M_PRODUCT_ID, :NEW.M_LOCATOR_ID, :NEW.M_ATTRIBUTESETINSTANCE_ID, :NEW.C_UOM_ID, :NEW.M_PRODUCT_UOM_ID, NULL, NULL, NULL, v_MOVEMENTQTY, v_QUANTITYORDER) ;
	-- FIXME: this shall be removed/reviewed when new warehouse management is implemented
	SELECT M_PRODUCTIONPLAN.M_PRODUCTION_ID , M_PRODUCTIONPLAN.LINE
	INTO v_PRODUCTION_ID, v_LINE
	FROM M_PRODUCTIONPLAN
	WHERE M_PRODUCTIONPLAN_ID = v_ID;
        M_UPDATE_STOCKAUX(:NEW.AD_CLIENT_ID, :NEW.AD_ORG_ID, :NEW.UPDATEDBY, :NEW.M_PRODUCT_ID, :NEW.M_LOCATOR_ID, :NEW.M_ATTRIBUTESETINSTANCE_ID, :NEW.C_UOM_ID, :NEW.M_PRODUCT_UOM_ID, v_MOVEMENTQTY, v_QUANTITYORDER, v_PRODUCTION_ID,'325', v_LINE) ;	
	-- END FIXME
      END IF;
    END IF;
  END IF;
  IF (INSERTING OR UPDATING) THEN
   --Does not allow to change the attribute set value
   -- for products which attribute set value type is Fixed
   IF (:NEW.M_PRODUCT_ID IS NOT NULL AND COALESCE(:new.M_AttributeSetInstance_ID,'0')!='0') THEN
    SELECT ATTRSETVALUETYPE 
    INTO v_AttrSetValueType
    FROM M_PRODUCT 
    WHERE M_PRODUCT_ID=:NEW.M_PRODUCT_ID;
    IF (v_AttrSetValueType='F') THEN
     RAISE_APPLICATION_ERROR(-20000, '@AttrSetValueFixed@');
    END IF;
   END IF;
  END IF;
END M_PRODUCTIONLINE_TRG
]]></body>
    </trigger>
  </database>
