<?xml version="1.0"?>
  <database name="TRIGGER C_SALESREGION_TRG">
    <trigger name="C_SALESREGION_TRG" table="C_SALESREGION" fires="after" insert="true" update="false" delete="true" foreach="row">
      <body><![CDATA[
    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SLU
    * Contributions are Copyright (C) 2001-2012 Openbravo, S.L.U.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * $Id: C_SalesRegion_Trg.sql,v 1.2 2002/10/23 03:16:57 jjanke Exp $
    ***
    * Title: SalesRegion new record
    * Description:
    *  - create treenode
    ************************************************************************/
    v_Tree_ID VARCHAR2(32);
  v_Parent_ID VARCHAR2(32);
  --
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN RETURN;
    END IF;


  IF(INSERTING) THEN
    --  Create TreeNode --
    --  get AD_Tree_ID + ParentID
    SELECT c.AD_Tree_SalesRegion_ID,
      n.Node_ID
    INTO v_Tree_ID,
      v_Parent_ID
    FROM AD_ClientInfo c,
      AD_TreeNode n
    WHERE c.AD_Tree_SalesRegion_ID=n.AD_Tree_ID
      AND n.Parent_ID IS NULL
      AND c.AD_Client_ID=:new.AD_Client_ID;
    --  DBMS_OUTPUT.PUT_LINE('Tree='||xTree_ID||'  Node='||:new.C_Project_ID||'  Parent='||xParent_ID);
    --  Insert into TreeNode
    INSERT
    INTO AD_TreeNode
      (
        AD_TreeNode_Id, AD_Client_ID, AD_Org_ID, IsActive,
        Created, CreatedBy, Updated,
        UpdatedBy, AD_Tree_ID, Node_ID,
        Parent_ID, SeqNo
      )
      VALUES
      (
        get_uuid(), :new.AD_Client_ID, :new.AD_Org_ID, :new.IsActive,
        :new.Created, :new.CreatedBy, :new.Updated,
        :new.UpdatedBy, v_Tree_ID, :new.C_SalesRegion_ID,
        v_Parent_ID,(
        CASE :new.IsSummary
          WHEN 'Y'
          THEN 100
          ELSE 999
        END
        )
      )
      ;
    -- Summary Nodes first
  ELSIF(DELETING) THEN
    --  Delete TreeNode --
    --  get AD_Tree_ID
    SELECT c.AD_Tree_SalesRegion_ID
    INTO v_Tree_ID
    FROM AD_ClientInfo c
    WHERE c.AD_Client_ID=:old.AD_Client_ID;
    DELETE
    FROM AD_TREENODE
    WHERE AD_CLIENT_ID=:old.AD_Client_ID
      AND AD_Tree_ID=v_Tree_ID
      AND Node_ID=:old.C_SalesRegion_ID;
  END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
  RAISE_APPLICATION_ERROR(-20000, '@20010@') ;
END C_SALESREGION_TRG
]]></body>
    </trigger>
  </database>
