<?xml version="1.0"?>
  <database name="TRIGGER AD_PROCESS_TRG">
    <trigger name="AD_PROCESS_TRG" table="AD_PROCESS" fires="after" insert="true" update="true" delete="false" foreach="row">
      <body><![CDATA[
/*************************************************************************
* The contents of this file are subject to the Compiere Public
* License 1.1 ("License"); You may not use this file except in
* compliance with the License. You may obtain a copy of the License in
* the legal folder of your Openbravo installation.
* Software distributed under the License is distributed on an
* "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
* implied. See the License for the specific language governing rights
* and limitations under the License.
* The Original Code is  Compiere  ERP &  Business Solution
* The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
* Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
* parts created by ComPiere are Copyright (C) ComPiere, Inc.;
* All Rights Reserved.
* Contributor(s): Openbravo SLU
* Contributions are Copyright (C) 2001-2012 Openbravo, S.L.U.
*
* Specifically, this derivative work is based upon the following Compiere
* file and version.
*************************************************************************
* $Id: AD_Process_Trg.sql,v 1.3 2002/09/16 04:14:40 jjanke Exp $
***
* Title: Process Trigger
* Description:
*   Synchronize Names and Translation
*   Sync IsActive with Menu / Field
************************************************************************/
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN RETURN;
    END IF;


  -- Insert AD_Process Trigger
  --  for Translation
  --  add Access
  IF INSERTING
  THEN
    --  Create Translation Row
    INSERT INTO AD_Process_Trl
                (AD_Process_Trl_ID, AD_Process_ID, AD_Language, AD_Client_ID, AD_Org_ID,
                 IsActive, Created, CreatedBy, Updated, UpdatedBy, NAME,
                 Description, HELP, IsTranslated)
      SELECT get_uuid(), :NEW.AD_Process_ID, AD_Language.AD_Language, :NEW.AD_Client_ID,
             :NEW.AD_Org_ID, :NEW.IsActive, :NEW.Created, :NEW.CreatedBy,
             :NEW.Updated, :NEW.UpdatedBy, :NEW.NAME, :NEW.Description,
             :NEW.HELP, 'N'
        FROM AD_Language, ad_module m
       WHERE AD_Language.IsActive = 'Y' AND IsSystemLanguage = 'Y'
       and m.ad_module_id = :new.ad_module_id
       and m.ad_language != AD_Language.AD_Language;

    -- Add Access for all Roles
    INSERT INTO AD_Process_Access
                (AD_Process_Access_ID, AD_Process_ID, AD_Role_ID, AD_Client_ID, AD_Org_ID,
                 IsActive, Created, CreatedBy, Updated, UpdatedBy,
                 IsReadWrite)
      SELECT get_uuid(), :NEW.AD_Process_ID, r.AD_Role_ID, r.AD_CLIENT_ID, r.AD_ORG_ID,
             'Y', now(), '0', now(), '0', 'Y'
        FROM AD_Role r
       where isManual='N'
        AND (r.IsAdvanced = 'Y' OR :new.IsAdvancedFeature='N');
  END IF;

-- Inserting
-- AD_Process update trigger
--  synchronize name,...
--      update AD_Column/AD_Field Name
  IF UPDATING
  THEN
    IF (:new.IsAdvancedFeature ='Y' and :old.IsAdvancedFeature ='N') THEN
      delete from ad_process_access a
      where a.ad_process_id = :new.ad_process_id
        and exists (select 1 
                      from ad_role r
                     where r.ad_role_id = a.ad_role_id
                      and r.isManual = 'N'
                      and r.IsAdvanced = 'N');
    END IF;
    IF(    COALESCE (:OLD.NAME, '.') <> COALESCE (:NEW.NAME, '.')
        OR COALESCE (:OLD.Description, '.') <> COALESCE (:NEW.Description, '.')
        OR COALESCE (:OLD.HELP, '.') <> COALESCE (:NEW.HELP, '.') )
    THEN
        UPDATE AD_Process_Trl
             SET IsTranslated = 'N',
             name = :NEW.NAME,
             description = :NEW.DESCRIPTION,
             help = :NEW.HELP,
            Updated = now()
         WHERE AD_Process_ID = :NEW.AD_Process_ID;

      UPDATE AD_Column
         SET Description = :NEW.Description,
             HELP = :NEW.HELP,
             Updated = now()
       WHERE AD_Process_ID = :NEW.AD_Process_ID
         and exists (select 1
                       from ad_module m, ad_module m1
                       where m.ad_module_id = ad_column.ad_module_id
                        and m1.ad_module_id = :new.ad_module_id
                        and m1.ad_language = m.ad_language);

      UPDATE AD_Field
         SET NAME = :NEW.NAME,
             Description = :NEW.Description,
             HELP = :NEW.HELP,
             Updated = now()
       WHERE EXISTS (
               SELECT 1
                 FROM AD_Column c, ad_module m, ad_module m1
                WHERE AD_Field.AD_Column_ID = c.AD_Column_ID
                  AND c.AD_Process_ID = :NEW.AD_Process_ID
                  AND AD_Field.IsCentrallyMaintained = 'Y'
                  and m.ad_module_id = AD_Field.ad_module_id
                  and m1.ad_module_id = :new.ad_module_id
                  and m1.ad_language = m1.ad_language);
                  
      UPDATE AD_Field_trl
         SET NAME = :NEW.NAME,
             Description = :NEW.Description,
             HELP = :NEW.HELP,
             Updated = now(),
             istranslated = 'Y'
       WHERE EXISTS (
               SELECT 1
                 FROM AD_Column c, ad_module m, ad_module m1, ad_field
                WHERE AD_Field.AD_Column_ID = c.AD_Column_ID
                  AND c.AD_Process_ID = :NEW.AD_Process_ID
                  AND AD_Field.IsCentrallyMaintained = 'Y'
                  and m.ad_module_id = AD_Field.ad_module_id
                  and m1.ad_module_id = :new.ad_module_id
                  and m1.ad_language != m1.ad_language);
    END IF;
  END IF;

-- Updating
-- Changed  IsActive
  IF UPDATING
  THEN
    IF (   COALESCE (:OLD.NAME, '.') <> COALESCE (:NEW.NAME, '.')
        OR COALESCE (:OLD.Description, '.') <>
                                              COALESCE (:NEW.Description, '.')
        OR COALESCE (:OLD.HELP, '.') <> COALESCE (:NEW.HELP, '.')
        OR COALESCE (:OLD.IsActive, '.') <> COALESCE (:NEW.IsActive, '.')
       )
    THEN
      IF :NEW.IsActive <> :OLD.IsActive
      THEN
        -- AD_Column -> Field
        UPDATE AD_Field
           SET IsActive = :NEW.IsActive
         WHERE AD_Column_ID = (SELECT AD_Column_ID
                                 FROM AD_Column
                                WHERE AD_Process_ID = :NEW.AD_Process_ID);
      END IF;
    END IF;
  END IF;
END AD_PROCESS_TRG
]]></body>
    </trigger>
  </database>
