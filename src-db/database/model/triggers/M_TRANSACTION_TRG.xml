<?xml version="1.0"?>
  <database name="TRIGGER M_TRANSACTION_TRG">
    <trigger name="M_TRANSACTION_TRG" table="M_TRANSACTION" fires="after" insert="true" update="true" delete="true" foreach="row">
      <body><![CDATA[




/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2012 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_DATEINVENTORY DATE;
  v_UOM_ID VARCHAR2(32) ;
  v_ATTRIBUTESET_ID VARCHAR2(32);
  v_AttrSetValueType M_Product.AttrSetValueType%TYPE;
  v_Name M_Product.Name%TYPE;
  v_IsOneAtSetValReq M_Attributeset.Isoneattrsetvalrequired%TYPE;
  v_PRODUCTION_ID VARCHAR2(32);
  v_LINE NUMBER;
  v_DateNull DATE := TO_DATE('01-01-1900', 'DD-MM-YYYY');
  v_DocumentLineNo M_InventoryLine.line%TYPE;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN RETURN;
    END IF;


  IF INSERTING OR UPDATING THEN
    SELECT P.NAME, P.C_UOM_ID, P.M_ATTRIBUTESET_ID, A.ISONEATTRSETVALREQUIRED, P.ATTRSETVALUETYPE
    INTO v_name, v_UOM_ID, v_attributeset_id, v_IsOneAtSetValReq, v_AttrSetValueType 
    FROM M_PRODUCT P LEFT JOIN M_ATTRIBUTESET A
    ON A.M_ATTRIBUTESET_ID = P.M_ATTRIBUTESET_ID
    WHERE P.M_PRODUCT_ID=:NEW.M_PRODUCT_ID;
    
		IF UPDATING THEN
		  IF (COALESCE(:old.m_transaction_id, '0') <> COALESCE(:new.m_transaction_id, '0'))
    	OR(COALESCE(:old.movementtype, '.') <> COALESCE(:new.movementtype, '.'))
    	OR(COALESCE(:old.m_locator_id, '0') <> COALESCE(:new.m_locator_id, '0'))
    	OR(COALESCE(:old.m_product_id, '0') <> COALESCE(:new.m_product_id, '0'))
    	OR(COALESCE(:old.movementdate, v_DateNull) <> COALESCE(:new.movementdate, v_DateNull))
	    OR(COALESCE(:old.movementqty, '0') <> COALESCE(:new.movementqty, '0'))
	    OR(COALESCE(:old.m_inventoryline_id, '0') <> COALESCE(:new.m_inventoryline_id, '0'))
    	OR(COALESCE(:old.m_movementline_id, '0') <> COALESCE(:new.m_movementline_id, '0'))
    	OR(COALESCE(:old.m_inoutline_id, '0') <> COALESCE(:new.m_inoutline_id, '0'))
    	OR(COALESCE(:old.m_productionline_id, '0') <> COALESCE(:new.m_productionline_id, '0'))
    	OR(COALESCE(:old.c_projectissue_id, '0') <> COALESCE(:new.c_projectissue_id, '0'))
    	OR(COALESCE(:old.m_attributesetinstance_id, '0') <> COALESCE(:new.m_attributesetinstance_id, '0'))
    	OR(COALESCE(:old.m_product_uom_id, '0') <> COALESCE(:new.m_product_uom_id, '0'))
    	OR(COALESCE(:old.quantityorder, '0') <> COALESCE(:new.quantityorder, '0'))
    	OR(COALESCE(:old.c_uom_id, '0') <> COALESCE(:new.c_uom_id, '0'))
    	OR(COALESCE(:old.m_internal_consumptionline_id ,'0') <> COALESCE(:new.m_internal_consumptionline_id ,'0')) THEN

      	IF(COALESCE(v_UOM_ID, '0') <> COALESCE(:NEW.C_UOM_ID, '0')) THEN
        	RAISE_APPLICATION_ERROR(-20000, '@20111@') ;
      	END IF;
      	IF(v_attributeset_id IS NOT NULL AND (v_AttrSetValueType IS NULL OR v_AttrSetValueType <> 'F') AND v_IsOneAtSetValReq = 'Y' AND COALESCE(:NEW.M_ATTRIBUTESETINSTANCE_ID, '0') = '0') THEN
        	RAISE_APPLICATION_ERROR(-20000, '@20112@' || ' - ' || v_Name) ;
      	END IF;
      	--Does not allow to change the attribute set value
      	-- for products which attribute set value type is Fixed
      	IF (:NEW.M_PRODUCT_ID IS NOT NULL AND COALESCE(:new.M_AttributeSetInstance_ID,'0')!='0') THEN
        	SELECT ATTRSETVALUETYPE 
          	INTO v_AttrSetValueType
        	FROM M_PRODUCT 
        	WHERE M_PRODUCT_ID=:NEW.M_PRODUCT_ID;
        	IF (v_AttrSetValueType='F') THEN
          	RAISE_APPLICATION_ERROR(-20000, '@AttrSetValueFixed@');
        	END IF;
      	END IF;
      END IF;
    END IF;
    
		IF INSERTING THEN
			IF(COALESCE(v_UOM_ID, '0') <> COALESCE(:NEW.C_UOM_ID, '0')) THEN
        IF (:new.M_InventoryLine_ID IS NOT NULL) THEN
	  SELECT line INTO v_DocumentLineNo FROM M_InventoryLine WHERE M_InventoryLine_ID = :new.M_InventoryLine_ID;
	END IF;
	IF (:new.M_MovementLine_ID IS NOT NULL) THEN
	  SELECT line INTO v_DocumentLineNo FROM M_MovementLine WHERE M_MovementLine_ID = :new.M_MovementLine_ID;
	END IF;
	IF (:new.M_InOutLine_ID IS NOT NULL) THEN
	  SELECT line INTO v_DocumentLineNo FROM M_InOutLine WHERE M_InOutLine_ID = :new.M_InOutLine_ID;
	END IF;
	IF (:new.M_ProductionLine_ID IS NOT NULL) THEN
	  SELECT line INTO v_DocumentLineNo FROM M_ProductionLine WHERE M_ProductionLine_ID = :new.M_ProductionLine_ID;
	END IF;
	IF (:new.M_Internal_ConsumptionLine_ID IS NOT NULL) THEN
	  SELECT line INTO v_DocumentLineNo FROM M_Internal_ConsumptionLine WHERE M_Internal_ConsumptionLine_ID = :new.M_Internal_ConsumptionLine_ID;
	END IF;
	  
	RAISE_APPLICATION_ERROR(-20000, '@DocUOMMismatch@' || ' ' || COALESCE(v_DocumentLineNo, 0));
     	END IF;
      IF(v_attributeset_id IS NOT NULL AND (v_AttrSetValueType IS NULL OR v_AttrSetValueType <> 'F') AND v_IsOneAtSetValReq = 'Y' AND COALESCE(:NEW.M_ATTRIBUTESETINSTANCE_ID, '0') = '0') THEN
       	RAISE_APPLICATION_ERROR(-20000, '@20112@' || ' - ' || v_Name) ;
     	END IF;
      --Does not allow to change the attribute set value
      -- for products which attribute set value type is Fixed
      IF (:NEW.M_PRODUCT_ID IS NOT NULL AND COALESCE(:new.M_AttributeSetInstance_ID,'0')!='0') THEN
       	SELECT ATTRSETVALUETYPE 
         	INTO v_AttrSetValueType
       	FROM M_PRODUCT 
        WHERE M_PRODUCT_ID=:NEW.M_PRODUCT_ID;
       	IF (v_AttrSetValueType='F') THEN
         	RAISE_APPLICATION_ERROR(-20000, '@AttrSetValueFixed@');
       	END IF;
     	END IF;
		END IF;
  END IF;
  
  -- Updating inventory
  IF UPDATING OR DELETING THEN
    M_UPDATE_INVENTORY(:OLD.AD_CLIENT_ID, :OLD.AD_ORG_ID, :OLD.UPDATEDBY, :OLD.M_PRODUCT_ID, :OLD.M_LOCATOR_ID, :OLD.M_ATTRIBUTESETINSTANCE_ID, :OLD.C_UOM_ID, :OLD.M_PRODUCT_UOM_ID, -:OLD.MOVEMENTQTY, -:OLD.QUANTITYORDER, NULL, :OLD.MOVEMENTQTY, :OLD.QUANTITYORDER) ;
    -- FIXME: this shall be removed/reviewed when new warehouse management is implemented
    IF (:OLD.M_PRODUCTIONLINE_ID IS NOT NULL) THEN     
	    SELECT M_PRODUCTIONPLAN.M_PRODUCTION_ID , M_PRODUCTIONPLAN.LINE
	    INTO v_PRODUCTION_ID, v_LINE
	    FROM M_PRODUCTIONPLAN, M_PRODUCTIONLINE
	    WHERE M_PRODUCTIONPLAN.M_PRODUCTIONPLAN_ID = M_PRODUCTIONLINE.M_PRODUCTIONPLAN_ID
	    AND M_PRODUCTIONLINE_ID = :OLD.M_PRODUCTIONLINE_ID;
	    M_UPDATE_STOCKAUX(:OLD.AD_CLIENT_ID, :OLD.AD_ORG_ID, :OLD.UPDATEDBY, :OLD.M_PRODUCT_ID, :OLD.M_LOCATOR_ID, :OLD.M_ATTRIBUTESETINSTANCE_ID, :OLD.C_UOM_ID, :OLD.M_PRODUCT_UOM_ID, :OLD.MOVEMENTQTY, :OLD.QUANTITYORDER, v_PRODUCTION_ID,'325', v_LINE) ;
    END IF;
    -- END FIXME
  END IF;
  IF INSERTING OR UPDATING THEN
    SELECT MAX(MOVEMENTDATE)
      INTO v_DATEINVENTORY
    FROM M_INVENTORY I,
      M_INVENTORYLINE IL
    WHERE I.M_INVENTORY_ID=IL.M_INVENTORY_ID
      AND IL.M_INVENTORYLINE_ID=:NEW.M_INVENTORYLINE_ID;
        
    M_UPDATE_INVENTORY(:NEW.AD_CLIENT_ID, :NEW.AD_ORG_ID, :NEW.UPDATEDBY, :NEW.M_PRODUCT_ID, :NEW.M_LOCATOR_ID, :NEW.M_ATTRIBUTESETINSTANCE_ID, :NEW.C_UOM_ID, :NEW.M_PRODUCT_UOM_ID, :NEW.MOVEMENTQTY, :NEW.QUANTITYORDER, v_DATEINVENTORY, -:NEW.MOVEMENTQTY, -:NEW.QUANTITYORDER) ;
    -- FIXME: this shall be removed/reviewed when new warehouse management is implemented
    IF (:NEW.M_PRODUCTIONLINE_ID IS NOT NULL) THEN    
	SELECT M_PRODUCTIONPLAN.M_PRODUCTION_ID , M_PRODUCTIONPLAN.LINE
	INTO v_PRODUCTION_ID, v_LINE
	FROM M_PRODUCTIONPLAN, M_PRODUCTIONLINE
	WHERE M_PRODUCTIONPLAN.M_PRODUCTIONPLAN_ID = M_PRODUCTIONLINE.M_PRODUCTIONPLAN_ID
	AND M_PRODUCTIONLINE_ID = :NEW.M_PRODUCTIONLINE_ID;
 M_UPDATE_STOCKAUX(:NEW.AD_CLIENT_ID, :NEW.AD_ORG_ID, :NEW.UPDATEDBY, :NEW.M_PRODUCT_ID, :NEW.M_LOCATOR_ID, :NEW.M_ATTRIBUTESETINSTANCE_ID, :NEW.C_UOM_ID, :NEW.M_PRODUCT_UOM_ID,-:NEW.MOVEMENTQTY, -:NEW.QUANTITYORDER, v_PRODUCTION_ID,'325', v_LINE) ;
    END IF;
    -- END FIXME
  END IF;
END M_TRANSACTION_TRG
]]></body>
    </trigger>
  </database>
