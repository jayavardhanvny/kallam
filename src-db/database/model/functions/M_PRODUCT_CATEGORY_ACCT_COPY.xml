<?xml version="1.0"?>
  <database name="FUNCTION M_PRODUCT_CATEGORY_ACCT_COPY">
    <function name="M_PRODUCT_CATEGORY_ACCT_COPY" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_product_category_id" type="VARCHAR" mode="in">
        <default><![CDATA[NULL]]></default>
      </parameter>
      <parameter name="p_c_acctschema_id" type="VARCHAR" mode="in">
        <default><![CDATA[NULL]]></default>
      </parameter>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SLU
  * Contributions are Copyright (C) 2001-2012 Openbravo, S.L.U.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: M_Product_Category_Acct_Copy.sql,v 1.3 2002/10/28 15:14:35 jjanke Exp $
  ***
  * Title: Copy Accounts
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    --
    v_M_Product_Category_ID VARCHAR2(32);
    v_C_Acctschema_ID VARCHAR2(32);
    v_AcctSchemaOrgId VARCHAR2(32);
    -- Product Category is unique to Client
    Cur_Acct RECORD;
    --
    v_Updated NUMBER:=0;
    v_Created NUMBER:=0;
    v_Updated_Total NUMBER:=0;
    v_Created_Total NUMBER:=0;
    rowcount NUMBER;
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      IF(Cur_Parameter.ParameterName='M_Product_Category_ID') THEN
        v_M_Product_Category_ID:=Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE('  M_Product_Category_ID=' || v_M_Product_Category_ID) ;
      ELSIF(Cur_Parameter.ParameterName='C_AcctSchema_ID') THEN
        v_C_Acctschema_ID:=Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE('  C_AcctSchema_ID=' || v_C_Acctschema_ID) ;
      ELSE
        DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || Cur_Parameter.ParameterName) ;
      END IF;
    END LOOP; -- Get Parameter
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
    -- Direct Call
    IF(p_Product_Category_ID IS NOT NULL) THEN
      v_M_Product_Category_ID:=p_Product_Category_ID;
      DBMS_OUTPUT.PUT_LINE('  M_Product_Category_ID=' || v_M_Product_Category_ID) ;
    ELSIF(p_C_Acctschema_ID IS NOT NULL) THEN
      v_C_Acctschema_ID:=p_C_Acctschema_ID;
      DBMS_OUTPUT.PUT_LINE('  C_Acctschema_ID=' || v_C_Acctschema_ID) ;
    END IF;
    /**
    * For all Accounting Schema of the Category
    */
    FOR Cur_Acct IN
      (SELECT *
      FROM M_Product_Category_Acct
      WHERE M_Product_Category_ID=v_M_Product_Category_ID
	  AND (M_Product_Category_Acct.C_ACCTSCHEMA_ID = v_C_Acctschema_ID OR v_C_Acctschema_ID IS NULL)
          AND EXISTS (SELECT 1 FROM AD_Org_AcctSchema oa
	     WHERE M_Product_Category_Acct.C_AcctSchema_ID = oa.C_AcctSchema_ID
	    AND (AD_IsOrgIncluded(oa.AD_Org_ID, M_Product_Category_Acct.AD_Org_ID, M_Product_Category_Acct.AD_Client_ID)<>-1
	    OR AD_IsOrgIncluded(M_Product_Category_Acct.AD_Org_ID, oa.AD_Org_ID, M_Product_Category_Acct.AD_Client_ID)<>-1))	
      )
    LOOP

      SELECT Ad_Org_ID
      INTO v_AcctSchemaOrgId
      FROM C_AcctSchema
      WHERE C_AcctSchema_ID = Cur_Acct.C_AcctSchema_ID;

      -- Update existing Products
      UPDATE M_Product_Acct
        SET P_Revenue_Acct=Cur_Acct.P_Revenue_Acct,
        P_Def_Revenue_Acct=Cur_Acct.P_Def_Revenue_Acct,
        P_Revenue_Return_Acct=Cur_Acct.P_Revenue_Return_Acct,
        P_Expense_Acct=Cur_Acct.P_Expense_Acct,
        P_Def_Expense_Acct=Cur_Acct.P_Def_Expense_Acct,
        P_Asset_Acct=Cur_Acct.P_Asset_Acct,
        P_CoGs_Acct=Cur_Acct.P_CoGs_Acct,
        P_CoGs_Return_Acct=Cur_Acct.P_CoGs_Return_Acct,
        P_PurchasePriceVariance_Acct=Cur_Acct.P_PurchasePriceVariance_Acct,
        P_InvoicePriceVariance_Acct=Cur_Acct.P_InvoicePriceVariance_Acct,
        P_TradeDiscountRec_Acct=Cur_Acct.P_TradeDiscountRec_Acct,
        P_TradeDiscountGrant_Acct=Cur_Acct.P_TradeDiscountGrant_Acct,
        Updated=now(),
        UpdatedBy='0'
      WHERE M_Product_Acct.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        AND EXISTS
        (SELECT *
        FROM M_Product p
        WHERE p.M_Product_ID=M_Product_Acct.M_Product_ID
          AND p.M_Product_Category_ID=Cur_Acct.M_Product_Category_ID
          AND Ad_Org_IsInNaturalTree(p.Ad_Org_ID,v_AcctSchemaOrgId, p.AD_Client_ID) = 'Y'
        )
        ;
      rowcount:=SQL%ROWCOUNT;
      v_Updated:=rowcount;
      -- Insert new Products
      INSERT
      INTO M_Product_Acct
        (
          M_Product_Acct_ID, M_Product_ID, C_AcctSchema_ID, AD_Client_ID, AD_Org_ID,
          IsActive, Created, CreatedBy, Updated,
          UpdatedBy, P_Revenue_Acct, P_Def_Revenue_Acct, P_Revenue_Return_Acct, P_Expense_Acct, P_Def_Expense_Acct,P_Asset_Acct,
          P_CoGs_Acct, P_CoGs_Return_Acct, P_PurchasePriceVariance_Acct, P_InvoicePriceVariance_Acct, P_TradeDiscountRec_Acct,
          P_TradeDiscountGrant_Acct
        )
      SELECT get_uuid(), p.M_Product_ID,
        Cur_Acct.C_AcctSchema_ID, p.AD_Client_ID, p.AD_Org_ID, 'Y',
        now(), '0', now(), '0',
        Cur_Acct.P_Revenue_Acct, Cur_Acct.P_Def_Revenue_Acct, Cur_Acct.P_Revenue_Return_Acct, Cur_Acct.P_Expense_Acct, Cur_Acct.P_Def_Expense_Acct, Cur_Acct.P_Asset_Acct, Cur_Acct.P_CoGs_Acct, Cur_Acct.P_CoGs_Return_Acct,
        Cur_Acct.P_PurchasePriceVariance_Acct, Cur_Acct.P_InvoicePriceVariance_Acct, Cur_Acct.P_TradeDiscountRec_Acct, Cur_Acct.P_TradeDiscountGrant_Acct
      FROM M_Product p
      WHERE p.M_Product_Category_ID=Cur_Acct.M_Product_Category_ID
      AND Ad_Org_IsInNaturalTree(p.Ad_Org_ID,v_AcctSchemaOrgId, p.AD_Client_ID) = 'Y'
        AND NOT EXISTS
        (SELECT *
        FROM M_Product_Acct pa
        WHERE pa.M_Product_ID=p.M_Product_ID
          AND pa.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        )
        ;
      rowcount:=SQL%ROWCOUNT;
      v_Created:=rowcount;
      DBMS_OUTPUT.PUT_LINE('Product = ' || v_Updated || ' / ' || v_Created) ;
      v_Updated_Total:=v_Updated_Total + v_Updated;
      v_Created_Total:=v_Created_Total + v_Created;
    END LOOP;
    v_Message:='@Created@=' || v_Created_Total || ', @Updated@=' || v_Updated_Total;
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END M_PRODUCT_CATEGORY_ACCT_COPY
]]></body>
    </function>
  </database>
