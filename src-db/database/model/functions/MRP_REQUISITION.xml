<?xml version="1.0"?>
  <database name="FUNCTION MRP_REQUISITION">
    <function name="MRP_REQUISITION" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2006 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  v_User_ID VARCHAR2(32):='0';
  v_Client_ID VARCHAR2(32);
  v_Org_ID VARCHAR2(32);
  v_Description0 VARCHAR(255);
  v_Description VARCHAR(255);
  v_Count NUMBER;

  v_MRequisition_ID VARCHAR2(32):=NULL;
  v_MRequisitionLine_ID VARCHAR2(32);
  v_DocumentNo NVARCHAR2(60);
  v_Line NUMBER:= 0;

  FINISH_PROCESS BOOLEAN DEFAULT FALSE;
  --  Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_workproposal RECORD;
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, i.AD_User_ID, i.AD_Client_ID, i.AD_Org_ID,
        p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_User_ID:=Cur_Parameter.AD_User_ID;
      v_Client_ID := Cur_Parameter.AD_Client_ID;
      v_Org_ID := Cur_Parameter.AD_Org_ID;
    END LOOP; -- Get Parameter
	
    SELECT NAME || ' ' || TO_CHAR(DATEDOC), Description, AD_ORG_ID
      INTO v_Description0, v_Description, v_Org_ID
    FROM MRP_RUN_PRODUCTION
    WHERE MRP_RUN_PRODUCTION_ID = v_Record_ID;

    SELECT count(*) INTO v_Count
    FROM MRP_RUN_PRODUCTIONLINE
    WHERE MRP_RUN_PRODUCTION_ID = v_Record_ID
      AND INOUTTRXTYPE = 'MP'
      AND M_REQUISITIONLINE_ID IS NULL;
    IF (v_Count = 0) THEN
      v_Message := '@NoProposalsWithoutRequisitionLine@';
      RAISE_APPLICATION_ERROR(-20000, v_Message);
    END IF;

    Ad_Sequence_Next('M_Requisition', v_Client_ID, v_MRequisition_ID);
    Ad_Sequence_Doc('DocumentNo_M_Requisition', v_Client_ID, 'Y', v_DocumentNo);

    v_Description := 'MRP: ' || v_Description0 || CHR(10) || v_Description;

    INSERT INTO M_Requisition (
      M_REQUISITION_ID, AD_CLIENT_ID, AD_ORG_ID,
      ISACTIVE, CREATED,  CREATEDBY,  UPDATED,  UPDATEDBY,
      DESCRIPTION, DOCUMENTNO, AD_USER_ID
    ) VALUES (
      v_MRequisition_ID, v_Client_ID, v_Org_ID,
      'Y', now(), v_User_ID, now(), v_User_ID,
      v_Description, v_DocumentNo, v_User_ID
    );

    FOR Cur_workproposal IN (
      SELECT MRP_RUN_PRODUCTIONLINE.*, M_PRODUCT.C_UOM_ID
      FROM MRP_RUN_PRODUCTIONLINE, M_PRODUCT
      WHERE MRP_RUN_PRODUCTION_ID = v_Record_ID
        AND MRP_RUN_PRODUCTIONLINE.M_PRODUCT_ID = M_PRODUCT.M_PRODUCT_ID
        AND INOUTTRXTYPE = 'MP'
        AND M_REQUISITIONLINE_ID IS NULL
      ORDER BY PLANNEDDATE
      ) LOOP
      v_ResultStr:='Create Requisition';

      v_Line := v_Line + 10;
      Ad_Sequence_Next('M_RequisitionLine', v_Client_ID, v_MRequisitionLine_ID);
      INSERT INTO M_REQUISITIONLINE (
        M_REQUISITIONLINE_ID,  AD_CLIENT_ID, AD_ORG_ID,
        ISACTIVE, CREATED, CREATEDBY, UPDATED, UPDATEDBY,
        M_REQUISITION_ID,  NEEDBYDATE, M_PRODUCT_ID,
        QTY, LINE, C_UOM_ID
      ) VALUES (
        v_MRequisitionLine_ID, v_Client_ID, v_Org_ID,
        'Y', now(), v_User_ID, now(), v_User_ID,
        v_MRequisition_ID, Cur_workproposal.PLANNEDDATE, Cur_workproposal.M_PRODUCT_ID,
        Cur_workproposal.QTY, v_Line, Cur_workproposal.C_UOM_ID
      );

      UPDATE MRP_RUN_PRODUCTIONLINE
         SET M_REQUISITIONLINE_ID=v_MRequisitionLine_ID
      WHERE MRP_RUN_PRODUCTIONLINE_ID = Cur_workproposal.MRP_RUN_PRODUCTIONLINE_ID;
    END LOOP;
  END; --BODY
  v_Message := '@CreatedRequisition@: ' || v_DocumentNo;
  v_ResultStr :='Set requisition lines as planned';
  UPDATE M_RequisitionLine
  SET REQSTATUS = 'P'
  WHERE M_RequisitionLine_ID IN (SELECT M_RequisitionLine_ID
                                 FROM MRP_RUN_PRODUCTIONLINE
                                 WHERE MRP_RUN_PRODUCTION_ID = v_Record_ID
                                   AND INOUTTRXTYPE = 'MF');

  UPDATE M_Requisition
  SET DocStatus = 'CL'
  WHERE M_Requisition_ID IN (SELECT M_Requisition_ID
                            FROM M_RequisitionLine
                            WHERE M_RequisitionLine_ID IN (SELECT M_RequisitionLine_ID
                                                          FROM MRP_RUN_PRODUCTIONLINE
                                                          WHERE MRP_RUN_PRODUCTION_ID = v_Record_ID
                                                            AND INOUTTRXTYPE = 'MF'))
    AND NOT EXISTS (SELECT 1
                    FROM M_RequisitionLine rl
                    WHERE rl.REQSTATUS = 'O'
                      AND rl.M_Requisition_ID = M_Requisition.M_Requisition_ID);
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
--  RETURN;
END MRP_REQUISITION
]]></body>
    </function>
  </database>
