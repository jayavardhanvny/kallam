<?xml version="1.0"?>
  <database name="FUNCTION C_INVOICE_CREATERECEIPT">
    <function name="C_INVOICE_CREATERECEIPT" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SLU
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.U.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: C_Invoice_CreateReceipt.sql,v 1.2 2002/05/22 02:48:28 jjanke Exp $
  ***
  * Title: Create Receipt (Shipment) From Invoice
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    v_M_Locator_ID VARCHAR2(32);
    --
    v_DocStatus VARCHAR2(60) ;
    v_InOut_ID VARCHAR2(32);
    v_DocumentNo M_INOUT.DocumentNo%TYPE;
    FINISH_PROCESS BOOLEAN:=false;
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      IF(Cur_Parameter.ParameterName='M_Locator_ID') THEN
        v_M_Locator_ID:=Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE('  M_Locator_ID=' || v_M_Locator_ID) ;
      END IF;
      v_Record_ID:=Cur_Parameter.Record_ID;
    END LOOP; -- Get Parameter
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
    -- Read Information from Record
    v_ResultStr:='Reading Record';
    SELECT DocStatus
    INTO v_DocStatus
    FROM C_Invoice
    WHERE C_Invoice_ID=v_Record_ID;
    -- Invoice must be complete
    IF(v_DocStatus NOT IN('CO', 'CL')) THEN
      RAISE_APPLICATION_ERROR(-20000, '@InvoiceCreateDocNotCompleted@');
    END IF;
    -- Check, if we have a Shipment already
    IF(NOT FINISH_PROCESS) THEN
      DECLARE
        v_DocumentNo VARCHAR2(60) ;
        Cur_MInOut RECORD;
      BEGIN
        v_ResultStr:='Check Receipt exists';
        FOR Cur_MInOut IN
          (SELECT M_InOut_ID, DocumentNo  FROM M_InOut  WHERE C_Invoice_ID=v_Record_ID)
        LOOP
          v_DocumentNo:=Cur_MInOut.DocumentNo;
          v_Message:='@InvoiceCreateDocAlreadyExists@ = ' || v_DocumentNo;
          RAISE_APPLICATION_ERROR(-20000, v_Message);
          EXIT;
        END LOOP;
      EXCEPTION
      WHEN OTHERS THEN
        NULL;
      END;
    END IF;--FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      -- Create (and post) the shipment
      v_ResultStr:='Create Shipment';
      M_InOut_Create(NULL, v_InOut_ID, NULL, v_Record_ID, 'Y', v_M_Locator_ID) ;
      SELECT DocumentNo INTO v_DocumentNo FROM M_InOut WHERE M_Inout_ID = v_InOut_ID;
      v_Message := '@DocumentNo@ = ' || v_DocumentNo;
      DBMS_OUTPUT.PUT_LINE('  Shipment - ' || v_InOut_ID) ;
      IF(v_InOut_ID='0') THEN
        RAISE_APPLICATION_ERROR(-20000, '@InOutCreateFailed@');
      END IF;
    END IF; --FINISH_PROCESS
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END C_INVOICE_CREATERECEIPT
]]></body>
    </function>
  </database>
