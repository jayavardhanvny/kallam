<?xml version="1.0"?>
  <database name="FUNCTION A_AMORTIZATION_PROCESS">
    <function name="A_AMORTIZATION_PROCESS" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2009 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID VARCHAR2(32);
  v_AD_User_ID VARCHAR2(32):='0';
  v_PROCESSED VARCHAR2(60):='N';
  v_POSTED VARCHAR2(60):='Y';
  v_is_included NUMBER:=0;
  v_AD_Org_ID VARCHAR2(32);
  v_date DATE;
  v_available_period NUMBER:=0; 
  v_is_ready AD_Org.IsReady%TYPE;
  v_is_tr_allow AD_OrgType.IsTransactionsAllowed%TYPE;
  v_isacctle AD_OrgType.IsAcctLegalEntity%TYPE;
  v_org_bule_id AD_Org.AD_Org_ID%TYPE;
  FINISH_PROCESS BOOLEAN DEFAULT FALSE;
  --  Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
 
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
    END LOOP; -- Get Parameter
    SELECT PROCESSED, POSTED, AD_Org_ID, DateAcct
    INTO v_PROCESSED, v_POSTED, v_AD_Org_ID, v_date
    FROM A_AMORTIZATION
    WHERE A_AMORTIZATION_ID=V_Record_ID;
    IF(v_PROCESSED='Y' AND v_POSTED<>'Y') THEN
      --UnProcess amortization
      v_ResultStr:='ProcessAmortization';
      UPDATE A_Amortization
        SET Processed='N', TotalAmortization=
        (SELECT sum(C_Currency_Convert(AmortizationAmt, C_Currency_ID, A_Amortization.C_Currency_ID, now(), 'S', AD_Client_ID, AD_Org_ID))
        FROM A_AmortizationLine
        WHERE A_Amortization_ID=A_Amortization.A_Amortization_ID
        ),Updated=now(),UpdatedBy=v_AD_User_ID
      WHERE A_Amortization_ID=V_Record_ID;
    ELSIF(v_PROCESSED='N') THEN
      -- Check the header belongs to a organization where transactions are posible and ready to use
      SELECT AD_Org.IsReady, Ad_OrgType.IsTransactionsAllowed
      INTO v_is_ready, v_is_tr_allow
      FROM A_Amortization, AD_Org, AD_OrgType
      WHERE AD_Org.AD_Org_ID=A_Amortization.AD_Org_ID
      AND AD_Org.AD_OrgType_ID=AD_OrgType.AD_OrgType_ID
      AND A_Amortization.A_Amortization_ID=V_Record_ID;
      IF (v_is_ready='N') THEN
        RAISE_APPLICATION_ERROR(-20000, '@OrgHeaderNotReady@');
      END IF;
      IF (v_is_tr_allow='N') THEN
        RAISE_APPLICATION_ERROR(-20000, '@OrgHeaderNotTransAllowed@');
      END IF;    
      
      -- Check the document does not have elements of different business unit or legal entities.
      SELECT AD_ORG_CHK_DOCUMENTS('A_AMORTIZATION', 'A_AMORTIZATIONLINE', V_Record_ID, 'A_AMORTIZATION_ID', 'A_AMORTIZATION_ID') INTO v_is_included FROM dual;
      IF (v_is_included=-1) THEN
         RAISE_APPLICATION_ERROR(-20000, '@LinesAndHeaderDifferentLEorBU@');
      END IF;
      
      -- Check the period control is opened (only if it is legal entity with accounting)
      -- Gets the BU or LE of the document
      SELECT AD_GET_DOC_LE_BU('A_AMORTIZATION', V_Record_ID, 'A_AMORTIZATION_ID', 'LE')
      INTO v_org_bule_id
      FROM DUAL;
      
      SELECT AD_OrgType.IsAcctLegalEntity
      INTO v_isacctle
      FROM AD_OrgType, AD_Org
      WHERE AD_Org.AD_OrgType_ID = AD_OrgType.AD_OrgType_ID
      AND AD_Org.AD_Org_ID=v_org_bule_id;
      
      IF (v_isacctle='Y') THEN
        SELECT C_CHK_OPEN_PERIOD(v_AD_Org_ID, v_date, 'AMZ', NULL) 
        INTO v_available_period
        FROM DUAL;
        
        IF (v_available_period<>1) THEN
          RAISE_APPLICATION_ERROR(-20000, '@PeriodNotAvailable@');
        END IF;
      END IF;
      
       
      --Process amortization    
      v_ResultStr:='ProcessAmortization';
      UPDATE A_Amortization
        SET Processed='Y', TotalAmortization=
        (SELECT sum(C_Currency_Convert(AmortizationAmt, C_Currency_ID, A_Amortization.C_Currency_ID, now(), 'S', AD_Client_ID, AD_Org_ID))
        FROM A_AmortizationLine
        WHERE A_Amortization_ID=A_Amortization.A_Amortization_ID
        ),Updated=now(),UpdatedBy=v_AD_User_ID
      WHERE A_Amortization_ID=V_Record_ID;
    ELSIF(v_Posted='Y') THEN
      RAISE_APPLICATION_ERROR(-20000, '@AmortizationDocumentPosted@') ;
    END IF;
    IF(FINISH_PROCESS=false) THEN
      --Calculating Depreciated value
      v_ResultStr:='CalculatingDepreciatedValue';
      UPDATE a_asset
        SET DepreciatedValue=
        (SELECT sum(AMORTIZATIONAMT)
        FROM a_amortizationline al, a_amortization am
        WHERE a_asset.a_asset_id=al.a_asset_id
          AND al.A_Amortization_ID=am.A_Amortization_ID
          AND coalesce(am.processed, 'N')='Y'
        ),Updated=now(),UpdatedBy=v_AD_User_ID
      WHERE exists
        (SELECT 1
        FROM a_amortizationline al, a_amortization am
        WHERE a_asset.a_asset_id=al.a_asset_id
          AND al.A_Amortization_ID=am.A_Amortization_ID
          AND am.A_Amortization_ID=V_Record_ID);
      UPDATE a_asset
        SET IsFullyDepreciated='Y',Updated=now(),UpdatedBy=v_AD_User_ID
      WHERE COALESCE(AmortizationValueAmt, -1)=COALESCE(DepreciatedValue, -2) ;
    END IF;
    --<<FINISH_PROCESS>>
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Finished ' || v_Message) ;
    END IF;
    -- Commented by cromero 19102006 COMMIT;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
--  RAISE_APPLICATION_ERROR(-20100, v_ResultStr) ;
--  RETURN;
END A_AMORTIZATION_PROCESS
]]></body>
    </function>
  </database>
