<?xml version="1.0"?>
  <database name="FUNCTION MRP_WORKREQUIREMENT">
    <function name="MRP_WORKREQUIREMENT" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2008 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID VARCHAR2(32);
  v_User_ID VARCHAR2(32):='0';
  v_Client_ID VARCHAR2(32);
  v_Org_ID VARCHAR2(32);
  v_TimeHorizon NUMBER;
  v_PlanningDate DATE;
  v_SecurityMargin NUMBER;

  v_WR_ID VARCHAR2(32);
  v_DocumentNo NVARCHAR2(60);

  FINISH_PROCESS BOOLEAN DEFAULT FALSE;
  --  Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_workproposal RECORD;
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, i.AD_User_ID, i.AD_Client_ID, i.AD_Org_ID,
        p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_User_ID:=Cur_Parameter.AD_User_ID;
      v_Client_ID := Cur_Parameter.AD_Client_ID;
      v_Org_ID := Cur_Parameter.AD_Org_ID;
    END LOOP; -- Get Parameter


    FOR Cur_workproposal IN (
      SELECT MRP_RUN_PRODUCTIONLINE.* , MA_PROCESSPLAN.EXPLODEPHASES, 
      MA_PROCESSPLAN.CONVERSIONRATE, MA_PROCESSPLAN.SECONDARYUNIT,
      CEIL(MRP_RUN_PRODUCTIONLINE.qty/A.PROQTY) AS PROCESSPLANQTY, MRP_RUN_PRODUCTIONLINE.AD_ORG_ID AS ADORG_ID
      FROM MRP_RUN_PRODUCTIONLINE, MA_PROCESSPLAN, 
        (SELECT DISTINCT produced, proqty, ma_processplan_id
         FROM MA_PROCESSPLAN_TOTALIZED) A
      WHERE MRP_RUN_PRODUCTIONLINE.MA_PROCESSPLAN_ID = MA_PROCESSPLAN.MA_PROCESSPLAN_ID
        AND MA_PROCESSPLAN.MA_PROCESSPLAN_ID = A.MA_PROCESSPLAN_ID
        AND A.PRODUCED = MRP_RUN_PRODUCTIONLINE.M_PRODUCT_ID
        AND MRP_RUN_PRODUCTION_ID = v_Record_ID
        AND INOUTTRXTYPE = 'WP'
        AND MA_WORKREQUIREMENT_ID IS NULL
        AND MRP_RUN_PRODUCTIONLINE.QTY <> 0
      ORDER BY PLANNEDDATE
      ) LOOP
      v_ResultStr:='Create Work Requirement';
V_ORG_ID :=Cur_workproposal.ADORG_ID;
      Ad_Sequence_Next('MA_WorkRequirement', v_Client_ID, v_WR_ID);
      Ad_Sequence_Doc('DocumentNo_MA_WorkRequirement', v_Client_ID, 'Y', v_DocumentNo) ;
      INSERT INTO MA_WORKREQUIREMENT (
        MA_WORKREQUIREMENT_ID, AD_CLIENT_ID, AD_ORG_ID, ISACTIVE,
        CREATED, CREATEDBY, UPDATED, UPDATEDBY, NAME,
        MA_PROCESSPLAN_ID, QUANTITY,
        LAUNCHDATE, STARTDATE, ENDDATE,
        CLOSED, EXPLOTE, PROCESSED, DOCUMENTNO, EXPLODEPHASES,
        SECONDARYQTY, SECONDARYUNIT, CONVERSIONRATE
      ) VALUES (
        v_WR_ID, v_Client_ID, v_Org_ID, 'Y',
        now(), v_User_ID, now(), v_User_ID, null,
        Cur_workproposal.MA_PROCESSPLAN_ID, Cur_workproposal.PROCESSPLANQTY,
        now(), Cur_workproposal.plannedorderdate, Cur_workproposal.planneddate,
        'N', 'N', 'N', v_DocumentNo, Cur_workproposal.explodephases,
        (CASE WHEN Cur_workproposal.conversionrate IS NOT NULL THEN (Cur_workproposal.conversionrate*Cur_workproposal.PROCESSPLANQTY) ELSE null END), 
        Cur_workproposal.secondaryunit, Cur_workproposal.conversionrate
      );
      UPDATE MRP_RUN_PRODUCTIONLINE
         SET MA_WORKREQUIREMENT_ID=v_WR_ID
       WHERE MRP_RUN_PRODUCTIONLINE_ID = Cur_workproposal.MRP_RUN_PRODUCTIONLINE_ID;
    END LOOP;
  v_ResultStr :='Set requisition lines as planned';
  UPDATE M_RequisitionLine
  SET REQSTATUS = 'P'
  WHERE M_RequisitionLine_ID IN (SELECT M_RequisitionLine_ID
                                 FROM MRP_RUN_PRODUCTIONLINE
                                 WHERE MRP_RUN_PRODUCTION_ID = v_Record_ID
                                   AND INOUTTRXTYPE = 'MF');

  UPDATE M_Requisition
  SET DocStatus = 'CL'
  WHERE M_Requisition_ID IN (SELECT M_Requisition_ID
                            FROM M_RequisitionLine
                            WHERE M_RequisitionLine_ID IN (SELECT M_RequisitionLine_ID
                                                          FROM MRP_RUN_PRODUCTIONLINE
                                                          WHERE MRP_RUN_PRODUCTION_ID = v_Record_ID
                                                            AND INOUTTRXTYPE = 'MF'))
    AND NOT EXISTS (SELECT 1
                    FROM M_RequisitionLine rl
                    WHERE rl.REQSTATUS = 'O'
                      AND rl.M_Requisition_ID = M_Requisition.M_Requisition_ID);
  END; --BODY
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
--  RETURN;
END MRP_WORKREQUIREMENT
]]></body>
    </function>
  </database>
