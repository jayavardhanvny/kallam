<?xml version="1.0"?>
  <database name="FUNCTION AD_WINDOW_COPY">
    <function name="AD_WINDOW_COPY" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP  Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SLU
  * Contributions are Copyright (C) 2001-2013 Openbravo, S.L.U.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: AD_Window_Copy.sql,v 1.5 2003/02/07 05:49:59 jjanke Exp $
  ***
  * Title: Copy Window Content (i.e Tabs and Fields)
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    v_AD_Window_ID VARCHAR2(32);
    v_NextNo_T VARCHAR2(32);
    v_NextNo_F VARCHAR2(32);
    v_NoOfTabs NUMBER:=0;
    v_NoOfFields NUMBER:=0;
    v_trl_count NUMBER;
    Cur_Tabs RECORD;
    Cur_Fields RECORD;
    v_dest_ad_module_id VARCHAR2(32);
    v_dest_ad_module_lang VARCHAR(6);
    v_src_ad_module_id VARCHAR2(32);
    v_src_ad_module_lang VARCHAR(6);
    Row_Src_Field AD_Field%ROWTYPE;
    Row_Dest_Field_Trl AD_Field_Trl%ROWTYPE;

    v_field_name NVARCHAR2(60);
    v_field_desc NVARCHAR2(255);
    v_field_help NVARCHAR2(2000);
    assigned BOOLEAN;
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      IF(Cur_Parameter.ParameterName='AD_Window_ID') THEN
        v_AD_Window_ID:=Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE('  AD_Window_ID=' || v_AD_Window_ID) ;
      ELSE
        DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || Cur_Parameter.ParameterName) ;
      END IF;
    END LOOP; -- Get Parameter
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
    v_ResultStr:='GetEntityType';

    -- Get source module id
    SELECT AD_Module_ID
      INTO v_src_ad_module_id
      FROM AD_Window
     WHERE AD_Window_ID = v_AD_Window_ID;

    -- Get destination module id
    SELECT AD_Module_ID
      INTO v_dest_ad_module_id
      FROM AD_Window
     WHERE AD_Window_ID = v_Record_ID;

    -- Get module's langs 
    SELECT AD_Language INTO v_dest_ad_module_lang FROM AD_MODULE WHERE AD_Module_Id=v_dest_ad_module_id;
    SELECT AD_Language INTO v_src_ad_module_lang FROM AD_MODULE WHERE AD_Module_Id=v_src_ad_module_id;

    -- Record_ID is the Window_ID to copy to
    FOR Cur_Tabs IN
      (SELECT *  FROM AD_Tab  WHERE AD_Window_ID=v_AD_Window_ID)
    LOOP
      -- Get next no
      AD_Sequence_Next('AD_Tab', Cur_Tabs.AD_Client_ID, v_NextNo_T) ;
      -- Insert
      INSERT
      INTO AD_Tab
        (
          AD_TAB_ID, AD_Window_ID,
          AD_CLIENT_ID, AD_ORG_ID, ISACTIVE, CREATED, CREATEDBY, UPDATED, UPDATEDBY,
          NAME, DESCRIPTION, HELP, AD_TABLE_ID, TabLevel,
          SEQNO, ISSINGLEROW, ISINFOTAB, ISTRANSLATIONTAB, ISREADONLY,
          AD_COLUMN_ID, HASTREE, WHERECLAUSE, ORDERBYCLAUSE, COMMITWARNING,
          AD_PROCESS_ID, PROCESSING, AD_Module_ID,
          FilterName, UIPATTERN, HQLWHERECLAUSE,
          HQLORDERBYCLAUSE, HQLFILTERCLAUSE, SHOWPARENTBUTTONS, AD_IMAGE_ID, IMPORTFIELDS,
          AD_COLUMNSORTORDER_ID, AD_COLUMNSORTYESNO_ID, ISSORTTAB, INCLUDED_TAB_ID,
	  FILTERCLAUSE, EDITREFERENCE, DISPLAYLOGIC
        )
        select
          v_NextNo_T, v_Record_ID,
          Cur_Tabs.AD_CLIENT_ID, Cur_Tabs.AD_ORG_ID, Cur_Tabs.ISACTIVE, now(), Cur_Tabs.CREATEDBY, now(), Cur_Tabs.UPDATEDBY,
          coalesce(sub.name, Cur_Tabs.NAME), coalesce(sub.description, Cur_Tabs.DESCRIPTION), coalesce(sub.help, Cur_Tabs.HELP), Cur_Tabs.AD_TABLE_ID, Cur_Tabs.TabLevel,
          Cur_Tabs.SEQNO, Cur_Tabs.ISSINGLEROW, Cur_Tabs.ISINFOTAB, Cur_Tabs.ISTRANSLATIONTAB, Cur_Tabs.ISREADONLY,
          Cur_Tabs.AD_COLUMN_ID, Cur_Tabs.HASTREE, Cur_Tabs.WHERECLAUSE, Cur_Tabs.ORDERBYCLAUSE, Cur_Tabs.COMMITWARNING,
          Cur_Tabs.AD_PROCESS_ID, Cur_Tabs.PROCESSING, v_dest_ad_module_id, 
          coalesce(sub.filterName, Cur_Tabs.filterName), Cur_Tabs.UIPATTERN, Cur_Tabs.HQLWHERECLAUSE,
          Cur_Tabs.HQLORDERBYCLAUSE, Cur_Tabs.HQLFILTERCLAUSE, Cur_Tabs.SHOWPARENTBUTTONS, Cur_Tabs.AD_IMAGE_ID, Cur_Tabs.IMPORTFIELDS,
          Cur_Tabs.AD_COLUMNSORTORDER_ID, Cur_Tabs.AD_COLUMNSORTYESNO_ID, Cur_Tabs.ISSORTTAB, Cur_Tabs.INCLUDED_TAB_ID,
	  Cur_Tabs.FILTERCLAUSE, Cur_Tabs.EDITREFERENCE, Cur_Tabs.DISPLAYLOGIC
         FROM ad_tab s left join 
        (select * from AD_tab_trl where ad_language=v_dest_ad_module_lang and ad_tab_id=Cur_Tabs.ad_tab_id ) sub
         on sub.ad_tab_id=s.ad_tab_id where s.ad_tab_id=Cur_Tabs.ad_tab_id;
        
      --  Translate
      UPDATE AD_Tab_Trl
        SET Name=
        (SELECT coalesce((select name from AD_Tab_Trl s
        WHERE s.AD_Language=AD_Tab_Trl.AD_Language and s.AD_Tab_ID=Cur_Tabs.AD_Tab_ID), Cur_Tabs.name)
        FROM ad_tab t
         WHERE t.AD_Tab_ID=Cur_Tabs.AD_Tab_ID)
        ,
        Description=
        (SELECT coalesce((select description from AD_Tab_Trl s
        WHERE s.AD_Language=AD_Tab_Trl.AD_Language and s.AD_Tab_ID=Cur_Tabs.AD_Tab_ID), Cur_Tabs.description)
        FROM ad_tab t
         WHERE t.AD_Tab_ID=Cur_Tabs.AD_Tab_ID)
        ,
        Help=
        (SELECT coalesce((select help from AD_Tab_Trl s
        WHERE s.AD_Language=AD_Tab_Trl.AD_Language and s.AD_Tab_ID=Cur_Tabs.AD_Tab_ID), Cur_Tabs.help)
        FROM ad_tab t
         WHERE t.AD_Tab_ID=Cur_Tabs.AD_Tab_ID)
         ,
         FilterName=
         (SELECT coalesce((select FilterName from AD_Tab_Trl s
        WHERE s.AD_Language=AD_Tab_Trl.AD_Language and s.AD_Tab_ID=Cur_Tabs.AD_Tab_ID), Cur_Tabs.FilterName)
        FROM ad_tab t
         WHERE t.AD_Tab_ID=Cur_Tabs.AD_Tab_ID)
      WHERE AD_Tab_Trl.AD_Tab_ID=v_NextNo_T;
      -- Copy Fields
      FOR Cur_Fields IN
        (SELECT *  FROM AD_Field  WHERE AD_Tab_ID=Cur_Tabs.AD_Tab_ID)
      LOOP
        -- ------------------------------------------------------------------
        -- ------------------  AD_Tab_Copy has copied code ------------------
	assigned := false;
        AD_Sequence_Next('AD_Field', Cur_Fields.AD_Client_ID, v_NextNo_F) ;
      
       --- if the source and dest language are different then retrieve translatable values (name, description, etc) from an appropriate field translation (if there is such) 
        IF(v_src_ad_module_lang <> v_dest_ad_module_lang) THEN
          SELECT COUNT(*) INTO v_trl_count FROM AD_Field_Trl WHERE AD_Field_Id=Cur_Fields.AD_Field_Id AND AD_Language=v_dest_ad_module_lang;
          IF(v_trl_count =1) THEN
            SELECT * INTO Row_Dest_Field_Trl FROM AD_Field_Trl WHERE AD_Field_Id=Cur_Fields.AD_Field_Id AND AD_Language=v_dest_ad_module_lang;    
               
            v_field_name := Row_Dest_Field_Trl.Name;
            v_field_desc := Row_Dest_Field_Trl.Description;
            v_field_help := Row_Dest_Field_Trl.Help;
            assigned := true;
          END IF;
        END IF;

        IF (NOT assigned) THEN
          v_field_name := Cur_Fields.Name;
          v_field_desc := Cur_Fields.Description;
          v_field_help := Cur_Fields.Help;
        END IF;

        -- copy the field taking the translatable colums fields (name, description, etc) 
        INSERT
        INTO AD_Field 
          (
            AD_Field_ID, AD_Tab_ID, AD_Client_ID, AD_Org_ID,
            IsActive, Created, CreatedBy, Updated, UpdatedBy,
            Name, Description, Help,
            IsCentrallyMaintained, AD_Column_ID, AD_FieldGroup_ID, ISDISPLAYED,
            DISPLAYLOGIC, DISPLAYLENGTH, ISREADONLY,
            SEQNO, SORTNO, ISSAMELINE,
            ISFIELDONLY, ISENCRYPTED, AD_MODULE_ID, 
            ShowInRelation, Grid_Seqno,
            startinoddcolumn,startnewline, em_obuisel_outfield_id,
            isfirstfocusedfield, isshowninstatusbar, onchangefunction,
            em_obuiapp_colspan, em_obuiapp_rowspan, property,
	    ignoreinwad, clientclass, em_obuiapp_validator,
	    em_obuiapp_showsummary, em_obuiapp_summaryfn
          )
          VALUES
          (
            v_NextNo_F, v_NextNo_T, Cur_Fields.AD_Client_ID, Cur_Fields.AD_Org_ID,
            Cur_Fields.IsActive, now(), '0', now(), '0',
            v_field_name, v_field_desc, v_field_help,
            Cur_Fields.IsCentrallyMaintained, Cur_Fields.AD_Column_ID, Cur_Fields.AD_FieldGroup_ID, Cur_Fields.ISDISPLAYED,
            Cur_Fields.DISPLAYLOGIC, Cur_Fields.DISPLAYLENGTH, Cur_Fields.ISREADONLY,
            Cur_Fields.SEQNO, Cur_Fields.SORTNO, Cur_Fields.ISSAMELINE, 
            Cur_Fields.ISFIELDONLY, Cur_Fields.ISENCRYPTED, v_dest_ad_module_id,
            Cur_Fields.ShowInRelation, Cur_Fields.Grid_Seqno,
            Cur_Fields.Startinoddcolumn, Cur_Fields.Startnewline, Cur_Fields.EM_Obuisel_Outfield_ID,
            Cur_Fields.isFirstFocusedField, Cur_Fields.isShownInStatusBar, Cur_Fields.onchangefunction,
            Cur_Fields.em_obuiapp_colspan,Cur_Fields.em_obuiapp_rowspan, Cur_Fields.property,
	    Cur_Fields.ignoreinwad, Cur_Fields.clientclass, Cur_Fields.em_obuiapp_validator,
	    Cur_Fields.em_obuiapp_showsummary, Cur_Fields.em_obuiapp_summaryfn
            );

        -- update dest translations from source translations
        UPDATE AD_Field_Trl
          SET Name=
          (SELECT Name
          FROM AD_Field_Trl s
          WHERE s.AD_Field_ID=Cur_Fields.AD_Field_ID  AND s.AD_Language=AD_Field_Trl.AD_Language
          )
          , Description= 
          (SELECT Description
          FROM AD_Field_Trl s
          WHERE s.AD_Field_ID=Cur_Fields.AD_Field_ID  AND s.AD_Language=AD_Field_Trl.AD_Language
          )
          , Help=
          (SELECT Help
          FROM AD_Field_Trl s
          WHERE s.AD_Field_ID=Cur_Fields.AD_Field_ID  AND s.AD_Language=AD_Field_Trl.AD_Language
          )
        WHERE AD_Field_Trl.AD_Field_ID=v_NextNo_F 
          AND AD_Field_Trl.AD_Language = ANY (
              SELECT AD_Language 
              FROM AD_Field_Trl sub 
              WHERE sub.AD_Field_ID=Cur_Fields.AD_Field_ID
              );
          
        -- if source and dest langs are different then update source language translation from the source field
        IF(v_src_ad_module_lang <> v_dest_ad_module_lang) THEN
          SELECT * 
            INTO Row_Src_Field 
            FROM AD_FIELD 
            WHERE AD_Field_ID=Cur_Fields.AD_Field_ID;
          UPDATE AD_Field_Trl 
            SET Name=Row_Src_Field.Name, Description=Row_Src_Field.Description, Help = Row_Src_Field.Help
            WHERE AD_Field_ID=v_NextNo_F AND AD_Language=v_src_ad_module_lang;
        END IF;          
        v_NoOfFields:=v_NoOfFields + 1;
        -- ----------------------  End of copied code -----------------------
        -- ------------------------------------------------------------------
      END LOOP; -- Field
      v_NoOfTabs:=v_NoOfTabs + 1;
    END LOOP; -- Tab
    v_Message:='@Copied@=' || v_NoOfTabs || '/' || v_NoOfFields;
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END AD_WINDOW_COPY
]]></body>
    </function>
  </database>
