<?xml version="1.0"?>
  <database name="FUNCTION M_EXPLODEBOMNOTSTOCK">
    <function name="M_EXPLODEBOMNOTSTOCK" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_orderline_id" type="VARCHAR" mode="in">
        <default><![CDATA[null]]></default>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2013 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_explode CHAR(1);
  v_orderID VARCHAR2(32);
  v_CBPartner_ID VARCHAR2(32);
  v_PriceList_ID VARCHAR2(32);
  v_PriceList_Version_ID VARCHAR2(32);
  v_Record_ID VARCHAR2(32);
  TYPE RECORD IS REF CURSOR;
  Cur_Parameter RECORD;
  Cur_MPriceListVersion RECORD;
  CUR_BOM_Line RECORD;
  CUR_BOM RECORD;
  v_Line NUMBER:=0;
  v_ResultStr VARCHAR2(2000):='';
  v_result NUMBER:= 1;  
  BEGIN
  IF (p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
      v_ResultStr:='PInstanceNotFound';
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String,
          p.P_Number, p.P_Date
        FROM AD_PINSTANCE i
        LEFT JOIN AD_PINSTANCE_PARA p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
      END LOOP; -- Get Parameter
  ELSE
      v_Record_ID:=p_Orderline_ID;
  END IF;
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
  BEGIN --BODY
     
    SELECT C_ORDER.c_order_id, C_ORDER.c_bpartner_id, c_order.M_PriceList_ID, c_orderline.explode
      INTO v_orderID, v_CBPartner_ID, v_PriceList_ID, v_explode
    FROM C_ORDER JOIN m_pricelist ON c_order.m_pricelist_id = m_pricelist.m_pricelist_id JOIN c_orderline ON c_order.c_order_id = c_orderline.c_order_id
    WHERE c_orderline.c_orderline_id=v_Record_ID  FOR UPDATE;

    IF (v_explode = 'Y') THEN
      v_ResultStr:='@ProdExploded@';
      RAISE_APPLICATION_ERROR(-20000, '@ProdExploded@') ;
    END IF;
    
    v_ResultStr:='Exploding';

    -- Get Price List Version
    FOR Cur_MPriceListVersion IN
      (SELECT v.M_PriceList_Version_ID AS PriceList_Version_ID, o.M_PriceList_ID
       FROM M_PRICELIST_VERSION v, C_ORDER o
       WHERE v.M_PriceList_ID=o.M_PriceList_ID
         AND v.ValidFrom<=o.DateOrdered
         AND v.IsActive='Y'
         AND o.C_Order_ID=v_orderID
       ORDER BY v.ValidFrom DESC
      )
    LOOP
      v_PriceList_Version_ID:=Cur_MPriceListVersion.PriceList_Version_ID;
      EXIT;
    END LOOP;
 
    -- Replace Lines
    v_ResultStr:='Inserting lines';
    FOR CUR_BOM_Line IN
      (SELECT *
       FROM C_ORDERLINE l
       WHERE l.C_Orderline_ID=v_Record_ID
         AND IsActive='Y'
         AND EXISTS
           (SELECT *
            FROM M_PRODUCT p
            WHERE l.M_Product_ID=p.M_Product_ID
              AND p.IsBOM='Y'
              AND p.IsStocked='N'
            )
       ORDER BY l.Line  FOR UPDATE
       )
    LOOP
      v_Line:=CUR_BOM_Line.Line;
      -- Create New Lines
      FOR CUR_BOM IN
        (SELECT b.M_ProductBOM_ID, p.C_UOM_ID, b.BOMQty, b.Description
         FROM M_PRODUCT_BOM b
              INNER JOIN M_PRODUCT p ON (b.M_ProductBOM_ID=p.M_Product_ID)
         WHERE b.M_Product_ID=CUR_BOM_Line.M_Product_ID
           AND b.isactive='Y'
         ORDER BY Line
         )
      LOOP
        v_Line:=v_Line + 1;
        INSERT
        INTO C_ORDERLINE
          (
            C_OrderLine_ID, AD_Client_ID, AD_Org_ID, IsActive,
            Created, CreatedBy, Updated, UpdatedBy,
            C_Order_ID, Line, C_BPartner_ID, C_BPartner_Location_ID,
            DateOrdered, DatePromised, DateDelivered, DateInvoiced,
            Description, M_Product_ID, M_Warehouse_ID, DirectShip,
            C_UOM_ID, QtyOrdered, QtyReserved, QtyDelivered,
            QtyInvoiced, M_Shipper_ID, C_Currency_ID,
            PriceList,
            PriceActual, PriceLimit, LineNetAmt, Discount,
            FreightAmt, C_Charge_ID, ChargeAmt, C_Tax_ID,
            QuantityOrder, M_Product_Uom_ID, PriceStd,
            c_project_id, a_asset_id, c_costcenter_id,
            user1_id, user2_id, bom_parent_id
          )
        VALUES
          (
            get_uuid(), CUR_BOM_Line.AD_Client_ID, CUR_BOM_Line.AD_Org_ID, CUR_BOM_Line.IsActive,
            now(), '0', now(), '0',
            CUR_BOM_Line.C_Order_ID, v_Line, CUR_BOM_Line.C_BPartner_ID, CUR_BOM_Line.C_BPartner_Location_ID,
            CUR_BOM_Line.DateOrdered, CUR_BOM_Line.DatePromised, CUR_BOM_Line.DateDelivered, CUR_BOM_Line.DateInvoiced,
            CUR_BOM.Description, CUR_BOM.M_ProductBOM_ID, CUR_BOM_Line.M_Warehouse_ID, CUR_BOM_Line.DirectShip,
            CUR_BOM.C_UOM_ID, CUR_BOM_Line.QtyOrdered*CUR_BOM.BOMQty, CUR_BOM_Line.QtyReserved*CUR_BOM.BOMQty, CUR_BOM_Line.QtyDelivered*CUR_BOM.BOMQty,
            CUR_BOM_Line.QtyInvoiced*CUR_BOM.BOMQty, CUR_BOM_Line.M_Shipper_ID, CUR_BOM_Line.C_Currency_ID,
            M_BOM_PriceList(CUR_BOM.M_ProductBOM_ID, v_PriceList_Version_ID),
            M_Get_Offers_Price(CUR_BOM_Line.DateOrdered, v_CBPartner_ID, CUR_BOM.M_ProductBOM_ID, M_BOM_PriceStd(CUR_BOM.M_ProductBOM_ID, v_PriceList_Version_ID), CUR_BOM_Line.QtyInvoiced*CUR_BOM.BOMQty, v_PriceList_ID), M_BOM_PriceLimit(CUR_BOM.M_ProductBOM_ID, v_PriceList_Version_ID),
            M_Get_Offers_Price(CUR_BOM_Line.DateOrdered, v_CBPartner_ID, CUR_BOM.M_ProductBOM_ID, M_BOM_PriceStd(CUR_BOM.M_ProductBOM_ID, v_PriceList_Version_ID), CUR_BOM_Line.QtyInvoiced*CUR_BOM.BOMQty, v_PriceList_ID) * CUR_BOM_Line.QtyOrdered*CUR_BOM.BOMQty, CUR_BOM_Line.Discount,
            CUR_BOM_Line.FreightAmt, CUR_BOM_Line.C_Charge_ID, CUR_BOM_Line.ChargeAmt, CUR_BOM_Line.C_Tax_ID,
            CUR_BOM_Line.QuantityOrder, CUR_BOM_Line.M_Product_UOM_ID, M_BOM_PriceStd(CUR_BOM.M_ProductBOM_ID, v_PriceList_Version_ID),
            CUR_BOM_Line.c_project_id, CUR_BOM_Line.a_asset_id, CUR_BOM_Line.c_costcenter_id,
            CUR_BOM_Line.user1_id, CUR_BOM_Line.user2_id, v_Record_ID
          );
      END LOOP; -- Create New Lines
    END LOOP; -- Replace Lines
    UPDATE c_orderline set explode='Y' where c_orderline_id = v_Record_ID;
    
    IF (p_PInstance_ID IS NOT NULL) THEN
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ');
      AD_UPDATE_PINSTANCE(p_pinstance_id, NULL, 'N', v_result, '');
    END IF;
   
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
 v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  IF(p_PInstance_ID IS NOT NULL) THEN
    ROLLBACK;
    AD_UPDATE_PINSTANCE(p_pinstance_id, NULL, 'N', 0, v_resultstr);
   END IF;
END M_EXPLODEBOMNOTSTOCK
]]></body>
    </function>
  </database>
