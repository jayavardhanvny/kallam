<?xml version="1.0"?>
  <database name="FUNCTION FACT_ACCT_RESET">
    <function name="FACT_ACCT_RESET" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SLU
  * Contributions are Copyright (C) 2001-2010 Openbravo, S.L.U.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: Fact_Acct_Reset.sql,v 1.4 2003/01/27 06:22:11 jjanke Exp $
  ***
  * Title: Reset Posting Records
  * Description:
  *   Delete Records in Fact_Acct or
  *   Reset Posted
  *   for AD_Client_ID and AD_Table_ID
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID VARCHAR2(32);
  v_AD_User_ID VARCHAR2(32);
  v_DateColumn VARCHAR2(2000):='';
  v_AD_Org_ID VARCHAR2(32);
  v_TableName VARCHAR2(48):='';
  v_AD_Org_CalOwner VARCHAR(32);
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    v_AD_Client_ID VARCHAR2(32) ;
    v_AD_Table_ID VARCHAR2(32) ;
    v_DeletePosting VARCHAR(1):='N';
    --
    v_Updated NUMBER(10):=0;
    v_Deleted NUMBER(10):=0;
    v_Cmd VARCHAR2(2000):='';
    v_rowcount NUMBER;

    v_factAcctCounter NUMBER:= 0;
    c_commitInterval NUMBER:= 1000;

    v_count NUMBER;
    v_DocAction VARCHAR2(60);
    v_UpdatedBy AD_PINSTANCE.UpdatedBy%TYPE;
    v_DeleteFact varchar2(1):='Y';
    
    v_isacctle AD_OrgType.IsAcctLegalEntity%TYPE:='N';    
 BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PINSTANCE i
      LEFT JOIN AD_PINSTANCE_PARA p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
      IF(Cur_Parameter.ParameterName='AD_Client_ID') THEN
        v_AD_Client_ID:=Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE('  AD_Client_ID=' || v_AD_Client_ID) ;
      ELSIF(Cur_Parameter.ParameterName='AD_Table_ID') THEN
        v_AD_Table_ID:=Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE('  AD_Table_ID=' || v_AD_Table_ID) ;
      ELSIF(Cur_Parameter.ParameterName='DeletePosting') THEN
        v_DeletePosting:=Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE('  DeletePosting=' || v_DeletePosting) ;
      ELSIF(Cur_Parameter.ParameterName='AD_Org_ID') THEN
        v_AD_Org_ID:=Cur_Parameter.P_String;
        IF (v_AD_Org_ID IS NULL) THEN
          v_AD_Org_ID:='0';
        END IF;
        DBMS_OUTPUT.PUT_LINE('  AD_ORG_ID=' || v_AD_Org_ID) ;
      ELSE
        DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || Cur_Parameter.ParameterName) ;
      END IF;
    END LOOP; -- Get Parameter

    -- Get AD_Org_ID from the document header (useful when the process is executed from a document)
    IF (v_AD_Table_ID IS NOT NULL AND v_Record_ID IS NOT NULL) THEN
        SELECT TableName
        INTO v_TableName
        FROM AD_Table
        WHERE AD_Table_ID=v_AD_Table_ID;
        IF (v_Record_ID!='0') THEN
         EXECUTE IMMEDIATE
          'SELECT AD_Org_ID
          FROM ' ||  v_TableName || '
          WHERE ' || v_TableName || '_ID =''' || v_Record_ID || ''' AND AD_CLIENT_ID =''' || v_AD_Client_ID || ''' '
          INTO v_AD_Org_ID;
        END IF;
        
        -- Check the period control is opened (only if it is legal entity with accounting)
        SELECT COALESCE(t.ISACCTLEGALENTITY, 'N')
        INTO v_isacctle
        FROM AD_Org o JOIN AD_OrgType t ON (o.ad_orgtype_id=t.ad_orgtype_id) 
        WHERE AD_IsOrgIncluded(v_AD_Org_ID, o.ad_org_id , v_AD_Client_ID) <> -1
        AND t.ISACCTLEGALENTITY='Y';
        IF (v_isacctle='Y') THEN
          DECLARE
          v_available_period NUMBER:=0;
          TYPE RECORD IS REF CURSOR;
            Cur_Fact_Records RECORD;
          BEGIN
            FOR Cur_Fact_Records IN
              (SELECT DATEACCT, DOCBASETYPE, C_DOCTYPE_ID, C_PERIOD_ID
               FROM FACT_ACCT
               WHERE AD_TABLE_ID=v_AD_Table_ID
               AND Record_ID = v_Record_ID
              )
            LOOP
              IF(Cur_Fact_Records.DOCBASETYPE = 'GLJ') THEN 
								v_available_period:=C_CHK_OPEN_PERIOD_GLJ(v_AD_Org_ID, Cur_Fact_Records.C_PERIOD_ID);
              ELSE
              	v_available_period:=C_CHK_OPEN_PERIOD(v_AD_Org_ID, Cur_Fact_Records.DATEACCT, Cur_Fact_Records.DOCBASETYPE, Cur_Fact_Records.C_DOCTYPE_ID);
              END IF;
              IF (v_available_period<>1) THEN
                RAISE_APPLICATION_ERROR(-20000, '@PeriodClosedForUnPosting@');
              END IF;
            END LOOP;
           END; 
        END IF;
    END IF;

    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
   -- Fact_Acct_Rest - Start_Process Extension Point
   SELECT count(*) INTO v_count
   FROM DUAL
   where exists (select 1 from ad_ep_procedures where ad_extension_points_id = 'E1F9635815BF4A44B88E3EAADBD0D10E');
   IF (v_count=1) THEN
     DECLARE
       v_ep_instance VARCHAR(32);
       v_extension_point_id VARCHAR(32) := 'E1F9635815BF4A44B88E3EAADBD0D10E';

     BEGIN
       v_ep_instance := get_uuid();
       AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'Record_ID',
         v_Record_ID, NULL, NULL, NULL, NULL, NULL, NULL);
       AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'AD_Table_ID',
         v_AD_Table_ID, NULL, NULL, NULL, NULL, NULL, NULL);
       AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'AD_Client_ID',
         v_AD_Client_ID, NULL, NULL, NULL, NULL, NULL, NULL);
       AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'DeleteFact',
         v_DeleteFact, NULL, NULL, NULL, NULL, NULL, NULL);
       AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'User',
         v_UpdatedBy, NULL, NULL, NULL, NULL, NULL, NULL);
       AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'Message',
         NULL, NULL, NULL, NULL, NULL, NULL, v_Message);
       AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'Result',
         NULL, NULL, v_result, NULL, NULL, NULL, NULL);
       AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'PInstance_ID',
         p_pinstance_id, NULL, NULL, NULL, NULL, NULL, NULL);
       AD_EXTENSION_POINT_HANDLER(v_ep_instance, v_extension_point_id);
       SELECT p_number INTO v_Result
       FROM ad_ep_instance_para
       WHERE ad_ep_instance_id = v_ep_instance
         AND parametername LIKE 'Result';
       SELECT p_text INTO v_Message
       FROM ad_ep_instance_para
       WHERE ad_ep_instance_id = v_ep_instance
         AND parametername LIKE 'Message';
       SELECT p_string INTO v_DeleteFact
       FROM ad_ep_instance_para
       WHERE ad_ep_instance_id = v_ep_instance
         AND parametername LIKE 'DeleteFact';
       DELETE FROM ad_ep_instance_para
       WHERE ad_ep_instance_id = v_ep_instance;
      END;
   END IF;
   -- Fact_Acct_Rest - Finish_Process Extension Point
    DECLARE
    TYPE RECORD IS REF CURSOR;
      Cur_Clients RECORD;
      Cur_Tables RECORD;
      Cur_Fact_Acct RECORD;
    BEGIN
      FOR Cur_Clients IN
        (SELECT AD_Client_ID
        FROM AD_CLIENT
        WHERE(v_AD_Client_ID IS NULL
          OR AD_Client_ID=v_AD_Client_ID)
          AND AD_Client_ID<>'0'
        )
      LOOP
        FOR Cur_Tables IN
          (SELECT DISTINCT t.AD_Table_ID,
            t.TableName,
            C_DOCTYPE.DOCBASETYPE
          FROM AD_TABLE t,
            C_DOCTYPE
          WHERE t.AD_TABLE_ID=C_DOCTYPE.AD_TABLE_ID
            AND(v_AD_Table_ID IS NULL
            OR t.AD_Table_ID=v_AD_Table_ID)
            AND EXISTS
            (SELECT *
            FROM AD_COLUMN c
            WHERE t.AD_Table_ID=c.AD_Table_ID
              AND c.ColumnName='Posted'
            )
            AND EXISTS
            (SELECT *
            FROM AD_COLUMN c
            WHERE t.AD_Table_ID=c.AD_Table_ID
              AND c.ColumnName='Processing'
            )
            AND t.IsView='N'
          )
        LOOP
          DBMS_OUTPUT.PUT_LINE('AD_Client_ID=' || Cur_Clients.AD_Client_ID || ', AD_Table_ID=' || Cur_Tables.AD_Table_ID || ' ' || Cur_Tables.TableName) ;
          -- Update Table
          v_ResultStr:='ResetTable:' || Cur_Tables.TableName;
           IF(v_DeletePosting='Y') THEN
            v_AD_Org_CalOwner := AD_ORG_GETCALENDAROWNER(v_AD_Org_ID);
            FOR Cur_Fact_Acct IN (
              SELECT DISTINCT Record_ID
              FROM FACT_ACCT
              WHERE AD_TABLE_ID=Cur_Tables.AD_Table_ID
              AND AD_ISORGINCLUDED(FACT_ACCT.ad_org_id, v_AD_Org_ID, FACT_ACCT.ad_client_id)<>-1
                AND NOT EXISTS
                    (SELECT 1
                    FROM C_YEAR, C_PERIOD, C_PERIODCONTROL, AD_Org, (SELECT fa.DATEACCT, fa.DOCBASETYPE, fa.ad_client_id, fa.record_id
									FROM FACT_ACCT fa 
									WHERE fa.ad_table_id = Cur_Tables.AD_Table_ID) fa_aux
                    WHERE C_YEAR.c_year_id=C_PERIOD.c_year_id
                      AND C_PERIOD.c_period_id=C_PERIODCONTROL.c_period_id
                      AND C_YEAR.c_calendar_id=AD_Org.c_calendar_id
                      AND AD_Org.ad_client_id=fa_aux.AD_CLIENT_ID
                      AND C_PERIODCONTROL.docbasetype=fa_aux.DOCBASETYPE
                      AND C_PERIODCONTROL.periodstatus<>'O'
                      AND ((fa_aux.DATEACCT>=C_PERIOD.StartDate AND fa_aux.DATEACCT<C_PERIOD.EndDate + 1 AND fa_aux.DOCBASETYPE <> 'GLJ') 
                      		OR (fa_aux.DOCBASETYPE = 'GLJ' AND C_PERIOD.C_PERIOD_ID = FACT_ACCT.C_PERIOD_ID))
                      AND C_PeriodControl.AD_Org_ID=AD_Org.AD_Org_ID
                      AND C_PeriodControl.AD_Org_ID=v_AD_Org_CalOwner
                      AND fa_aux.record_id = FACT_ACCT.RECORD_ID
                    )
                AND Record_ID=(
                      CASE COALESCE(v_Record_ID, '0') WHEN '0' THEN Record_ID ELSE v_Record_ID
                      END)
                AND AD_Client_ID = Cur_Clients.AD_Client_ID
              ) LOOP
           IF (v_DeleteFact='Y') THEN
              IF(Cur_Tables.AD_Table_ID IN('472', '473')) THEN
                v_DateColumn:='DATETRX';
              ELSIF(Cur_Tables.AD_Table_ID IN('392')) THEN
                v_DateColumn:='STATEMENTDATE';
              ELSIF(Cur_Tables.AD_Table_ID IN('321', '323', '325')) THEN
                v_DateColumn:='MOVEMENTDATE';
              ELSE
                v_DateColumn:='DATEACCT';
              END IF;
              v_Cmd:='UPDATE ' || Cur_Tables.TableName  || ' SET Posted=''N'', Processing=''N'' WHERE AD_Client_ID='''  || Cur_Clients.AD_Client_ID
        || ''' AND (Posted<>''N'' OR Posted IS NULL OR Processing<>''N'' OR Processing IS NULL) AND '   ||
        Cur_Tables.TableName||'_ID = '''||Cur_Fact_Acct.Record_ID||'''';
              -- DBMS_OUTPUT.PUT_LINE('  executing: ' || v_Cmd);
              EXECUTE IMMEDIATE v_Cmd;
              v_rowcount:=SQL%ROWCOUNT;
              v_Updated:=v_Updated + v_rowcount;
              DBMS_OUTPUT.PUT_LINE('  updated=' || v_rowcount) ;
              -- Delete Fact
              v_ResultStr:='DeleteFact';
        DELETE --Deleting complete entries related to the document
           FROM FACT_ACCT_CFS
           WHERE FACT_ACCT_CFS_ID IN (
		        SELECT FACT_ACCT_CFS_ID
		        FROM FACT_ACCT_CFS CFS1
		        INNER JOIN FACT_ACCT ON
			             FACT_ACCT.FACT_ACCT_ID = CFS1.FACT_ACCT_REF_ID
			             AND AD_TABLE_ID=Cur_Tables.AD_Table_ID
                         AND Record_ID=Cur_Fact_Acct.Record_ID
                         AND FACT_ACCT.AD_Client_ID = Cur_Clients.AD_Client_ID
	        );
	    SELECT count(DISTINCT FACT_ACCT_GROUP_ID)
	    INTO v_rowcount
	    FROM FACT_ACCT
              WHERE AD_TABLE_ID=Cur_Tables.AD_Table_ID
                AND Record_ID=Cur_Fact_Acct.Record_ID
                AND AD_Client_ID = Cur_Clients.AD_Client_ID;
            DELETE
              FROM FACT_ACCT
              WHERE AD_TABLE_ID=Cur_Tables.AD_Table_ID
                AND Record_ID=Cur_Fact_Acct.Record_ID
                AND AD_Client_ID = Cur_Clients.AD_Client_ID;

              -- GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
              v_Deleted:=v_Deleted + v_rowcount;
              DBMS_OUTPUT.PUT_LINE('  deleted=' || v_rowcount) ;

              v_factAcctCounter := v_factAcctCounter +1;
              if (mod(v_factAcctCounter, c_commitInterval) = 0) then
                COMMIT;
              end if;
	END IF;
        END LOOP;
        v_Cmd:='UPDATE ' || Cur_Tables.TableName  || ' SET Posted=''N'', Processing=''N'' WHERE AD_Client_ID='''  || Cur_Clients.AD_Client_ID
        || ''' AND (Posted=''Y'' OR Processing<>''N'' OR Processing IS NULL) AND NOT EXISTS (SELECT 1 FROM FACT_ACCT WHERE AD_TABLE_ID =''' || Cur_Tables.AD_Table_ID ||
        ''' AND RECORD_ID = ''' || Cur_Tables.TableName || '_ID'' AND AD_CLIENT_ID =''' || Cur_Clients.AD_Client_ID || ''') AND ('
        || Cur_Tables.TableName || '_ID = ''' || v_Record_ID || ''' OR ''' || UPPER(v_Record_ID) ||''' = ''0'')';
            -- DBMS_OUTPUT.PUT_LINE('  executing: ' || v_Cmd);
            EXECUTE IMMEDIATE v_Cmd;
            v_rowcount:=SQL%ROWCOUNT;
            v_Updated:=v_Updated + v_rowcount;
            DBMS_OUTPUT.PUT_LINE('  updated=' || v_rowcount) ;
          ELSE
            v_Cmd:='UPDATE ' || Cur_Tables.TableName  || ' SET Processing=''N'' WHERE AD_Client_ID='''  || Cur_Clients.AD_Client_ID  || ''' AND Processing<>''N'' OR Processing IS NULL';
            EXECUTE IMMEDIATE v_Cmd;
            v_rowcount:=SQL%ROWCOUNT;
            v_Updated:=v_Updated + v_rowcount;
            DBMS_OUTPUT.PUT_LINE('  unlocked=' || v_rowcount) ;
            v_Cmd:='UPDATE ' || Cur_Tables.TableName  || ' SET Posted=''N'' WHERE AD_Client_ID='''  || Cur_Clients.AD_Client_ID  || ''' AND Posted NOT IN (''Y'',''N'') AND Processed=''Y''';
            EXECUTE IMMEDIATE v_Cmd;
            v_rowcount:=SQL%ROWCOUNT;
            v_Updated:=v_Updated + v_rowcount;
            DBMS_OUTPUT.PUT_LINE('  updated=' || v_rowcount) ;
          END IF;
        END LOOP;
      END LOOP;
    END;
    -- Summary info
    --v_Message:='@Updated@ = ' || v_Updated || ', @Deleted@ = ' || v_Deleted;
    IF(v_DeletePosting='Y') THEN
      v_Message:='@UnpostedDocuments@ = ' || v_Updated || ', @DeletedEntries@ = ' || v_Deleted;
    ELSE
      v_Message:='@UpdatedDocuments@ = ' || v_Updated;
    END IF;
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END FACT_ACCT_RESET
]]></body>
    </function>
  </database>
