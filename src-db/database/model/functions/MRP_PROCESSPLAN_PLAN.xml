<?xml version="1.0"?>
  <database name="FUNCTION MRP_PROCESSPLAN_PLAN">
    <function name="MRP_PROCESSPLAN_PLAN" type="NULL">
      <parameter name="p_user_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_run_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_product_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_timehorizon" type="NUMERIC" mode="in">
        <default/>
      </parameter>
      <parameter name="p_planningdate" type="TIMESTAMP" mode="in">
        <default/>
      </parameter>
      <parameter name="p_securitymargin" type="NUMERIC" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2006 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure

  v_Stock NUMBER:= 0;
  v_AvailableStock NUMBER:= 0;
  v_Qty_New NUMBER;
  v_NeededQty_New NUMBER;
  v_PlannedOrderDate_New DATE;

  FINISH_PROCESS BOOLEAN DEFAULT FALSE;
  --  Parameter
  TYPE RECORD IS REF CURSOR;
  Cur_Lines RECORD;
BEGIN
  BEGIN --BODY
    FOR Cur_Lines IN (
      SELECT pl.*,par.qty AS demandqty,
        COALESCE(M_PRODUCT_ORG.CAPACITY, M_PRODUCT.CAPACITY) AS CAPACITY,
        COALESCE(M_PRODUCT_ORG.DELAYMIN, M_PRODUCT.DELAYMIN, 0) AS DELAYMIN,
        COALESCE(M_PRODUCT_ORG.QTYTYPE, M_PRODUCT.QTYTYPE, 'E') AS qtytype,
        COALESCE(M_PRODUCT_ORG.QTYMIN, M_PRODUCT.QTYMIN, 0) AS qtymin,
        COALESCE(M_PRODUCT_ORG.QTYSTD, M_PRODUCT.QTYSTD, 1) AS qtystd,
        (CASE WHEN pl.INOUTTRXTYPE IN ('ST', 'MS') THEN 0
              WHEN (pl.ISFIXED = 'Y' AND pl.QTY >= 0) THEN 1
              WHEN (pl.ISFIXED = 'N' AND pl.QTY >= 0) THEN 2
              ELSE 3 END) AS PRIORITY
      FROM
        M_PRODUCT INNER JOIN MRP_RUN_PRODUCTIONLINE pl ON pl.M_PRODUCT_ID = M_PRODUCT.M_PRODUCT_ID
                                                      AND pl.M_PRODUCT_ID = p_Product_ID
                                                      AND pl.MRP_RUN_PRODUCTION_ID = p_Run_ID
                  LEFT JOIN M_PRODUCT_ORG ON M_PRODUCT.M_PRODUCT_ID = M_PRODUCT_ORG.M_PRODUCT_ID
                                          AND pl.AD_ORG_ID = M_PRODUCT_ORG.AD_ORG_ID
                  LEFT JOIN MRP_RUN_PRODUCTIONLINE par ON pl.PARENT_ID = par.MRP_RUN_PRODUCTIONLINE_ID
      ORDER BY pl.planneddate, priority
      ) LOOP

      v_Qty_New := Cur_Lines.qty;
      IF (Cur_Lines.ISFIXED = 'N' AND v_Qty_New > 0) THEN

        v_neededQty_New := Cur_Lines.qty - v_AvailableStock;
        IF (v_neededQty_New > 0) THEN
          v_Qty_New := GREATEST(v_neededqty_New, Cur_Lines.qtymin);
          IF (Cur_Lines.qtytype = 'M') THEN --Multiple lot qty
            v_Qty_new := CEIL(v_qty_new/Cur_Lines.qtystd)*Cur_Lines.qtystd;
          END IF;
        ELSE
          v_qty_new := 0;
          v_neededQty_New := 0;
        END IF;

        v_plannedorderdate_new := Cur_Lines.planneddate -
                                  (COALESCE(Cur_Lines.DELAYMIN, 0) +
                                  (CASE WHEN Cur_Lines.CAPACITY IS NULL THEN 0
                                        ELSE CEIL(v_Qty_new/Cur_Lines.CAPACITY)
                                        END));

        UPDATE MRP_RUN_PRODUCTIONLINE
        SET qty = v_qty_new,
            neededqty = v_neededqty_new,
            plannedorderdate = v_plannedorderdate_new
        WHERE MRP_RUN_PRODUCTIONLINE_ID = Cur_Lines.MRP_RUN_PRODUCTIONLINE_ID;

        IF (Cur_Lines.qty <> v_qty_new
            OR Cur_Lines.plannedorderdate <> v_plannedorderdate_new) THEN
          MRP_PROCESSPLAN_RECALCULATE(p_User_ID, Cur_Lines.MRP_Run_ProductionLine_ID, p_TimeHorizon,
                                    p_PlanningDate, p_SecurityMargin);
        END IF;
      END IF;
      v_Stock := v_Stock + v_Qty_New;
      IF (Cur_Lines.INOUTTRXTYPE IN ('ST') OR Cur_Lines.qty >=0) THEN
        v_availablestock := v_AvailableStock + v_qty_new + COALESCE(Cur_Lines.demandqty, 0);
      END IF;
      UPDATE MRP_RUN_PRODUCTIONLINE
        SET isplanned = 'Y',
            cumqty = v_Stock
        WHERE MRP_RUN_PRODUCTIONLINE_ID = Cur_Lines.MRP_RUN_PRODUCTIONLINE_ID;
    END LOOP;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('MRP_PROCESSPLAN_PLAN exception: ' || v_ResultStr);
  RAISE;
--  RETURN;
END MRP_PROCESSPLAN_PLAN
]]></body>
    </function>
  </database>
