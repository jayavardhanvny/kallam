<?xml version="1.0"?>
  <database name="FUNCTION AD_GET_PREFERENCE_VALUE">
    <function name="AD_GET_PREFERENCE_VALUE" type="NVARCHAR">
      <parameter name="p_property_name" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_isproeprtylist" type="CHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_ad_client_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_ad_org_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_ad_user_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_ad_role_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_ad_window_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2010 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_ad_client_id varchar2(32);
  v_ad_org_id varchar2(32);
  depth1 NUMBER;
  depth2 NUMBER;
  valueAssigned boolean := false;
  
  TYPE RECORD IS REF CURSOR;
    cur RECORD;
    
  selPref ad_preference%ROWTYPE;
  
  v_continue boolean;
BEGIN

  if p_ad_client_id is null then
    v_ad_client_id := '0';
  else
    v_ad_client_id := p_ad_client_id;
  end if;
  
  if p_ad_org_id is null then
    v_ad_org_id := '0';
  else
    v_ad_org_id := p_ad_org_id;
  end if;
  
  
  for cur in 
       (select *
          from ad_preference 
         where ((p_isProeprtyList = 'Y' and property = p_property_name)
               or ((p_isProeprtyList = 'N' and attribute = p_property_name)))
           and (visibleat_client_id = v_ad_client_id
                or coalesce(visibleat_client_id, '0') = '0')
           and (visibleat_role_id = p_ad_role_id
                or visibleat_role_id is null)
           and (ad_isorgincluded(v_ad_org_id, visibleAt_Org_id, v_ad_client_id) != -1
                or coalesce(visibleat_org_id, '0') = '0')
           and (ad_user_id = p_ad_user_id 
                or ad_user_id is null)
           and (ad_window_id = p_ad_window_id
                or aD_window_id is null)
           ) loop
     v_continue := false;
     if (not valueAssigned) then
       selPref := cur;
       valueAssigned := true;
       v_continue := true;
     end if;
     
     --check org priority
     if ((not v_continue) and selPref.AD_Org_ID is not null and cur.AD_Org_ID is null) then
       v_continue :=true;
     end if;
     
     if ((not v_continue) and selPref.AD_Org_ID is null and cur.AD_Org_ID is not null) then
       selPref := cur;
        v_continue :=true;
     end if;
     
     if ((not v_continue) and selPref.AD_Org_ID is not null and cur.AD_Org_ID is not null) then
       depth1 := ad_isorgincluded(v_ad_org_id, coalesce(selPref.visibleAt_Org_id,'0'), v_ad_client_id);
       depth2 := ad_isorgincluded(v_ad_org_id, coalesce(cur.visibleAt_Org_id,'0'), v_ad_client_id);
       if (depth1<depth2) then
         v_continue := true;
       elsif (depth1>depth2) then
         selPref := cur;
         v_continue := true;
       end if;
     end if;
     
     --check user priority
     if ((not v_continue) and selPref.AD_User_ID is not null and cur.AD_User_ID is null) then
       v_continue := true;
     end if;
     
     if ((not v_continue) and selPref.AD_User_ID is null and cur.AD_User_ID is not null) then
       selPref := cur;
       v_continue := true;
     end if;
     
     --check role priority
     if ((not v_continue) and selPref.visibleAt_Role_ID is not null and cur.visibleAt_Role_ID is null) then
       v_continue := true;
     end if;
     
     if ((not v_continue) and selPref.visibleAt_Role_ID is null and cur.visibleAt_Role_ID is not null) then
       selPref := cur;
       v_continue := true;
     end if;
     
     --check window priority
      if ((not v_continue) and selPref.AD_Window_ID is not null and cur.AD_Window_ID is null) then
       v_continue := true;
     end if;
     
     if ((not v_continue) and selPref.AD_Window_ID is null and cur.AD_Window_ID is not null) then
       selPref := cur;
       v_continue := true;
     end if;
     
     --Same priority, check selected
     if ((not v_continue) and selPref.selected ='Y' and cur.selected ='N') then
       v_continue := true;
     end if;
     
     if ((not v_continue) and selPref.selected ='N' and cur.selected ='Y') then
       selPref := cur;
       v_continue := true;
     end if;
     
     --Conflict, check same value
     if ((not v_continue) and selPref.value = cur.value) then
       v_continue := true;
     end if;
     
     if (not v_continue) then
       --Actual conflict, raise error
       RAISE_APPLICATION_ERROR(-20000, p_PROPERTY_NAME||' @PropertyConflict@');
     end if;
   end loop;
   
   if (not valueAssigned) then
     RAISE_APPLICATION_ERROR(-20000, p_PROPERTY_NAME||' @PropertyNotFound@');
   end if;
   
   return selPref.value;
END AD_GET_PREFERENCE_VALUE
]]></body>
    </function>
  </database>
