<?xml version="1.0"?>
  <database name="FUNCTION M_INVENTORY_LISTUPDATE">
    <function name="M_INVENTORY_LISTUPDATE" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SLU
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.U.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: M_Inventory_ListUpdate.sql,v 1.3 2003/03/14 06:11:21 jjanke Exp $
  ***
  * Title: Update Physical Inventory Count
  * Description:
  * - from M_Storage.QtyOnHand
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  v_Result NUMBER:=0; -- failure
  v_InProcess CHAR(1) ;
  v_Done CHAR(1) ;
  v_User_ID VARCHAR2(32);
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    END_PROCESS BOOLEAN:=false;
    rowcount NUMBER;
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing') ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date,
        i.Ad_User_Id
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_User_ID:=Cur_Parameter.Ad_User_Id;
    END LOOP; -- Get Parameter
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
    v_ResultStr:='ReadingInventory';
  BEGIN
    SELECT Processing,
      Processed
    INTO v_InProcess,
      v_Done
    FROM M_Inventory
    WHERE M_Inventory_ID=v_Record_ID  FOR UPDATE;
  EXCEPTION
  WHEN OTHERS THEN
    v_Message:='@SaveErrorRowNotFound@';
    END_PROCESS:=true;
  END;
  IF(NOT END_PROCESS) THEN
    IF(v_InProcess='Y') THEN
      v_Message:='@OtherProcessActive@';
      END_PROCESS:=true;
    END IF;
  END IF;--END_PROCESS
  IF(NOT END_PROCESS) THEN
    IF(v_Done='Y') THEN
      v_Message:='@AlreadyPosted@';
      END_PROCESS:=true;
    END IF;
  END IF;--END_PROCESS
  /**
  * Update
  */
  IF(NOT END_PROCESS) THEN
    v_ResultStr:='UpdatingLine';
    UPDATE M_InventoryLine
      SET QtyBook=
      (SELECT QtyOnHand
      FROM M_Storage_Detail s
      WHERE s.M_Product_ID=M_InventoryLine.M_Product_ID
        AND s.M_Locator_ID=M_InventoryLine.M_Locator_ID
        AND COALESCE(s.M_ATTRIBUTESETINSTANCE_ID, '-1')=COALESCE(M_InventoryLine.M_ATTRIBUTESETINSTANCE_ID, '-1')
        AND s.C_UOM_ID=M_InventoryLine.C_UOM_ID
        AND COALESCE(s.M_Product_UOM_ID, '-1')=COALESCE(M_InventoryLine.M_Product_UOM_ID, '-1')
      )
      ,
      QtyCount=
      (SELECT QtyOnHand
      FROM M_Storage_Detail s
      WHERE s.M_Product_ID=M_InventoryLine.M_Product_ID
        AND s.M_Locator_ID=M_InventoryLine.M_Locator_ID
        AND COALESCE(s.M_ATTRIBUTESETINSTANCE_ID, '-1')=COALESCE(M_InventoryLine.M_ATTRIBUTESETINSTANCE_ID, '-1')
        AND s.C_UOM_ID=M_InventoryLine.C_UOM_ID
        AND COALESCE(s.M_Product_UOM_ID, '-1')=COALESCE(M_InventoryLine.M_Product_UOM_ID, '-1')
      )
      ,
      QuantityOrder=
      (SELECT QtyOrderOnHand
      FROM M_Storage_Detail s
      WHERE s.M_Product_ID=M_InventoryLine.M_Product_ID
        AND s.M_Locator_ID=M_InventoryLine.M_Locator_ID
        AND COALESCE(s.M_ATTRIBUTESETINSTANCE_ID, '-1')=COALESCE(M_InventoryLine.M_ATTRIBUTESETINSTANCE_ID, '-1')
        AND s.C_UOM_ID=M_InventoryLine.C_UOM_ID
        AND COALESCE(s.M_Product_UOM_ID, '-1')=COALESCE(M_InventoryLine.M_Product_UOM_ID, '-1')
      )
      ,
      QuantityOrderBook=
      (SELECT QtyOrderOnHand
      FROM M_Storage_Detail s
      WHERE s.M_Product_ID=M_InventoryLine.M_Product_ID
        AND s.M_Locator_ID=M_InventoryLine.M_Locator_ID
        AND COALESCE(s.M_ATTRIBUTESETINSTANCE_ID, '-1')=COALESCE(M_InventoryLine.M_ATTRIBUTESETINSTANCE_ID, '-1')
        AND s.C_UOM_ID=M_InventoryLine.C_UOM_ID
        AND COALESCE(s.M_Product_UOM_ID, '-1')=COALESCE(M_InventoryLine.M_Product_UOM_ID, '-1')
      )
      ,
      Updated=now(),
      UpdatedBy=v_User_ID
    WHERE M_Inventory_ID=v_Record_ID
      AND EXISTS
      (SELECT *
      FROM M_Storage_Detail s
      WHERE s.M_Product_ID=M_InventoryLine.M_Product_ID
        AND s.M_Locator_ID=M_InventoryLine.M_Locator_ID
        AND COALESCE(s.M_ATTRIBUTESETINSTANCE_ID, '-1')=COALESCE(M_InventoryLine.M_ATTRIBUTESETINSTANCE_ID, '-1')
        AND s.C_UOM_ID=M_InventoryLine.C_UOM_ID
        AND COALESCE(s.M_Product_UOM_ID, '-1')=COALESCE(M_InventoryLine.M_Product_UOM_ID, '-1')
      )
      ;
    rowcount:=SQL%ROWCOUNT;
    v_Message:='@Updated@=' || rowcount;
    -- Commented by cromero 19102006 COMMIT;
    -- Check for products in multiple lines
    UPDATE M_InventoryLine
      SET IsActive='N',Updated=now(),
      UpdatedBy=v_User_ID
    WHERE M_Inventory_ID=v_Record_ID
      AND(M_Product_ID,
      M_Locator_ID,
      M_AttributeSetInstance_ID,
      M_Product_UOM_ID,
      c_UOM_ID) IN
      (SELECT M_Product_ID,
        M_Locator_ID,
        M_AttributeSetInstance_ID,
        M_Product_UOM_ID,
        c_UOM_ID
      FROM M_InventoryLine
      WHERE M_Inventory_ID=v_Record_ID
      GROUP BY M_Product_ID,
        M_Locator_ID,
        M_AttributeSetInstance_ID,
        M_Product_UOM_ID,
        c_UOM_ID
      HAVING COUNT(*)>1
      )
      ;
    rowcount:=SQL%ROWCOUNT;
    IF(rowcount<>0) THEN
      v_Message:=v_Message || ' @InventoryProductMultiple@';
    END IF;
    -- Commented by cromero 19102006 COMMIT;
    v_Result:=1; -- success
  END IF;--END_PROCESS
  --<<END_PROCESS>>
  --  Update AD_PInstance
  DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished') ;
  DBMS_OUTPUT.PUT_LINE(v_Message) ;
  AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', v_Result, v_Message) ;
  RETURN;
END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END M_INVENTORY_LISTUPDATE
]]></body>
    </function>
  </database>
