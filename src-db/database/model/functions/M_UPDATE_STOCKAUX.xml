<?xml version="1.0"?>
  <database name="FUNCTION M_UPDATE_STOCKAUX">
    <function name="M_UPDATE_STOCKAUX" type="NULL">
      <parameter name="p_client" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_org" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_user" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_product" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_locator" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_attributesetinstance" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_uom" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_product_uom" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_qty" type="NUMERIC" mode="in">
        <default/>
      </parameter>
      <parameter name="p_qtyorder" type="NUMERIC" mode="in">
        <default/>
      </parameter>
      <parameter name="p_aux_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_table_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_line" type="NUMERIC" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2011 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/

  v_count NUMBER;
  v_StorageAux_ID VARCHAR2(32);
  v_StorageDetail_ID VARCHAR2(32);
  
BEGIN
  SELECT COUNT(*)
  INTO v_count
  FROM M_STORAGE_DETAIL
  WHERE M_PRODUCT_ID=p_product
    AND M_LOCATOR_ID=p_locator
    AND COALESCE(M_ATTRIBUTESETINSTANCE_ID, '0')=COALESCE(p_attributesetinstance, '0')
    AND C_UOM_ID=p_uom
    AND COALESCE(M_PRODUCT_UOM_ID, '-1')=COALESCE(p_product_uom, '-1') ;

  IF(v_count > 1 ) THEN
    RAISE_APPLICATION_ERROR(-20000, '@StorageDetailError@');
  END IF;
  IF (v_count = 0) THEN
    INSERT
    INTO M_STORAGE_DETAIL
      (
        M_Storage_Detail_ID, AD_CLIENT_ID, AD_ORG_ID, ISACTIVE,
        CREATED, CREATEDBY, UPDATED, UPDATEDBY,
        M_PRODUCT_ID, M_LOCATOR_ID, M_ATTRIBUTESETINSTANCE_ID, C_UOM_ID,
        M_PRODUCT_UOM_ID, QTYONHAND, QTYORDERONHAND, DATELASTINVENTORY,
        PREQTYONHAND, PREQTYORDERONHAND
      )
      VALUES
      (
        get_uuid(), p_client, p_org, 'Y',
        now(), p_user, now(), p_user,
        p_product, p_locator, COALESCE(p_attributesetinstance, '0'), p_uom,
        p_product_uom, 0, CASE WHEN p_product_uom IS NULL THEN NULL ELSE 0 END, null,
        0, CASE WHEN p_product_uom IS NULL THEN NULL ELSE 0 END
      )
      ; 
  END IF;
  
    SELECT M_STORAGE_DETAIL_ID
    INTO v_StorageDetail_ID
    FROM M_STORAGE_DETAIL
    WHERE M_PRODUCT_ID=p_product
    AND M_LOCATOR_ID=p_locator
    AND COALESCE(M_ATTRIBUTESETINSTANCE_ID, '0')=COALESCE(p_attributesetinstance, '0')
    AND C_UOM_ID=p_uom
    AND COALESCE(M_PRODUCT_UOM_ID, '-1')=COALESCE(p_product_uom, '-1') ;
    
    SELECT COUNT(*) 
    INTO v_count
    FROM M_STOCK_AUX
    WHERE M_STORAGE_DETAIL_ID = v_StorageDetail_ID;

    IF (v_count = 0) THEN
	INSERT INTO M_STOCK_AUX
	(
	m_stock_aux_id, ad_client_id, ad_org_id, isactive, created, createdby, updated, updatedby,
	quantity, qtyorder, m_storage_detail_id, aux_id, ad_table_id, line
	) 
	VALUES
	(
	get_uuid(), p_client, p_org, 'Y', now(), p_user, now(), p_user,
	p_qty, p_qtyorder, v_StorageDetail_ID, p_aux_id, p_table_id, p_line
	);
    ELSE
	UPDATE M_STOCK_AUX 
	SET QUANTITY = QUANTITY + p_qty, UPDATED = now()
	WHERE M_STORAGE_DETAIL_ID = v_StorageDetail_ID;
    END IF;
    
    SELECT MAX(sa.m_stock_aux_id)
    INTO v_StorageAux_ID
    FROM m_stock_aux sa
    WHERE m_storage_detail_id=v_StorageDetail_ID
    AND COALESCE(quantity, 0) = 0
    AND COALESCE(qtyorder, 0) = 0;
    
    IF (v_StorageAux_ID IS NOT NULL) THEN
	DELETE FROM M_STOCK_AUX WHERE M_STOCK_AUX_ID = v_StorageAux_ID;
	
	SELECT COUNT(*) 
	INTO v_count
	FROM M_STORAGE_DETAIL SD JOIN m_product p ON SD.M_PRODUCT_ID=p.m_product_id
             JOIN m_attributeset aset ON p.m_attributeset_id = aset.m_attributeset_id 
	WHERE COALESCE(p.attrsetvaluetype, '-') <> 'F'
	AND aset.isoneattrsetvalrequired = 'Y'
	AND QTYONHAND = 0
	AND COALESCE(QTYORDERONHAND, 0) = 0
	AND PREQTYONHAND=0
	AND COALESCE(PREQTYORDERONHAND, 0) = 0
	AND SD.M_STORAGE_DETAIL_ID = v_StorageDetail_ID
	AND NOT EXISTS (SELECT 1 FROM m_stock_proposed WHERE M_STORAGE_DETAIL_ID = SD.M_STORAGE_DETAIL_ID);
	
	IF (v_count > 0) THEN
	   DELETE FROM M_STORAGE_DETAIL WHERE M_STORAGE_DETAIL_ID = v_StorageDetail_ID;
	END IF;
    END IF;
END M_UPDATE_STOCKAUX
]]></body>
    </function>
  </database>
