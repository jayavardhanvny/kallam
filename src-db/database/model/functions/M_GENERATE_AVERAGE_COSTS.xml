<?xml version="1.0"?>
  <database name="FUNCTION M_GENERATE_AVERAGE_COSTS">
    <function name="M_GENERATE_AVERAGE_COSTS" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2012 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Result NUMBER:=1;
  v_Message VARCHAR2(2000):='';
  v_MessageCount NUMBER:=0;
  v_Record_ID VARCHAR2(32);
  v_Date DATE;
  v_Qty NUMBER;
  v_Cost NUMBER;
  v_User VARCHAR2(32);
  v_Price NUMBER;
  v_DateOld DATE;
  v_MinDateCosting DATE;
  v_MinFirstInOut DATE;
  v_FirstIteration BOOLEAN;
  v_CheckResultStr VARCHAR2(2000):='';
  v_CumQty NUMBER;
  v_PermanentQty NUMBER;
  v_Processed VARCHAR2(60) ;
  v_count NUMBER;
  v_Deleted NUMBER;
  v_ProductOld VARCHAR2(32);
  v_CostNew NUMBER;
  v_PriceNew NUMBER;
  v_Client VARCHAR2(32);
  v_BaseCurrency VARCHAR2(32);
  v_Incremental BOOLEAN := FALSE;
  v_doNothing BOOLEAN := FALSE;
  v_CostingId VARCHAR2(32);
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_InOutLine RECORD;
    Cur_ProdCost RECORD;
    Cur_PriceList RECORD;
    Cur_ManualCost RECORD;
    Cur_Docs RECORD;
    Cur_OldCost RECORD;
    v_rowcount NUMBER;
  BEGIN
    v_Qty:=0;
    v_Cost:=0;
    v_Price:=0;
    v_CumQty:=0;
    v_ProductOld:='0';
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Check existence of Costing Rules
    SELECT count(1) INTO v_count
    FROM DUAL WHERE EXISTS (SELECT 1 FROM ad_preference
                      WHERE attribute = 'Cost_Eng_Ins_Migrated');
    IF (v_count > 0) THEN
      RAISE_APPLICATION_ERROR(-20000, '@CostingEngineMigrationDone@');
    END IF;
    --  Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        i.AD_Client_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_User:=Cur_Parameter.AD_User_ID;
      v_Client:=Cur_Parameter.AD_Client_ID;
      IF (Cur_Parameter.ParameterName = 'IsIncremental') THEN
        v_Incremental := COALESCE(Cur_Parameter.P_String, 'N')='Y';
      END IF;
    END LOOP; --  Get Parameter
    SELECT AD_CLIENT.C_CURRENCY_ID 
      INTO v_BaseCurrency
      FROM AD_CLIENT
      WHERE AD_CLIENT.AD_CLIENT_ID = v_Client;

    -- BEGIN CHECK IF COST USED TO POST A DOCUMENT
    -- If a document has been posted, and in the entry the costing has been used to calculate any amount,
    -- process is not allowed to be launched.

    SELECT MIN(M_INOUT.MOVEMENTDATE)
      INTO v_MinFirstInOut
      FROM M_INOUT, M_INOUTLINE, M_PRODUCT
      WHERE M_INOUT.M_INOUT_ID=M_INOUTLINE.M_INOUT_ID
        AND M_INOUTLINE.M_PRODUCT_ID=M_PRODUCT.M_PRODUCT_ID
        AND M_PRODUCT.COSTTYPE='AV'
        AND M_INOUT.ISSOTRX='N'
        AND M_INOUT.PROCESSED='Y'
        AND M_INOUTLINE.MOVEMENTQTY>0
        AND M_INOUT.DOCSTATUS <> 'DR' AND M_INOUT.DOCSTATUS <> 'RE' AND M_INOUT.DOCSTATUS <> 'VO' AND ISLOGISTIC = 'N'
        AND M_INOUT.AD_CLIENT_ID = v_Client
        AND NOT EXISTS
           (SELECT 1 FROM M_COSTING WHERE M_INOUTLINE_ID=M_INOUTLINE.M_INOUTLINE_ID);


    IF (v_Incremental) THEN
      -- In case of incremental computation, calculate since first m_inOut.MovementDate from the ones
      -- not included yet in any costing
       v_MinDateCosting := v_MinFirstInOut;
       IF (v_MinDateCosting IS NOT NULL) THEN
         v_MinDateCosting := TRUNC(v_MinDateCosting);
       ELSE
         -- There is no M_InOut with lines without costing, nothing to do
         v_Message := '@NoNewCostingGenerationNeeded@';
         v_doNothing := TRUE;
       END IF;
    ELSE
      SELECT MIN(DATEFROM)
      INTO v_MinDateCosting
      FROM M_COSTING
      WHERE ISPERMANENT='N'
        AND ISMANUAL='N'
        AND COSTTYPE='AV'
        AND ISPRODUCTION = 'N'
        AND AD_CLIENT_ID = v_Client;

      IF (v_MinDateCosting IS NULL OR v_MinFirstInOut < v_MinDateCosting) THEN
        v_MinDateCosting := v_MinFirstInOut;
      END IF;
    END IF;

      SELECT GREATEST(MAX(enddate),v_MinDateCosting) as ENDDATE
      INTO v_MinDateCosting 
      FROM (SELECT enddate + 1 as ENDDATE
            FROM c_periodcontrol cpc JOIN c_period cp ON cpc.c_period_id = cp.c_period_id  
            WHERE (periodstatus='C' OR periodstatus='P') AND cp.ad_client_id = v_Client
            GROUP BY enddate,cp.c_period_id
            HAVING NOT EXISTS (SELECT 1 FROM c_periodcontrol pc 
                               WHERE c_period_id=cp.c_period_id AND periodstatus='O')
            ) periodClosed;
	
    v_CheckResultStr := '';
   IF (NOT v_doNothing) THEN
    SELECT MAX(MOVEMENTDATE) INTO v_Date FROM M_MOVEMENT WHERE AD_CLIENT_ID=v_Client AND POSTED='Y';
    IF (v_MinDateCosting <= v_Date) THEN
      v_FirstIteration:=TRUE;
      IF (COALESCE(length(v_CheckResultStr),0) > 0) THEN v_CheckResultStr:=v_CheckResultStr || '<br/>'; END IF;
      v_CheckResultStr:=v_CheckResultStr || '@Oneormore@ @MaterialMovement@ @PostedUsingCost@ @SOS_DOCUMENTNO@ ';
      FOR Cur_Docs IN
      (
      SELECT DISTINCT DOCUMENTNO
      FROM M_MOVEMENT
      WHERE AD_CLIENT_ID=v_Client AND POSTED='Y'
        AND MOVEMENTDATE >= TO_DATE(v_MinDateCosting)
      ORDER BY DOCUMENTNO
      )
      LOOP
        IF (v_FirstIteration) THEN
          v_FirstIteration:=FALSE;
        ELSE
          v_CheckResultStr := v_CheckResultStr || ', ';
        END IF;
	  IF (COALESCE(LENGTH(v_CheckResultStr),0) > 1900) THEN
	    v_CheckResultStr:=SUBSTR(v_CheckResultStr,1,1900) || '(...)';
	  ELSE
	    v_CheckResultStr := v_CheckResultStr || Cur_Docs.DOCUMENTNO;
	  END IF;
      END LOOP;
      v_CheckResultStr:=v_CheckResultStr || '.';
    END IF;
   
    SELECT MAX(MOVEMENTDATE) INTO v_Date FROM M_INVENTORY WHERE AD_CLIENT_ID=v_Client AND POSTED='Y';
    IF (v_MinDateCosting <= v_Date) THEN
      v_FirstIteration:=TRUE;
      IF (COALESCE(length(v_CheckResultStr),0) > 0) THEN v_CheckResultStr:=v_CheckResultStr || '<br/>'; END IF;
      v_CheckResultStr:=v_CheckResultStr || '@Oneormore@ @MaterialInventory@ @PostedUsingCost@ @Name@ ';
      FOR Cur_Docs IN
      (
      SELECT DISTINCT I.NAME AS INVENTORY, W.NAME AS WAREHOUSE
      FROM M_INVENTORY I, M_WAREHOUSE W
      WHERE I.M_WAREHOUSE_ID = W.M_WAREHOUSE_ID
        AND I.AD_CLIENT_ID=v_Client AND I.POSTED='Y'
        AND I.MOVEMENTDATE >= TO_DATE(v_MinDateCosting)
      ORDER BY I.NAME, W.NAME
      )
      LOOP
        IF (v_FirstIteration) THEN
          v_FirstIteration:=FALSE;
        ELSE
          v_CheckResultStr := v_CheckResultStr || ', ';
        END IF;
	  IF (COALESCE(LENGTH(v_CheckResultStr),0) > 1900) THEN
	    v_CheckResultStr:=SUBSTR(v_CheckResultStr,1,1900) || '(...)';
	  ELSE
	    v_CheckResultStr := v_CheckResultStr || Cur_Docs.INVENTORY || '(@Warehouse@ ' || Cur_Docs.WAREHOUSE || ')';
	  END IF;
      END LOOP;
      v_CheckResultStr:=v_CheckResultStr || '.';
    END IF;

    SELECT MAX(MOVEMENTDATE) INTO v_Date FROM M_PRODUCTION WHERE AD_CLIENT_ID=v_Client AND POSTED='Y';
    IF (v_MinDateCosting <= v_Date) THEN
      v_FirstIteration:=TRUE;
      IF (COALESCE(length(v_CheckResultStr),0) > 0) THEN v_CheckResultStr:=v_CheckResultStr || '<br/>'; END IF;
      v_CheckResultStr:=v_CheckResultStr || '@Oneormore@ @MaterialProduction@ @PostedUsingCost@ @SOS_DOCUMENTNO@ ';
      FOR Cur_Docs IN
      (
      SELECT DISTINCT DOCUMENTNO
      FROM M_PRODUCTION
      WHERE AD_CLIENT_ID=v_Client AND POSTED='Y'
        AND MOVEMENTDATE >= TO_DATE(v_MinDateCosting)
      ORDER BY DOCUMENTNO
      )
      LOOP
        IF (v_FirstIteration) THEN
          v_FirstIteration:=FALSE;
        ELSE
          v_CheckResultStr := v_CheckResultStr || ', ';
        END IF;
	  IF (COALESCE(LENGTH(v_CheckResultStr),0) > 1900) THEN
	    v_CheckResultStr:=SUBSTR(v_CheckResultStr,1,1900) || '(...)';
	  ELSE
	    v_CheckResultStr := v_CheckResultStr || Cur_Docs.DOCUMENTNO;
	  END IF;
      END LOOP;
      v_CheckResultStr:=v_CheckResultStr || '.';
    END IF;

    SELECT MAX(DATEACCT) INTO v_Date FROM M_INOUT WHERE ISSOTRX='N' AND AD_CLIENT_ID=v_Client AND POSTED='Y';
    IF (v_MinDateCosting <= v_Date) THEN
      v_FirstIteration:=TRUE;
      IF (COALESCE(length(v_CheckResultStr),0) > 0) THEN v_CheckResultStr:=v_CheckResultStr || '<br/>'; END IF;
      v_CheckResultStr:=v_CheckResultStr || '@Oneormore@ @MaterialReceipt@ @PostedUsingCost@ @SOS_DOCUMENTNO@ ';
      FOR Cur_Docs IN
      (
      SELECT DISTINCT DOCUMENTNO
      FROM M_INOUT
      WHERE ISSOTRX='N' 
        AND AD_CLIENT_ID=v_Client AND POSTED='Y'
        AND DATEACCT >= TO_DATE(v_MinDateCosting)
      ORDER BY DOCUMENTNO
      )
      LOOP
        IF (v_FirstIteration) THEN
          v_FirstIteration:=FALSE;
        ELSE
          v_CheckResultStr := v_CheckResultStr || ', ';
        END IF;
	  IF (COALESCE(LENGTH(v_CheckResultStr),0) > 1900) THEN
	    v_CheckResultStr:=SUBSTR(v_CheckResultStr,1,1900) || '(...)';
	  ELSE
	    v_CheckResultStr := v_CheckResultStr || Cur_Docs.DOCUMENTNO;
	  END IF;
      END LOOP;
      v_CheckResultStr:=v_CheckResultStr || '.';
    END IF;

    SELECT MAX(IO.DATEACCT) INTO v_Date FROM M_MATCHINV M, M_INOUTLINE IOL, M_INOUT IO
    WHERE M.AD_CLIENT_ID=v_Client AND M.POSTED='Y'
      AND IOL.M_INOUTLINE_ID = M.M_INOUTLINE_ID AND IO.M_INOUT_ID = IOL.M_INOUT_ID;
    IF (v_MinDateCosting <= v_Date) THEN
      v_FirstIteration:=TRUE;
      IF (COALESCE(length(v_CheckResultStr),0) > 0) THEN v_CheckResultStr:=v_CheckResultStr || '<br/>'; END IF;
      v_CheckResultStr:=v_CheckResultStr || '@Oneormore@ @MatchedInvoices@ @PostedUsingCost@ @Date@ ';
      FOR Cur_Docs IN
      (
      SELECT DISTINCT I.DATEINVOICED, I.DOCUMENTNO
      FROM M_MATCHINV M, M_INOUTLINE IOL, M_INOUT IO, C_INVOICE I, C_INVOICELINE IL
      WHERE M.AD_CLIENT_ID=v_Client AND M.POSTED='Y'
        AND IL.C_INVOICELINE_ID = M.C_INVOICELINE_ID
        AND I.C_INVOICE_ID = IL.C_INVOICE_ID
        AND IOL.M_INOUTLINE_ID = M.M_INOUTLINE_ID AND IO.M_INOUT_ID = IOL.M_INOUT_ID
        AND IO.DATEACCT >= TO_DATE(v_MinDateCosting)
      ORDER BY I.DATEINVOICED, I.DOCUMENTNO
      )
      LOOP
        IF (v_FirstIteration) THEN
          v_FirstIteration:=FALSE;
        ELSE
          v_CheckResultStr := v_CheckResultStr || ', ';
        END IF;
	  IF (COALESCE(LENGTH(v_CheckResultStr),0) > 1900) THEN
	    v_CheckResultStr:=SUBSTR(v_CheckResultStr,1,1900) || '(...)';
	  ELSE
	    v_CheckResultStr := v_CheckResultStr || Cur_Docs.DATEINVOICED || ' (' || '@Invoice@ @SOS_DOCUMENTNO@' || Cur_Docs.DOCUMENTNO || ')';
	  END IF;
      END LOOP;
      v_CheckResultStr:=v_CheckResultStr || '.';
    END IF;
  
    IF (COALESCE(length(v_CheckResultStr),0) > 0) THEN
      RAISE_APPLICATION_ERROR(-20000, v_CheckResultStr);
    END IF;
    -- END CHECK IF COST USED TO POST A DOCUMENT

    IF (NOT v_Incremental) THEN
      DELETE
      FROM M_COSTING
      WHERE ISPERMANENT='N'
        AND ISMANUAL='N'
        AND COSTTYPE='AV'
        AND ISPRODUCTION = 'N'
        AND AD_CLIENT_ID = v_Client
        AND DATEFROM > v_MinDateCosting;
      v_rowcount:=SQL%ROWCOUNT;
      v_Deleted:=v_Deleted + v_rowcount;
      v_rowcount:=SQL%ROWCOUNT;
      DBMS_OUTPUT.PUT_LINE('  deleted=' || v_rowcount) ;
    END IF;

    --RECALCULATE THE DATETO OF ALREADY CALCULATED COSTS
    FOR Cur_ManualCost IN
      (SELECT M_COSTING_ID, M_PRODUCT_ID, DATEFROM
       FROM M_COSTING
       WHERE AD_CLIENT_ID = v_Client
       ORDER BY M_PRODUCT_ID, DATEFROM DESC) LOOP
      IF (v_ProductOld <> Cur_ManualCost.M_PRODUCT_ID) THEN
        v_Date := TO_DATE('31-12-9999', 'DD-MM-YYYY');
      END IF;
      UPDATE M_COSTING
      SET DATETO = v_date,
      Updated=now(),
      UpdatedBy=v_User
      WHERE M_COSTING_ID = Cur_ManualCost.M_Costing_ID;
      v_Date := cur_manualcost.DATEFROM;
      v_ProductOld := cur_manualcost.M_PRODUCT_ID;
    END LOOP;
    v_ProductOld:='0';
    v_DateOld:=TO_DATE('01-01-1900', 'DD-MM-YYYY') ;
    FOR Cur_InOutLine IN
      (SELECT M_INOUTLINE.M_INOUTLINE_ID, M_INOUTLINE.MOVEMENTQTY, M_PRODUCT.M_PRODUCT_ID, M_PRODUCT.NAME AS PRODUCT_NAME, M_INOUT.MOVEMENTDATE,
        M_INOUTLINE.AD_CLIENT_ID, M_INOUTLINE.AD_ORG_ID, M_INOUT.C_BPARTNER_ID, C_BPARTNER.NAME AS BPARTNER_NAME
      FROM M_INOUT, M_INOUTLINE, M_PRODUCT, C_BPARTNER
      WHERE M_INOUT.M_INOUT_ID=M_INOUTLINE.M_INOUT_ID
        AND M_INOUTLINE.M_PRODUCT_ID=M_PRODUCT.M_PRODUCT_ID
        AND M_INOUT.C_BPARTNER_ID = C_BPARTNER.C_BPARTNER_ID
        AND M_PRODUCT.COSTTYPE='AV'
        AND M_INOUT.ISSOTRX='N'
        AND M_INOUT.PROCESSED='Y'
        AND M_INOUTLINE.MOVEMENTQTY>0
        AND M_INOUT.DOCSTATUS <> 'DR' AND M_INOUT.DOCSTATUS <> 'RE' AND M_INOUT.DOCSTATUS <> 'VO' AND ISLOGISTIC = 'N'
        AND M_INOUT.AD_CLIENT_ID = v_Client
        AND M_INOUT.MOVEMENTDATE >= v_MinDateCosting
        AND NOT EXISTS
        (SELECT 1 FROM M_COSTING WHERE M_INOUTLINE_ID=M_INOUTLINE.M_INOUTLINE_ID)
      ORDER BY M_PRODUCT.M_PRODUCT_ID, M_INOUT.MOVEMENTDATE, M_INOUTLINE.MOVEMENTQTY DESC
      )
    LOOP
	
      IF (COALESCE(LENGTH(v_ResultStr),0) > 1900) THEN
	v_ResultStr:=SUBSTR(v_ResultStr,1,1900) || '(...)';
      ELSE
        v_ResultStr:='new albaran:   '||Cur_InOutLine.M_INOUTLINE_ID;
      END IF;

      SELECT SUM(QTY)
      INTO v_PermanentQty
      FROM M_COSTING
      WHERE ISPERMANENT='Y'
        AND COSTTYPE='AV'
        AND ISPRODUCTION = 'N'
        AND M_INOUTLINE_ID IS NOT NULL
        AND AD_CLIENT_ID = v_Client
        AND M_PRODUCT_ID=Cur_InOutLine.M_PRODUCT_ID
        AND DATEFROM = Cur_InOutLine.MOVEMENTDATE;

      IF (v_PermanentQty IS NULL) THEN
        v_PermanentQty:=0;
      END IF;
      
      IF(Cur_InOutLine.M_PRODUCT_ID<>v_ProductOld) THEN
        v_Date:=NULL;
        v_CostingId:=NULL;
        v_CumQty:=v_PermanentQty;
      ELSIF (Cur_InOutLine.MOVEMENTDATE<>v_DateOld) THEN
        v_CumQty:=v_PermanentQty;
      END IF;
      SELECT COUNT(*)
      INTO v_Count
      FROM M_COSTING
      WHERE M_PRODUCT_ID=Cur_InOutLine.M_PRODUCT_ID
        AND AD_CLIENT_ID = v_Client;
      IF(v_Count>0) THEN
        FOR Cur_ProdCost IN
          (SELECT COST, DATETO, M_COSTING_ID
          FROM M_COSTING
          WHERE M_PRODUCT_ID=Cur_InOutLine.M_PRODUCT_ID
            AND DATEFROM <= Cur_InOutLine.MOVEMENTDATE
            AND AD_CLIENT_ID = v_Client
          ORDER BY DATETO DESC, M_COSTING_ID
          )
        LOOP
          v_Cost:=Cur_ProdCost.COST;
          v_Date:=Cur_ProdCost.DATETO;
          v_CostingId:=Cur_ProdCost.M_COSTING_ID;
          EXIT;
        END LOOP;
        IF (v_Date IS NULL) THEN
          SELECT MIN(DATEFROM) INTO v_Date
          FROM M_COSTING
          WHERE M_PRODUCT_ID=Cur_InOutLine.M_PRODUCT_ID
            AND DATEFROM > Cur_InOutLine.MOVEMENTDATE
            AND AD_CLIENT_ID = v_Client;
        END IF;
      ELSE
        v_Cost:=NULL;
      END IF;
      IF(v_Cost IS NOT NULL) THEN
        SELECT COALESCE(SUM(MOVEMENTQTY), 0)
        INTO v_Qty
        FROM M_TRANSACTION
        WHERE M_PRODUCT_ID=Cur_InOutLine.M_PRODUCT_ID
          AND MOVEMENTDATE<Cur_InOutLine.MOVEMENTDATE
          AND AD_CLIENT_ID = v_Client;
      ELSE
        v_Qty:=0;
      END IF;
      IF (COALESCE(LENGTH(v_ResultStr),0) > 1900) THEN
	v_ResultStr:=SUBSTR(v_ResultStr,1,1900) || '(...)';
      ELSE
        v_ResultStr:='invoice albaran:   '||Cur_InOutLine.M_INOUTLINE_ID;
      END IF;
      
      SELECT CASE WHEN SUM(QTYINVOICED) <=0 THEN 0 ELSE SUM(C_INVOICELINE.QTYINVOICED*C_CURRENCY_CONVERT_PRECISION(C_INVOICELINE.PRICEACTUAL, C_INVOICE.C_CURRENCY_ID, v_BaseCurrency, TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, Cur_InOutLine.MOVEMENTDATE)), NULL, C_INVOICELINE.AD_CLIENT_ID, C_INVOICELINE.AD_ORG_ID, 'C')) /SUM(QTYINVOICED) END,
             CASE WHEN SUM(QTYINVOICED) <=0 THEN 0 ELSE COUNT(C_INVOICELINE.C_INVOICELINE_ID) END
      INTO v_Price, v_Count
      FROM M_MATCHINV, C_INVOICELINE, C_INVOICE
      WHERE M_MATCHINV.C_INVOICELINE_ID=C_INVOICELINE.C_INVOICELINE_ID
        AND M_MATCHINV.M_INOUTLINE_ID=Cur_InOutLine.M_INOUTLINE_ID
        AND C_INVOICE.C_INVOICE_ID = C_INVOICELINE.C_INVOICE_ID
        AND QTYINVOICED<>0;
      IF(v_Count=0) THEN
        IF (COALESCE(LENGTH(v_ResultStr),0) > 1900) THEN
	  v_ResultStr:=SUBSTR(v_ResultStr,1,1900) || '(...)';
        ELSE
          v_ResultStr:='order albaran:   '||Cur_InOutLine.M_INOUTLINE_ID;
        END IF;
        
        SELECT CASE WHEN SUM(C_ORDERLINE.QTYORDERED) <=0 THEN 0 ELSE SUM(C_ORDERLINE.QTYORDERED*C_CURRENCY_CONVERT_PRECISION(C_ORDERLINE.PRICEACTUAL, COALESCE(C_ORDERLINE.C_CURRENCY_ID, C_ORDER.C_CURRENCY_ID), v_BaseCurrency, TO_DATE(COALESCE(C_ORDER.DATEORDERED, Cur_InOutLine.MOVEMENTDATE)), NULL, C_ORDERLINE.AD_CLIENT_ID, C_ORDERLINE.AD_ORG_ID, 'C')) /SUM(C_ORDERLINE.QTYORDERED) END,
               CASE WHEN SUM(C_ORDERLINE.QTYORDERED) <=0 THEN 0 ELSE COUNT(C_ORDERLINE.C_ORDERLINE_ID) END
        INTO v_Price, v_Count
        FROM M_MATCHPO, C_ORDERLINE, C_ORDER
        WHERE M_MATCHPO.C_ORDERLINE_ID=C_ORDERLINE.C_ORDERLINE_ID
          AND M_MATCHPO.C_INVOICELINE_ID IS NULL
          AND M_MATCHPO.M_INOUTLINE_ID=Cur_InOutLine.M_INOUTLINE_ID
          AND C_ORDER.C_ORDER_ID = C_ORDERLINE.C_ORDER_ID
          AND C_ORDERLINE.QTYORDERED<>0;

      END IF;
      IF(v_Count=0) THEN
        FOR Cur_PriceList IN
          (SELECT C_CURRENCY_CONVERT_PRECISION(M_PRODUCTPRICE.PRICESTD, M_PRICELIST.C_CURRENCY_ID, v_BaseCurrency, TO_DATE(Cur_InOutLine.MOVEMENTDATE), NULL, M_PRODUCTPRICE.AD_CLIENT_ID, M_PRODUCTPRICE.AD_ORG_ID, 'C') AS PRICESTD
          FROM M_PRICELIST, M_PRICELIST_VERSION, M_PRODUCTPRICE
          WHERE M_PRICELIST_VERSION.M_PRICELIST_ID=
            (SELECT po_pricelist_id
            FROM C_BPARTNER
            WHERE c_bpartner_id=Cur_InOutLine.C_BPARTNER_ID
            )
            AND M_PRICELIST_VERSION.M_PRICELIST_VERSION_ID=M_PRODUCTPRICE.M_PRICELIST_VERSION_ID
            AND M_PRICELIST_VERSION.ISACTIVE='Y'
            AND M_PRODUCTPRICE.ISACTIVE='Y'
            AND M_PRODUCTPRICE.M_PRODUCT_ID=Cur_InOutLine.M_PRODUCT_ID
            AND M_PRICELIST.M_PRICELIST_ID = M_PRICELIST_VERSION.M_PRICELIST_ID
            AND M_PRICELIST_VERSION.VALIDFROM<Cur_InOutLine.MOVEMENTDATE+1
            AND M_PRICELIST.AD_CLIENT_ID = v_Client
          ORDER BY M_PRICELIST_VERSION.VALIDFROM DESC
          )
        LOOP
          v_Price:=Cur_PriceList.PRICESTD;
          EXIT;
        END LOOP;
      END IF;

      v_CostNew := ROUND((CASE
            WHEN v_Qty+v_CumQty<0 THEN v_Price
            WHEN (v_Qty+Cur_InOutLine.MOVEMENTQTY+v_CumQty) = 0 THEN 0
            ELSE (((v_Qty+v_CumQty)*COALESCE(v_Cost, v_Price)) +(Cur_InOutLine.MOVEMENTQTY *v_Price)) /(v_Qty+Cur_InOutLine.MOVEMENTQTY+v_CumQty) END), c_get_currency_precision(v_basecurrency, 'C'));
      v_PriceNew := v_Price;

      IF (v_PriceNew IS NULL) THEN
        v_Result := 2;
        v_MessageCount := v_MessageCount + 1;
        IF (v_MessageCount < 20) THEN	    
            IF (COALESCE(LENGTH(v_Message),0) > 1900) THEN
                v_Message := SUBSTR(v_Message,1,1900) || '(...)';
            ELSE
                v_Message := v_Message || '<br><br>@CannotCalcCosts@:  ''' || Cur_InOutLine.BPARTNER_NAME || ''', ''' || Cur_InOutLine.PRODUCT_NAME || '''';
            END IF;
	ELSE 
            IF (COALESCE(LENGTH(v_Message),0) > 1900) THEN
                v_Message := SUBSTR(v_Message,1,1900) || '(...)';
            ELSE
                v_Message := v_Message || '<br><br>@NoMoreMessages@';
            END IF;
	END IF;

	      FOR Cur_OldCost IN
		(SELECT PRICE, COST
		FROM M_COSTING
		WHERE DATETO <= Cur_InOutLine.MOVEMENTDATE
		  AND M_PRODUCT_ID = Cur_InOutLine.M_PRODUCT_ID
		  AND COSTTYPE = 'AV'
		ORDER BY DATETO DESC
		)
	      LOOP
		v_CostNew := COALESCE(v_CostNew, Cur_OldCost.COST);
		v_PriceNew := COALESCE(v_PriceNew, Cur_OldCost.PRICE);
		EXIT;
	      END LOOP;
      END IF;

      IF (v_PriceNew IS NULL) THEN   
	IF (v_MessageCount < 20) THEN	 
            IF (COALESCE(LENGTH(v_Message),0) > 1900) THEN
                v_Message := SUBSTR(v_Message,1,1900) || '(...)';
            ELSE
                v_Message := v_Message || '. @CannotCalcPrevCost@';
            END IF;
	END IF;
      ELSE     
              IF (COALESCE(LENGTH(v_ResultStr),0) > 1900) THEN
	        v_ResultStr:=SUBSTR(v_ResultStr,1,1900) || '(...)';
	      ELSE
		v_ResultStr:='insert costing:   '||Cur_InOutLine.M_INOUTLINE_ID;
	      END IF;

	      IF (v_costingid IS NOT NULL) THEN
                UPDATE M_COSTING
                SET DATETO = Cur_InOutLine.MOVEMENTDATE,
                Updated=now(),
                UpdatedBy=v_User
                WHERE M_COSTING_ID = v_CostingId;
              END IF;
	      
	      INSERT
	      INTO M_COSTING
		(
		  M_COSTING_ID, CREATED, CREATEDBY, UPDATED,
		  UPDATEDBY, AD_CLIENT_ID, AD_ORG_ID, M_PRODUCT_ID,
		  DATETO, DATEFROM, ISMANUAL, M_INOUTLINE_ID,
		  C_INVOICELINE_ID, QTY, PRICE, CUMQTY,
		  COST, COSTTYPE, ISPERMANENT
		)
		VALUES
		(
		  Ad_Sequence_Nextno('M_Costing'), now(), v_User, now(),
		  v_User, Cur_InOutLine.AD_CLIENT_ID, Cur_InOutLine.AD_ORG_ID, Cur_InOutLine.M_PRODUCT_ID,
		  COALESCE(v_Date, TO_DATE('31-12-9999', 'DD-MM-YYYY')), Cur_InOutLine.MOVEMENTDATE, 'N', Cur_InOutLine.M_INOUTLINE_ID,
		  NULL, Cur_InOutLine.MOVEMENTQTY, v_PriceNew, COALESCE(v_Qty, 0) + Cur_InOutLine.MOVEMENTQTY + v_CumQty, v_CostNew,
		  'AV', 'N'
		);
      END IF; 

      v_CumQty:=v_CumQty + Cur_InOutLine.MOVEMENTQTY;
      v_DateOld:=Cur_InOutLine.MOVEMENTDATE;
      v_ProductOld:=Cur_InOutLine.M_PRODUCT_ID;
    END LOOP;
   END IF;  
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message);
    AD_UPDATE_PINSTANCE(p_PInstance_ID, v_User, 'N', v_Result, v_Message);
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  ROLLBACK;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr);
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr);
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr);
  RETURN;
END M_GENERATE_AVERAGE_COSTS
]]></body>
    </function>
  </database>
