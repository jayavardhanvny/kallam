<?xml version="1.0"?>
  <database name="FUNCTION C_GET_TAX_AMT_FROM_NET">
    <function name="C_GET_TAX_AMT_FROM_NET" type="NUMERIC">
      <parameter name="p_tax_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_netamt" type="NUMERIC" mode="in">
        <default/>
      </parameter>
      <parameter name="p_alternatetaxbaseamt" type="NUMERIC" mode="in">
        <default/>
      </parameter>
      <parameter name="p_stdprecision" type="NUMERIC" mode="in">
        <default/>
      </parameter>
      <parameter name="p_accumulatedtaxamt" type="NUMERIC" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2012 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
-- Logistice
  v_ResultStr VARCHAR(2000):='';
  v_IsSummary C_TAX.ISSUMMARY%TYPE;
  v_Cascade C_TAX.CASCADE%TYPE;
  v_TaxBaseAmount NUMBER:=0;
  v_taxamt NUMBER;
  v_summary_tax NUMBER;
  v_BaseAmount C_TAX.BASEAMOUNT%TYPE;
  v_C_TaxBase_ID C_TAX.C_TAXBASE_ID%TYPE;
  v_Rate C_TAX.RATE%TYPE;
  TYPE RECORD IS REF CURSOR;
  Cur_Taxes RECORD;
BEGIN --BODY
  SELECT issummary, cascade, rate, baseamount, c_taxbase_id
    INTO v_issummary, v_cascade, v_rate, v_baseamount, v_c_taxbase_id
  FROM c_tax
  WHERE c_tax_id = p_tax_id;
  
  IF (v_issummary = 'N') THEN
    IF(v_BaseAmount = 'LNA' OR v_BaseAmount = 'LNATAX') THEN
      v_TaxBaseAmount := p_netamt;
    ELSIF (v_BaseAmount ='TBA' OR v_BaseAmount = 'TBATAX') THEN
      RAISE_APPLICATION_ERROR(-20000, '@AlternateAndTaxInclusiveNotSupported@');
      v_TaxBaseAmount := p_AlternateTaxBaseAmt;
    END IF;
    IF (v_TaxBaseAmount IS NULL) THEN
      v_TaxBaseAmount := 0;
    END IF;
    
    IF (v_BaseAmount = 'TAX' OR v_BaseAmount = 'LNATAX' OR v_BaseAmount = 'TBATAX') THEN
      v_TaxBaseAmount := v_TaxBaseAmount + C_GET_TAX_AMT_FROM_NET(v_C_TaxBase_ID, p_netamt, p_AlternateTaxBaseAmt, p_StdPrecision, p_accumulatedtaxamt);
    END IF;
    
    IF(v_Cascade='Y') THEN
      v_TaxBaseAmount := p_accumulatedtaxamt + v_TaxBaseAmount;
    END IF;
    RETURN ROUND(v_TaxBaseAmount * v_Rate / 100, p_StdPrecision) ;
  ELSE
    v_summary_tax := 0;
    FOR Cur_Taxes IN (
        SELECT c_tax_id, rate, name
        FROM c_tax
        WHERE parent_tax_id=p_tax_id
          AND isactive = 'Y'
        ORDER BY line
    ) LOOP
      v_taxamt := C_GET_TAX_AMT_FROM_NET(cur_taxes.c_tax_id, p_netamt, p_AlternateTaxBaseAmt, p_StdPrecision, p_accumulatedtaxamt + v_summary_tax) ;
      v_summary_tax := v_summary_tax + v_taxamt;
    END LOOP;
    RETURN v_summary_tax ;
  END IF;

EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  RAISE;
END C_GET_TAX_AMT_FROM_NET
]]></body>
    </function>
  </database>
