<?xml version="1.0"?>
  <database name="FUNCTION MA_MAINT_ALL">
    <function name="MA_MAINT_ALL" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2006 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  --  Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  v_Result NUMBER:=1; --  Success
  v_AD_User_ID VARCHAR2(32);
  v_Client_ID VARCHAR2(32);
  v_Org_ID VARCHAR2(32);
  v_InitDate DATE;
  v_EndDate DATE;
  --  Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    --  Record Info
    Cur_Maintenance RECORD;
  BEGIN
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
      v_ResultStr:='PInstanceNotFound';
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,
          i.AD_User_ID,
          i.AD_Client_ID,
          i.AD_Org_ID,
          p.ParameterName,
          p.P_String,
          p.P_Number,
          p.P_Date
        FROM AD_PINSTANCE i
        LEFT JOIN AD_PINSTANCE_PARA p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_AD_User_ID:=Cur_Parameter.AD_User_ID;
        v_Client_ID:=Cur_Parameter.AD_Client_ID;
        v_Org_ID:=Cur_Parameter.AD_Org_ID;
        IF(Cur_Parameter.ParameterName='Initdate') THEN
          v_InitDate:=Cur_Parameter.P_Date;
          DBMS_OUTPUT.PUT_LINE('  Initdate=' || v_InitDate) ;
        ELSIF(Cur_Parameter.ParameterName='EndDate') THEN
          v_EndDate:=Cur_Parameter.P_Date;
          DBMS_OUTPUT.PUT_LINE('  EndDate=' || v_EndDate) ;
        ELSE
          DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || Cur_Parameter.ParameterName) ;
        END IF;
      END LOOP; -- Get Parameter
      DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
    END IF;
  BEGIN --BODY
    v_ResultStr:='ProcesingMaintenances';
    FOR Cur_Maintenance IN
      (SELECT MA_Maintenance_ID
      FROM MA_Maintenance
      WHERE isActive='Y'
        AND EXISTS
        (SELECT 1
        FROM MA_Maint_Periodicity
        WHERE MA_Maint_Periodicity.MA_MAINTENANCE_ID=MA_MAINTENANCE_ID
        )
      )
    LOOP
      DBMS_OUTPUT.PUT_LINE('  MA_Maintenance_ID=' || Cur_Maintenance.MA_Maintenance_ID) ;
      MA_MAINTENANCE_SCHEDULE(NULL, Cur_Maintenance.MA_Maintenance_ID, v_InitDate, v_EndDate, v_Client_ID, v_Org_ID, v_AD_User_ID) ;
    END LOOP;
    --<<FINISH_PROCESS>>
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished - ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, v_AD_User_ID, 'N', v_Result, v_Message) ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('--<<MA_Maintenance escheduling finished>> ' || v_Message) ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  IF(p_PInstance_ID IS NOT NULL) THEN
    ROLLBACK;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  ELSE
    RAISE;
  END IF;
  RETURN;
END MA_MAINT_ALL
]]></body>
    </function>
  </database>
