<?xml version="1.0"?>
  <database name="FUNCTION C_PROJECT_WON">
    <function name="C_PROJECT_WON" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2012 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  --  Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  --  Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_ProjectProposalLine RECORD;
    --  Parameter Variables
    v_NextNo VARCHAR2(32);
    v_cProjectId varchar2(32);
    v_cBPartnerId varchar2(32);
    v_cBPartnerLocationId varchar2(32);
    v_adUserId varchar2(32);
    v_billToId varchar2(32);
    v_paymentRule VARCHAR(60) ;
    v_FINpayment C_PROJECTPROPOSAL.FIN_Paymentmethod_ID%TYPE;
    v_cPaymenttermId varchar2(32);
    v_projectStatus VARCHAR(60) ;
    v_value NVARCHAR2(40) ;
    v_Accountno C_BP_BANKACCOUNT.ACCOUNTNO%TYPE;
    --  Copy
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    --  Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PINSTANCE i
      LEFT JOIN AD_PINSTANCE_PARA p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
    END LOOP; --  Get Parameter
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
    --Update project header
    SELECT C_PROJECT.C_Project_ID,
      ProjectStatus,
      VALUE
    INTO v_cProjectId,
      v_projectStatus,
      v_value
    FROM C_PROJECT,
      C_PROJECTPROPOSAL
    WHERE C_PROJECT.C_Project_ID=C_PROJECTPROPOSAL.C_Project_ID
      AND C_PROJECTPROPOSAL.C_ProjectProposal_ID=v_Record_ID;
    IF(v_projectStatus='OP') THEN
      SELECT C_PROJECTPROPOSAL.C_BPartner_ID,
        C_PROJECTPROPOSAL.C_BPartner_Location_ID,
        C_PROJECTPROPOSAL.AD_User_ID,
        MAX(C_BPARTNER_LOCATION.C_BPartner_Location_ID),
        C_PROJECTPROPOSAL.PaymentRule,
        C_PROJECTPROPOSAL.FIN_Paymentmethod_ID,
        C_PROJECTPROPOSAL.C_Paymentterm_ID
      INTO v_cBPartnerId,
        v_cBPartnerLocationId,
        v_adUserId,
        v_billToId,
        v_paymentRule,
        v_FINpayment,
        v_cPaymenttermId
      FROM C_PROJECTPROPOSAL,
        C_BPARTNER
      LEFT JOIN C_BPARTNER_LOCATION
        ON C_BPARTNER.C_BPartner_ID=C_BPARTNER_LOCATION.C_BPartner_ID
      WHERE C_PROJECTPROPOSAL.C_BPartner_ID=C_BPARTNER.C_Bpartner_ID
        AND COALESCE(C_BPARTNER_LOCATION.IsBillTo, 'Y')='Y'
        AND C_PROJECTPROPOSAL.C_ProjectProposal_ID=v_Record_ID
      GROUP BY C_PROJECTPROPOSAL.C_BPartner_ID,
        C_PROJECTPROPOSAL.C_BPartner_Location_ID,
        C_PROJECTPROPOSAL.AD_User_ID,
        C_PROJECTPROPOSAL.PaymentRule,
        C_PROJECTPROPOSAL.FIN_Paymentmethod_ID,
        C_PROJECTPROPOSAL.C_Paymentterm_ID;
      IF(v_cProjectId IS NOT NULL) THEN
        v_ResultStr:='Update header';
        DECLARE
          Cur_CBPBancAcct RECORD;
        BEGIN
          FOR Cur_CBPBancAcct IN
            (SELECT MAX(ACCOUNTNO) AS Accountno
            FROM C_BP_BANKACCOUNT
            WHERE C_BPARTNER_ID=v_cBPartnerId
              AND ISACTIVE='Y'
            )
          LOOP
            v_Accountno:=SUBSTR(Cur_CBPBancAcct.Accountno, 1, 20);
            EXIT;
          END LOOP;
        END;
        UPDATE C_PROJECT
          SET Updated=now(),
          UpdatedBy='0',
          C_BPartner_ID=v_cBPartnerId,
          C_BPartner_Location_ID=v_cBPartnerLocationId, --Salesrep_ID = v_adUserId,
          BillTo_ID=v_billToId,
          PaymentRule=v_paymentRule,
          FIN_paymentmethod_id=v_FINpayment,
          C_Paymentterm_ID=v_cPaymenttermId,
          accountno=v_Accountno
        WHERE C_Project_ID=v_cProjectId;
        --Update, insert or delete project lines
        v_ResultStr:='Update Lines';
        DELETE FROM C_PROJECTLINE WHERE C_PROJECTLINE.C_Project_ID=v_cProjectId;
        FOR Cur_ProjectProposalLine IN
          (SELECT C_PROJECTPROPOSALLINE.AD_Client_ID,
            C_PROJECTPROPOSALLINE.AD_Org_ID,
            C_PROJECTPROPOSALLINE.M_Product_ID,
            C_PROJECTPROPOSALLINE.Qty,
            C_PROJECTPROPOSALLINE.Price,
            C_PROJECTPROPOSALLINE.Product_Value,
            C_PROJECTPROPOSALLINE.Product_Name,
            C_PROJECTPROPOSALLINE.Product_Description,
            M_PRODUCT.M_Product_Category_ID,
            C_PROJECTPROPOSALLINE.LineNo
          FROM C_PROJECTPROPOSALLINE,
            M_PRODUCT
          WHERE C_PROJECTPROPOSALLINE.M_Product_ID=M_PRODUCT.M_Product_ID
            AND C_PROJECTPROPOSALLINE.C_ProjectProposal_ID=v_Record_ID
          )
        LOOP
          Ad_Sequence_Next('C_ProjectLine', Cur_ProjectProposalLine.AD_Client_ID, v_NextNo) ;
          INSERT
          INTO C_PROJECTLINE
            (
              C_PROJECTLINE_ID, AD_CLIENT_ID, AD_ORG_ID, ISACTIVE,
              CREATED, CREATEDBY, UPDATED, UPDATEDBY,
              C_PROJECT_ID, LINE, DESCRIPTION, PLANNEDQTY,
              PLANNEDPRICE, PLANNEDAMT, PLANNEDMARGINAMT, COMMITTEDAMT,
              M_PRODUCT_ID, M_PRODUCT_CATEGORY_ID, INVOICEDAMT, INVOICEDQTY,
              COMMITTEDQTY, C_PROJECTISSUE_ID, C_ORDER_ID, C_ORDERPO_ID,
              ISPRINTED, PROCESSED, DOPRICING, PLANNEDPOPRICE,
              PRODUCT_VALUE, C_TAX_ID, PRODUCT_NAME, PRODUCT_DESCRIPTION
            )
            VALUES
            (
              v_NextNo, Cur_ProjectProposalLine.AD_Client_ID, Cur_ProjectProposalLine.AD_Org_ID, 'Y',
              now(), '0', now(), '0',
              v_cProjectId, Cur_ProjectProposalLine.LineNo, '', Cur_ProjectProposalLine.Qty,
              Cur_ProjectProposalLine.Price, Cur_ProjectProposalLine.Qty*Cur_ProjectProposalLine.Price, 0, 0,
              Cur_ProjectProposalLine.M_Product_ID, Cur_ProjectProposalLine.M_Product_Category_ID, 0, 0,
              0, NULL, NULL, NULL,
               'N', 'N', 'N', NULL,
              Cur_ProjectProposalLine.Product_Value, NULL, Cur_ProjectProposalLine.Product_Name, Cur_ProjectProposalLine.Product_Description
            )
            ;
        END LOOP;
        v_Message:='@Project@ ' || v_value || ' @awarded@';
      END IF;
    ELSE
		RAISE_APPLICATION_ERROR(-20000, '@Projectclose@');
    END IF;
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END C_PROJECT_WON
]]></body>
    </function>
  </database>
