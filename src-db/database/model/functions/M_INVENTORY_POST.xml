<?xml version="1.0"?>
  <database name="FUNCTION M_INVENTORY_POST">
    <function name="M_INVENTORY_POST" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SLU
  * Contributions are Copyright (C) 2001-2010 Openbravo, S.L.U.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: M_Inventory_Post.sql,v 1.4 2003/09/05 04:58:06 jjanke Exp $
  ***
  * Title: Physical Inventory Post
  * Description:
  * - Update Storage with correct QtyOnHand
  * - Generate Transcation
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  v_Result NUMBER:=0; -- failure
  v_User VARCHAR2(32);
  v_IsProcessing CHAR(1) ;
  v_IsProcessed VARCHAR2(60) ;
  v_NoProcessed NUMBER:=0;
  v_is_included NUMBER:=0;
  v_available_period NUMBER:=0;
  v_is_ready AD_Org.IsReady%TYPE;
  v_is_tr_allow AD_OrgType.IsTransactionsAllowed%TYPE;
  v_isacctle AD_OrgType.IsAcctLegalEntity%TYPE;
  v_org_bule_id AD_Org.AD_Org_ID%TYPE;
  --Added by PSarobe 13062007
  v_line NUMBER;
  v_Aux NUMBER;
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_Inventorylines RECORD;
    Cur_Lines RECORD;
    -- Parameter Variables
    v_InvDate DATE;
    v_Client_ID VARCHAR2(32) ;
    v_Org_ID VARCHAR2(32);
    v_Count NUMBER:=0;
    PROCESS_ERROR BOOLEAN:=false;
    END_PROCESS BOOLEAN:=false;
    END_PROCESSING BOOLEAN:=false;
    rowcount NUMBER;
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing') ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_User:=Cur_Parameter.AD_User_ID;
    END LOOP; -- Get Parameter
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
    v_ResultStr:='ReadingInventory';
  BEGIN
    SELECT MovementDate,
      Processing,
      Processed,
      AD_Client_ID,
      AD_Org_ID
    INTO v_InvDate,
      v_IsProcessing,
      v_IsProcessed,
      v_Client_ID,
      v_Org_ID
    FROM M_Inventory
    WHERE M_Inventory_ID=v_Record_ID  FOR UPDATE;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20000, '@SaveErrorRowNotFound@') ;
  END;
  IF(NOT PROCESS_ERROR) THEN
    IF(v_IsProcessing='Y') THEN
      RAISE_APPLICATION_ERROR(-20000, '@OtherProcessActive@') ;
    END IF;
  END IF;--PROCESS_ERROR
  IF(NOT PROCESS_ERROR AND NOT END_PROCESS) THEN
    IF(v_IsProcessed='Y') THEN
      RAISE_APPLICATION_ERROR(-20000, '@AlreadyPosted@') ;
    END IF;
  END IF;--PROCESS_ERROR
  IF(NOT PROCESS_ERROR AND NOT END_PROCESS AND NOT END_PROCESSING) THEN
    v_ResultStr:='CheckingRestrictions';
    SELECT COUNT(*), MAX(M.line)
    INTO v_Count, v_line
    FROM M_InventoryLine M,
      M_Product P
    WHERE M.M_PRODUCT_ID=P.M_PRODUCT_ID
      AND P.M_ATTRIBUTESET_ID IS NOT NULL
      AND (P.ATTRSETVALUETYPE IS NULL OR P.ATTRSETVALUETYPE <> 'F')
      AND (SELECT ISONEATTRSETVALREQUIRED FROM M_ATTRIBUTESET WHERE M_ATTRIBUTESET_ID = P.M_ATTRIBUTESET_ID) = 'Y'
      AND COALESCE(M.M_ATTRIBUTESETINSTANCE_ID, '0') = '0'
      AND M.M_Inventory_ID=v_Record_ID;
    IF v_Count<>0 THEN
      RAISE_APPLICATION_ERROR(-20000, '@Inline@'||' '||v_line||' '||'@productWithoutAttributeSet@') ;
    END IF;
  END IF;--PROCESS_ERROR
  IF(NOT PROCESS_ERROR AND NOT END_PROCESS AND NOT END_PROCESSING) THEN
    -- Check for products in multiple lines
	--Added by PSarobe 13062007
	SELECT MAX(count)
	INTO v_Aux
	FROM (
		 SELECT COUNT(*) as count, il.M_Product_ID, COALESCE(il.M_AttributeSetInstance_ID, '0'), COALESCE(il.M_Product_UOM_ID, '0'), il.M_Locator_ID
		 FROM M_Inventoryline il
		 WHERE il.M_INVENTORY_ID = v_Record_ID
		 GROUP BY il.M_Product_ID, COALESCE(il.M_AttributeSetInstance_ID, '0'), COALESCE(il.M_Product_UOM_ID, '0'), il.M_Locator_ID
		 HAVING COUNT(*)>1) A;
	IF v_Aux <>0 THEN
	   FOR Cur_Inventorylines IN (SELECT M_Product_ID, COALESCE(M_AttributeSetInstance_ID, '0') AS Atributte, COALESCE(M_Product_UOM_ID, '0') as ProductUOM, M_Locator_ID
	   	   					  	  FROM M_Inventoryline
								  WHERE M_Inventory_Id=v_Record_ID
								  GROUP BY M_Product_ID, COALESCE(M_AttributeSetInstance_ID, '0'), COALESCE(M_Product_UOM_ID, '0'), M_Locator_ID
								  HAVING COUNT(*)>1) LOOP
				FOR Cur_Lines IN (SELECT line
							  	  FROM M_Inventoryline
								  WHERE M_PRODUCT_ID = Cur_Inventorylines.M_Product_ID
								  AND COALESCE(M_AttributeSetInstance_ID, '0') = Cur_Inventorylines.Atributte
								  AND COALESCE(M_Product_UOM_ID, '0') = Cur_Inventorylines.ProductUOM
								  AND M_Locator_ID = Cur_Inventorylines.M_Locator_ID
								  AND M_Inventory_Id=v_Record_ID) LOOP

				v_Message:=v_Message||Cur_Lines.line||', ';

				END LOOP;
	   RAISE_APPLICATION_ERROR(-20000, '@Thelines@'||v_Message||' '||'@sameInventorylines@') ;
	   END LOOP;
	END IF;
  END IF;--PROCESS_ERROR
  IF(NOT PROCESS_ERROR AND NOT END_PROCESS AND NOT END_PROCESSING) THEN
    -- Start Processing ------------------------------------------------------
    -- Check the header belongs to a organization where transactions are posible and ready to use
    SELECT AD_Org.IsReady, Ad_OrgType.IsTransactionsAllowed
    INTO v_is_ready, v_is_tr_allow
    FROM M_INVENTORY, AD_Org, AD_OrgType
    WHERE AD_Org.AD_Org_ID=M_INVENTORY.AD_Org_ID
    AND AD_Org.AD_OrgType_ID=AD_OrgType.AD_OrgType_ID
    AND M_INVENTORY.M_INVENTORY_ID=v_Record_ID;
    IF (v_is_ready='N') THEN
      RAISE_APPLICATION_ERROR(-20000, '@OrgHeaderNotReady@');
    END IF;
    IF (v_is_tr_allow='N') THEN
      RAISE_APPLICATION_ERROR(-20000, '@OrgHeaderNotTransAllowed@');
    END IF;
    
    SELECT AD_ORG_CHK_DOCUMENTS('M_INVENTORY', 'M_INVENTORYLINE', v_Record_ID, 'M_INVENTORY_ID', 'M_INVENTORY_ID') INTO v_is_included FROM dual;
    IF (v_is_included=-1) THEN
      RAISE_APPLICATION_ERROR(-20000, '@LinesAndHeaderDifferentLEorBU@');
    END IF;
    
    -- Check the period control is opened (only if it is legal entity with accounting)
    -- Gets the BU or LE of the document
    SELECT AD_GET_DOC_LE_BU('M_INVENTORY', v_Record_ID, 'M_INVENTORY_ID', 'LE')
    INTO v_org_bule_id
    FROM DUAL;
    
    SELECT AD_OrgType.IsAcctLegalEntity
    INTO v_isacctle
    FROM AD_OrgType, AD_Org
    WHERE AD_Org.AD_OrgType_ID = AD_OrgType.AD_OrgType_ID
    AND AD_Org.AD_Org_ID=v_org_bule_id;
    
    IF (v_isacctle='Y') THEN
      SELECT C_CHK_OPEN_PERIOD(v_Org_ID, v_InvDate, 'MMI', NULL) 
      INTO v_available_period
      FROM DUAL;
      
      IF (v_available_period<>1) THEN
        RAISE_APPLICATION_ERROR(-20000, '@PeriodNotAvailable@');
      END IF;
    END IF;
    

    v_ResultStr:='LockingInventory';
    UPDATE M_Inventory  SET Processing='Y'  WHERE M_Inventory_ID=v_Record_ID;
    -- Commented by cromero 19102006 COMMIT;
    /**
    * Create Transaction
    */
    DECLARE
      Cur_InvLine RECORD;
      NextNo VARCHAR2(32);
    BEGIN --FOR COMMIT
      FOR Cur_InvLine IN
        (SELECT *  FROM M_InventoryLine  WHERE M_Inventory_ID=v_Record_ID  ORDER BY Line)
      LOOP
        AD_Sequence_Next('M_Transaction', v_Client_ID, NextNo) ;
        INSERT
        INTO M_Transaction
          (
            M_Transaction_ID, AD_Client_ID, AD_Org_ID, IsActive,
            Created, CreatedBy, Updated, UpdatedBy,
            MovementType, M_Locator_ID, M_Product_ID, M_AttributeSetInstance_ID,
            MovementDate, MovementQty, M_InventoryLine_ID, M_Product_UOM_ID,
            QuantityOrder, C_UOM_ID
          )
          VALUES
          (
            NextNo, Cur_InvLine.AD_Client_ID, Cur_InvLine.AD_Org_ID, 'Y',
            now(), v_User, now(), v_User,
            'I+', Cur_InvLine.M_Locator_ID, Cur_InvLine.M_Product_ID, COALESCE(Cur_InvLine.M_AttributeSetInstance_ID, '0'),
            v_InvDate, Cur_InvLine.QtyCount-COALESCE(Cur_InvLine.QtyBook, 0), Cur_InvLine.M_InventoryLine_ID, Cur_InvLine.M_Product_UOM_ID,
            Cur_InvLine.QuantityOrder-COALESCE(Cur_InvLine.QuantityOrderBook, 0), Cur_InvLine.C_UOM_ID
          )
          ;
        M_Check_Stock(Cur_InvLine.M_Product_ID, v_Client_ID, v_Org_ID, v_Result, v_Message) ;
        IF v_Result=0 THEN
          RAISE_APPLICATION_ERROR(-20000, v_Message||' '||'@line@'||' '||Cur_InvLine.line) ;
        END IF;
      END LOOP;
    END; --FOR COMMIT
  END IF;--PROCESS_ERROR
  IF(NOT PROCESS_ERROR AND NOT END_PROCESS AND NOT END_PROCESSING) THEN
    v_Result:=1; -- success
  END IF;--PROCESS_ERROR
  -- End Processing --------------------------------------------------------
  --<<END_PROCESSING>>
  IF(NOT PROCESS_ERROR AND NOT END_PROCESS) THEN
    v_ResultStr:='UnLockingInventory';
    UPDATE M_Inventory  SET Processed='Y',Updated=now(),UpdatedBy=v_User  WHERE M_Inventory_ID=v_Record_ID;
    -- Commented by cromero 19102006 COMMIT;
  END IF;--
  --<<END_PROCESS>>
  IF(NOT PROCESS_ERROR) THEN
    v_ResultStr:='UnLockingInventory';
    UPDATE M_Inventory
      SET Processing='N',
      Updated=now(),
      UpdatedBy=v_User
    WHERE M_Inventory_ID=v_Record_ID;
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished') ;
    DBMS_OUTPUT.PUT_LINE(v_Message) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, v_User, 'N', v_Result, v_Message) ;
    RETURN;
  END IF;--PROCESS_ERROR
  --<<PROCESS_ERROR>>
  --To be deprecated because now we always use raise_aplication_error. Added by Psarobe 13062007
  v_ResultStr:='UnLockingInventory';
  UPDATE M_Inventory
    SET Processing='N',
    Updated=now(),
    UpdatedBy=v_User
  WHERE M_Inventory_ID=v_Record_ID;
  -- Commented by cromero 19102006 COMMIT;
  DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished') ;
  DBMS_OUTPUT.PUT_LINE(v_Message) ;
  AD_UPDATE_PINSTANCE(PInstance_ID, v_User, 'N', v_Result, v_Message) ;
  RETURN;
  --until here to be deprecated
END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  --To be fixed or deprecated
  DBMS_OUTPUT.PUT_LINE(v_Message) ;
  --
  ROLLBACK;
  --
  UPDATE M_Inventory
    SET Processed='N',
    Processing='N'
  WHERE M_Inventory_ID=v_Record_ID;
  AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END M_INVENTORY_POST
]]></body>
    </function>
  </database>
