<?xml version="1.0"?>
  <database name="FUNCTION M_GENERATE_STANDARD_COSTS">
    <function name="M_GENERATE_STANDARD_COSTS" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_date" type="TIMESTAMP" mode="in">
        <default/>
      </parameter>
      <parameter name="p_products" type="CHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2006 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Result NUMBER;
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  v_User VARCHAR2(32);
  v_Deleted NUMBER;
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_PriceList record;
    v_rowcount NUMBER;
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    --  Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter in
      (SELECT i.Record_ID,
        i.AD_User_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_User:=Cur_Parameter.AD_User_ID;
    END LOOP; --  Get Parameter
    DELETE
    FROM M_COSTING
    WHERE ISPERMANENT='N'
      AND ISMANUAL='N'
      AND COSTTYPE='ST';
    v_rowcount:=SQL%ROWCOUNT;
    v_Deleted:=v_Deleted + v_rowcount;
    DBMS_OUTPUT.PUT_LINE('  deleted=' || v_rowcount) ;
    FOR Cur_PriceList in
      (SELECT COALESCE(M_PRODUCT.COSTSTD, 0) AS COSTSTD,
        M_PRODUCT.M_PRODUCT_ID,
        M_PRODUCT.AD_CLIENT_ID,
        M_PRODUCT.AD_ORG_ID
      FROM M_PRODUCT
      WHERE M_PRODUCT_ID IN
        (SELECT M_PRODUCT_ID FROM M_PRODUCT  WHERE COSTTYPE='ST')
        AND M_PRODUCT_ID IN(p_Products)
        AND NOT EXISTS
        (SELECT 1
        FROM M_COSTING
        WHERE COSTTYPE='ST'
          AND M_PRODUCT_ID=M_PRODUCT.M_PRODUCT_ID
          AND DATEFROM=p_Date
          AND PRICE=M_PRODUCT.COSTSTD
          AND COST=M_PRODUCT.COSTSTD
        )
      )
    LOOP
      UPDATE M_COSTING
        SET DATETO=p_Date
      WHERE DATETO=TO_DATE('31-12-9999', 'DD-MM-YYYY')
        AND M_PRODUCT_ID=Cur_PriceList.M_PRODUCT_ID
        AND COSTTYPE='ST';
      INSERT
      INTO M_COSTING
        (
          M_COSTING_ID, CREATED, CREATEDBY, UPDATED,
          UPDATEDBY, AD_CLIENT_ID, AD_ORG_ID, M_PRODUCT_ID,
          DATETO, DATEFROM, ISMANUAL, M_INOUTLINE_ID,
          C_INVOICELINE_ID, QTY, PRICE, CUMQTY,
          COST, COSTTYPE, ISPERMANENT
        )
        VALUES
        (
          Ad_Sequence_Nextno('M_Costing'), now(), v_User, now(),
          v_User, Cur_PriceList.AD_CLIENT_ID, Cur_PriceList.AD_ORG_ID, Cur_PriceList.M_PRODUCT_ID,
          TO_DATE('31-12-9999', 'DD-MM-YYYY'), p_Date, 'N', NULL,
          NULL, 0, Cur_PriceList.COSTSTD, 0,
          Cur_PriceList.COSTSTD, 'ST', 'N'
        )
        ;
    END LOOP;
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, v_User, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  ROLLBACK;
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END M_GENERATE_STANDARD_COSTS
]]></body>
    </function>
  </database>
