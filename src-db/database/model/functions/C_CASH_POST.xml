<?xml version="1.0"?>
  <database name="FUNCTION C_CASH_POST">
    <function name="C_CASH_POST" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere License
  License
  * compliance with the License. You may obtain a copy of the License at
  * http://www.compiere.org/license.html
  * Software distributed under the License is distributed on an
  AS IS
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke  and ComPiere,
  Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SLU
  * Contributions are Copyright (C) 1999-2009 Openbravo, S.L.U.
  *************************************************************************
  * $Id: C_Cash_Post.sql,v 1.10 2003/03/17 20:32:25 jjanke Exp $
  ***
  * Title: Post Cash Book Entry
  * Description:
  * - Create Payment entry for Transfer: DELETED!!! May do it from Settlement
  *  - Create Allocation for Invoices (trigger updates SO_CreditUsed):
  *  - Update Balance and De-Activate
  ************************************************************************/
  --  Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Result NUMBER;
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32) ;
  v_User VARCHAR2(32);
  v_C_Debt_Payment_ID VARCHAR2(32);
  v_C_Order_ID VARCHAR2(32);
  --Added by P.SAROBE
	v_documentno_Settlement VARCHAR2(40);
	v_dateSettlement DATE;
	v_Cancel_Processed VARCHAR(60);
	v_nameBankstatement VARCHAR2 (60);
	v_dateBankstatement DATE;
	v_nameCash VARCHAR2 (60);
	v_dateCash DATE;
	v_Bankstatementline_ID VARCHAR2(32);
	v_CashLine_ID VARCHAR2(32);
	v_Settlement_Cancel_ID VARCHAR2(32);
	v_ispaid CHAR(1);
  v_is_included NUMBER:=0;
  v_available_period NUMBER:=0;
  v_is_ready AD_Org.IsReady%TYPE;
  v_is_tr_allow AD_OrgType.IsTransactionsAllowed%TYPE;
  v_isacctle AD_OrgType.IsAcctLegalEntity%TYPE;
  v_org_bule_id AD_Org.AD_Org_ID%TYPE;
	--Finish added by P.Sarobe
  --  Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_CashlineDebtpayment RECORD;
    --  Parameter Variables
    v_Processed VARCHAR(60);
    v_Posted VARCHAR(60);
    v_count NUMBER;
    v_SettlementDocType_ID VARCHAR2(32) ;
    v_settlementID varchar2(32) ;
    v_DocumentNo VARCHAR(40) ;
    v_line C_CASHLINE.LINE%TYPE;
    -- CashBook
    v_CB_Currency_ID VARCHAR2(32) ;
    v_CB_Date DATE;
    v_AD_Org_ID VARCHAR2(32);
    v_AD_Client_ID VARCHAR2(32);
    v_C_Settlement_ID VARCHAR2(32);
    v_C_CashBook_ID VARCHAR2(32) ;
    FINISH_PROCESS BOOLEAN:=false;
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    --  Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_User:=Cur_Parameter.AD_User_ID;
    END LOOP; --  Get Parameter
    SELECT PROCESSED,
      POSTED,
      AD_Org_ID,
      AD_Client_ID,
      C_CASHBOOK_ID, DateAcct
    INTO v_Processed,
      v_Posted,
      v_AD_Org_ID,
      v_AD_Client_ID,
      v_C_CashBook_ID, v_dateCash
    FROM C_CASH
    WHERE C_Cash_ID=v_Record_ID;
    /* Not needed: payments are updated to pending status
    SELECT COUNT(*) INTO v_Count
    FROM C_CASHLINE
    WHERE C_CASH_ID = v_Record_ID
    AND C_ORDER_ID IS NOT NULL
    AND C_DEBT_PAYMENT_ID IS NOT NULL;
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID);
    IF (v_Processed = 'Y' AND v_Count>0) THEN
    v_Message := '@AlreadyPosted@';
    v_Result := 0;
    FINISH_PROCESS := true;
    END IF;
    */
    IF(NOT FINISH_PROCESS) THEN
      IF(v_Posted='Y') THEN
        RAISE_APPLICATION_ERROR(-20000, '@CashDocumentPosted@') ;
      END IF;
    END IF;--FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      DECLARE
        v_Settlement_Cancel VARCHAR2(32):=NULL;
        CurDebtPaymentOrder RECORD;
      BEGIN
        /*
        *  Reversing process
        */
        IF(v_Processed='Y') THEN
          v_ResultStr:='Reversed';
          UPDATE C_CASH
            SET PROCESSED='N',
            --ENDINGBALANCE=0,
            STATEMENTDIFFERENCE=NULL,
            Updated=now(),
            UpdatedBy=v_User
          WHERE C_CASH_ID=v_Record_ID;

          SELECT MAX(S.C_SETTLEMENT_ID)
          INTO v_Settlement_Cancel
          FROM C_DEBT_PAYMENT DP,
            C_SETTLEMENT S
          WHERE DP.C_SETTLEMENT_CANCEL_ID=S.C_SETTLEMENT_ID
            AND DP.C_CASHLINE_ID IN
            (SELECT C_CASHLINE_ID FROM C_CASHLINE  WHERE C_CASH_ID=v_Record_ID)
            AND S.DOCUMENTNO LIKE '*CP*%';


     UPDATE C_DEBT_PAYMENT
            SET C_CASHLINE_ID=NULL,Updated=now(),
            UpdatedBy=v_User
          WHERE C_CASHLINE_ID IN
            (SELECT C_CASHLINE_ID
            FROM C_CASHLINE
            WHERE C_CASH_ID=v_Record_ID
              AND CashType IN('O', 'P'));--To be fixed. Cash type ='O' is deprecated. Added by P.Sarobe

          IF(v_Settlement_Cancel IS NOT NULL) THEN --This is the generated settlement (it only can be one)
           DELETE FROM FACT_ACCT
            WHERE AD_TABLE_ID = '800019'
            AND RECORD_ID = v_Settlement_Cancel;

      UPDATE C_Settlement set posted='N',Updated=now(),
              UpdatedBy=v_User where c_Settlement_ID= v_Settlement_Cancel;

            C_SETTLEMENT_POST(NULL, v_Settlement_Cancel) ;
            UPDATE C_DEBT_PAYMENT
              SET C_SETTLEMENT_CANCEL_ID=NULL,
              CANCEL_PROCESSED='N',
              ISPaid='N',
              Updated=now(),
              UpdatedBy=v_User
            WHERE C_SETTLEMENT_CANCEL_ID=v_Settlement_Cancel;
            DELETE FROM C_SETTLEMENT WHERE C_SETTLEMENT_ID=v_Settlement_Cancel;
          END IF;

	 --To be fixed. We are doing the same 'IsPaid' below. Added by P.Sarobe
     UPDATE C_DEBT_PAYMENT
            SET ISPaid='N',
            Updated=now(),
            UpdatedBy=v_User
          WHERE c_debt_payment_id IN
            (SELECT C_DEBT_PAYMENT_ID
            FROM C_CASHLINE
            WHERE C_CASH_ID=v_Record_ID
              AND CashType IN('O', 'P'));--To be fixed. Cash type ='O' is deprecated. Added by P.Sarobe

          -- This is done to be compatible with old versions. To be Fixed
          FOR CurDebtPaymentOrder IN
            (SELECT cl.C_CashLine_ID,
              cl.C_Debt_Payment_ID
            FROM C_CASHLINE cl
            WHERE cl.C_CASH_ID=v_Record_ID
              AND CASHTYPE='O'
              AND C_Order_ID IS NOT NULL
            )
          LOOP

            UPDATE C_CashLine
              SET C_Debt_Payment_ID=NULL,
              Updated=now(),
              UpdatedBy=v_User
            WHERE C_CashLine_ID=CurDebtPaymentOrder.C_CashLine_ID;
            DELETE
            FROM C_DEBT_PAYMENT
            WHERE C_DEBT_PAYMENT_ID=CurDebtPaymentOrder.C_Debt_Payment_ID;
          END LOOP;
          FINISH_PROCESS:=true;
        END IF; --v_Processed = 'Y'
      END;
    END IF;--FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      /*
      *  Checking Restrictions
      */
      -- Check the header belongs to a organization where transactions are posible and ready to use
      SELECT AD_Org.IsReady, Ad_OrgType.IsTransactionsAllowed
      INTO v_is_ready, v_is_tr_allow
      FROM C_CASH, AD_Org, AD_OrgType
      WHERE AD_Org.AD_Org_ID=C_CASH.AD_Org_ID
      AND AD_Org.AD_OrgType_ID=AD_OrgType.AD_OrgType_ID
      AND C_CASH.C_CASH_ID=v_Record_ID;
      IF (v_is_ready='N') THEN
        RAISE_APPLICATION_ERROR(-20000, '@OrgHeaderNotReady@');
      END IF;
      IF (v_is_tr_allow='N') THEN
        RAISE_APPLICATION_ERROR(-20000, '@OrgHeaderNotTransAllowed@');
      END IF;
      
      SELECT AD_ORG_CHK_DOCUMENTS('C_CASH', 'C_CASHLINE', v_Record_ID, 'C_CASH_ID', 'C_CASH_ID') INTO v_is_included FROM dual;
      IF (v_is_included=-1) THEN
        RAISE_APPLICATION_ERROR(-20000, '@LinesAndHeaderDifferentLEorBU@');
      END IF;
      
      SELECT AD_ORG_CHK_DOC_PAYMENTS('C_CASH', 'C_CASHLINE', v_Record_ID, 'C_CASH_ID', 'C_CASH_ID', 'C_DEBT_PAYMENT_ID') INTO v_is_included FROM dual;
      IF (v_is_included=-1) THEN
        RAISE_APPLICATION_ERROR(-20000, '@PaymentsAndHeaderDifferentLEorBU@');
      END IF;
         
      -- Check the period control is opened (only if it is legal entity with accounting)
      -- Gets the BU or LE of the document
      SELECT AD_GET_DOC_LE_BU('C_CASH', v_Record_ID, 'C_CASH_ID', 'LE')
      INTO v_org_bule_id
      FROM DUAL;
      
      SELECT AD_OrgType.IsAcctLegalEntity
      INTO v_isacctle
      FROM AD_OrgType, AD_Org
      WHERE AD_Org.AD_OrgType_ID = AD_OrgType.AD_OrgType_ID
      AND AD_Org.AD_Org_ID=v_org_bule_id;
      
      IF (v_isacctle='Y') THEN
        SELECT C_CHK_OPEN_PERIOD(v_AD_Org_ID, v_dateCash, 'CMC', NULL) 
        INTO v_available_period
        FROM DUAL;
        
        IF (v_available_period<>1) THEN
          RAISE_APPLICATION_ERROR(-20000, '@PeriodNotAvailable@');
        END IF;
      END IF;
        
      v_ResultStr:='CheckingRestrictions - C_CASH ORG IS IN C_CASHBOOK ORG TREE';
      SELECT COUNT(*)
      INTO v_count
      FROM C_CASH,
        C_CASHBOOK
      WHERE C_CASH.C_CASHBOOK_ID=C_CASHBOOK.C_CASHBOOK_ID
        AND NOT (Ad_Isorgincluded(C_CASH.AD_ORG_ID, C_CASHBOOK.AD_ORG_ID, C_CASHBOOK.AD_CLIENT_ID)<>-1
	    OR Ad_Isorgincluded(C_CASHBOOK.AD_ORG_ID, C_CASH.AD_ORG_ID, C_CASHBOOK.AD_CLIENT_ID)<>-1)
        AND C_CASH_ID=v_Record_ID;
      IF v_count>0 THEN
        RAISE_APPLICATION_ERROR(-20000, '@NotCorrectOrgCashbook@') ;
      END IF;
    END IF;--FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN--To be Fixed. Cash type='O' is deprecated. Added by P.Sarobe
      v_ResultStr:='CheckingRestrictions - C_CASH ORG IS IN C_ORDER ORG TREE';
      SELECT COUNT(*),
        MAX(cl.Line)
      INTO v_count,
        v_line
      FROM C_CASH c,
        C_CASHLINE cl,
        C_ORDER o,
        C_BPARTNER bp
      WHERE c.C_CASH_ID=cl.C_CASH_ID
        AND c.C_CASH_ID=v_Record_ID
        AND cl.C_ORDER_ID=o.C_ORDER_ID
        AND o.C_BPARTNER_ID=bp.C_BPARTNER_ID
        AND (Ad_Isorgincluded(o.AD_ORG_ID, bp.AD_ORG_ID, bp.AD_CLIENT_ID)=-1
        OR Ad_Isorgincluded(o.AD_ORG_ID, c.AD_ORG_ID, c.AD_CLIENT_ID)=-1);
      IF v_count>0 THEN
        RAISE_APPLICATION_ERROR(-20000, '@Inline@'||v_line||' '||'@NotCorrectOrgOrderCashLine@') ;
      END IF;
    END IF;--FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      v_ResultStr:='CheckingRestrictions - C_CASH ORG IS IN C_DEBT_PAYMENT ORG TREE';
      SELECT COUNT(*),
        MAX(cl.Line)
      INTO v_count,
        v_line
      FROM C_CASH c,
        C_CASHLINE cl,
        C_DEBT_PAYMENT l,
        C_BPARTNER bp
      WHERE c.C_CASH_ID=cl.C_CASH_ID
        AND c.C_CASH_ID=v_Record_ID
        AND cl.C_DEBT_PAYMENT_ID=l.C_DEBT_PAYMENT_ID
        AND l.C_BPARTNER_ID=bp.C_BPARTNER_ID
        AND(Ad_Isorgincluded(l.AD_ORG_ID, bp.AD_ORG_ID, bp.AD_CLIENT_ID)=-1 --To be deprecated, to be fixed. This Check restriction should be checked when debt payment is created. Added by PSarobe
        OR Ad_Isorgincluded(l.AD_ORG_ID, c.AD_ORG_ID, c.AD_CLIENT_ID)=-1) ;
      IF v_count>0 THEN
        RAISE_APPLICATION_ERROR(-20000, '@Inline@'||v_line||' '||'@NotCorrectOrgDebtpaymentCashLine@') ;
      END IF;
    END IF;--FINISH_PROCESS
	--To be fixed. Cash type='O' to be deprecated. Added by P.Sarobe
    IF(NOT FINISH_PROCESS) THEN
      SELECT COUNT(*),
        MAX(cl.Line)
      INTO v_count,
        v_line
      FROM C_CASHLINE cl
      WHERE cl.C_Cash_ID=v_Record_ID
        AND cl.CASHTYPE='O'
        AND NOT EXISTS
        (SELECT 1
        FROM C_ORDERLINE ol
        WHERE ol.C_Order_ID=cl.C_Order_ID
          AND ol.QTYORDERED<>ol.QTYINVOICED
        )
        ;
      IF v_count>0 THEN
        v_Message:='@CashOrderInvoiced@. Line:'||v_line;
        v_Result:=0;
        FINISH_PROCESS:=true;
      END IF;
    END IF;--FINISH_PROCESS
	--Until here to be fixed, to be deprecated because of the cahstype='O'
    IF(NOT FINISH_PROCESS) THEN
      SELECT COUNT(*),
        MAX(cl.Line)
      INTO v_count,
        v_line
      FROM C_CASHLINE cl,
        C_DEBT_PAYMENT dp
      WHERE cl.C_Cash_ID=v_Record_ID
        AND cl.CASHTYPE='P'
        AND cl.C_Debt_Payment_ID=dp.C_Debt_Payment_ID
        AND cl.C_Currency_ID=dp.C_Currency_ID
        AND
        CASE dp.IsReceipt WHEN 'Y' THEN -- If IsReceipt = N, amount*-1
          (dp.Amount-coalesce(dp.WriteOffAmt,0)) ELSE (coalesce(dp.WriteOffAmt,0)-dp.Amount)
        END
        <>(cl.Amount+coalesce(cl.WriteOffAmt,0)) ;
      IF v_count>0 THEN
       RAISE_APPLICATION_ERROR(-20000, '@Inline@'||v_line||' '||'@DebtAmountsSamemoneyNoMatch@') ;
      END IF;
    END IF;--FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      SELECT COUNT(*),
        MAX(cl.Line)
      INTO v_count,
        v_line
      FROM C_CASHLINE cl,
        C_CASH c,
        C_DEBT_PAYMENT dp
      WHERE cl.C_Cash_ID=c.C_Cash_ID
        AND cl.C_Cash_ID=v_Record_ID
        AND cl.CASHTYPE='P'
        AND cl.C_Debt_Payment_ID=dp.C_Debt_Payment_ID
        AND cl.C_Currency_ID<>dp.C_Currency_ID
        AND
        CASE dp.IsReceipt WHEN 'Y' THEN -- If IsReceipt = N, amount*-1
          (coalesce(dp.Amount,0)-coalesce(dp.WriteOffAmt,0)) ELSE (coalesce(dp.WriteOffAmt,0)-coalesce(dp.Amount,0))
        END
        <>C_Currency_Round(C_Currency_Convert((coalesce(cl.Amount,0) + coalesce(cl.WriteOffAmt,0)), cl.C_Currency_ID, dp.C_Currency_ID, c.DateAcct, NULL, c.AD_Client_ID, c.AD_Org_ID), dp.C_Currency_ID, NULL) ;
      IF v_count>0 THEN
        RAISE_APPLICATION_ERROR(-20000, '@Inline@'||v_line||' '||'@DebtAmountsDifferentMoneyNoMatch@') ;
      END IF;
    END IF;--FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      SELECT COUNT(*), MAX(cl.C_CASHLINE_ID)
      INTO v_count, v_CashLine_ID
      FROM C_CASHLINE cl,
        C_DEBT_PAYMENT dp
      WHERE cl.C_Cash_ID=v_Record_ID
        AND cl.CASHTYPE='P'
        AND cl.C_Debt_Payment_ID=dp.C_Debt_Payment_ID
        AND C_Debt_Payment_Status(dp.C_SETTLEMENT_CANCEL_ID, dp.Cancel_Processed, dp.Generate_Processed, dp.IsPaid, dp.IsValid, dp.C_CashLine_ID, dp.C_BankStatementLine_ID) NOT IN('P', 'A') ;
		IF v_count!=0 THEN
		--Added by P.Sarobe. New messages
		  SELECT line, c_Debt_Payment_ID INTO v_line, v_C_Debt_Payment_Id
		  FROM C_CASHLINE WHERE C_CASHLINE_ID=v_CashLine_ID;

		  SELECT c_Bankstatementline_Id, c_cashline_id, c_settlement_cancel_id, ispaid, cancel_processed
		  INTO v_Bankstatementline_ID, v_CashLine_ID, v_Settlement_Cancel_ID, v_ispaid, v_Cancel_Processed
		  FROM C_DEBT_PAYMENT WHERE C_Debt_Payment_ID = v_C_Debt_Payment_Id;
		  	   IF v_Bankstatementline_ID IS NOT NULL THEN
			   	 SELECT C_BANKSTATEMENT.NAME, C_BANKSTATEMENT.STATEMENTDATE
				 INTO v_nameBankstatement, v_dateBankstatement
				 FROM C_BANKSTATEMENT, C_BANKSTATEMENTLINE
				 WHERE C_BANKSTATEMENT.C_BANKSTATEMENT_ID = C_BANKSTATEMENTLINE.C_BANKSTATEMENT_ID
				 AND C_BANKSTATEMENTLINE.C_BANKSTATEMENTLINE_ID = v_Bankstatementline_ID;
          		 RAISE_APPLICATION_ERROR(-20000, '@Inline@'||v_line||' '||'@ManagedDebtPaymentBank@'||v_nameBankstatement||' '||'@Bydate@'||v_dateBankstatement) ;
			   END IF;
			   IF v_CashLine_ID IS NOT NULL THEN--This is also checked in the unique index C_CASHLINE_DEBT_PAYMENT
			   	 SELECT C_CASH.NAME, C_CASH.STATEMENTDATE
				 INTO v_nameCash, v_dateCash
				 FROM C_CASH, C_CASHLINE
				 WHERE C_CASH.C_CASH_ID = C_CASHLINE.C_CASH_ID
				 AND C_CASHLINE.C_CASHLINE_ID = v_CashLine_ID;
          		 RAISE_APPLICATION_ERROR(-20000, '@Inline@'||v_line||' '||'@ManagedDebtPaymentCash@'||v_nameCash||' '||'@Bydate@'||v_dateCash) ;
			   END IF;
			   IF v_Cancel_Processed='Y' AND v_ispaid='N' THEN
			   	 SELECT documentno, datetrx
				 INTO v_documentno_Settlement, v_dateSettlement
				 FROM C_SETTLEMENT
				 WHERE C_SETTLEMENT_ID = v_Settlement_Cancel_ID;
				 RAISE_APPLICATION_ERROR(-20000, '@Inline@'||v_line||' '||'@ManagedDebtPaymentCancel@'||v_documentno_Settlement||' '||'@Bydate@'||v_dateSettlement) ;
			   END IF;
        END IF;
    END IF;--FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
	  SELECT COUNT(*), MAX(C_Debt_Payment_ID)
	  INTO v_count, v_C_Debt_Payment_Id
	  FROM
	  --Subquery checks if there are duplicates debt payments for the same cash
	  (SELECT dp.C_Debt_Payment_ID
        FROM C_CASHLINE cl,
          C_DEBT_PAYMENT dp
        WHERE cl.C_Cash_ID=v_Record_ID
          AND cl.CASHTYPE='P'
          AND cl.C_Debt_Payment_ID=dp.C_Debt_Payment_ID
        GROUP BY dp.C_Debt_Payment_ID
        HAVING COUNT(*)>1
		)A;
      IF v_count>0 THEN
	  --Added by PSarobe. This is also checked in the unique index C_CASHLINE_DEBT_PAYMENT
	  	 FOR Cur_CashlineDebtpayment IN (SELECT line
		 	 						 	FROM c_cashline
										WHERE c_cashline.c_cash_id=v_Record_ID
										AND c_cashline.c_debt_payment_id=v_C_Debt_Payment_Id) LOOP
		 v_Message:=v_Message||Cur_CashlineDebtpayment.line||', ';
		 END LOOP;
		 RAISE_APPLICATION_ERROR(-20000, '@Inlines@'||v_Message||' '||'@Samedebtpayment@') ;
      END IF;
    END IF;--FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN --To be fixed because of cashtype='O'. Cashtype='O' to be deprecated
      SELECT COUNT(*),
        MAX(Line)
      INTO v_count,
        v_line
      FROM C_CASHLINE cl
      WHERE cl.C_Cash_ID=v_Record_ID
        AND((cl.CASHTYPE='O'
        AND C_ORDER_ID IS NULL)
        OR(cl.CASHTYPE='P'
        AND C_DEBT_PAYMENT_ID IS NULL)
        OR(cl.CASHTYPE NOT IN('O', 'P')
        AND(C_ORDER_ID IS NOT NULL
        OR C_DEBT_PAYMENT_ID IS NOT NULL))) ;
      IF v_count>0 THEN
        RAISE_APPLICATION_ERROR(-20000, '@Inline@'||v_line||' '||'@WrongLineTypeAndReferenceCash@');
      END IF;
    END IF;--FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      /**
      *  Generate C_debt_payment for cashline with order type
      */
      /* Now this goes to c_order_post ALO
      DECLARE
      v_debtPaymentID varchar2(32);
      CurCashLinesOrder RECORD;
      BEGIN
      FOR CurCashLinesOrder IN (SELECT o.AD_CLIENT_ID, o.AD_ORG_ID, o.ISSOTRX, o.DOCUMENTNO, bp.NAME, o.POREFERENCE, o.C_ORDER_ID, o.C_BPARTNER_ID,
      o.C_CURRENCY_ID, cl.C_CASHLINE_ID, o.PAYMENTRULE, C_Currency_Convert((cl.Amount + cl.WriteOffAmt),
      cl.C_Currency_ID, o.C_Currency_ID, c.DateAcct, NULL, c.AD_Client_ID, c.AD_Org_ID) AMT,
      c.STATEMENTDATE, o.C_PROJECT_ID
      FROM C_CASHLINE cl, C_ORDER o, C_BPARTNER bp, C_CASH c
      WHERE cl.C_ORDER_ID = o.C_ORDER_ID
      AND cl.C_CASH_ID = v_Record_ID
      AND bp.C_BPARTNER_ID = o.C_BPARTNER_ID
      AND C.C_CASH_ID = cl.C_CASH_id) LOOP
      Ad_Sequence_Next('C_Debt_Payment', v_Record_ID, v_debtPaymentID);
      INSERT INTO C_DEBT_PAYMENT(C_DEBT_PAYMENT_ID, AD_CLIENT_ID, AD_ORG_ID, ISACTIVE, CREATED, CREATEDBY, UPDATED, UPDATEDBY,
      ISRECEIPT, C_SETTLEMENT_CANCEL_ID, C_SETTLEMENT_GENERATE_ID, DESCRIPTION,
      C_ORDER_ID, C_BPARTNER_ID,
      C_CURRENCY_ID, C_CASHLINE_ID, C_BANKACCOUNT_ID, C_CASHBOOK_ID, PAYMENTRULE,
      ISPAID, AMOUNT, WRITEOFFAMT, DATEPLANNED, ISMANUAL, ISVALID,
      C_BANKSTATEMENTLINE_ID, CHANGESETTLEMENTCANCEL, CANCEL_PROCESSED, GENERATE_PROCESSED, c_project_id)
      VALUES
      (v_debtPaymentID, CurCashLinesOrder.AD_CLIENT_ID, CurCashLinesOrder.AD_ORG_ID, 'Y', now(), v_User, now(), v_User,
      CurCashLinesOrder.IsSOTrx, NULL, NULL, 'Order No: ' || CurCashLinesOrder.DOCUMENTNO || ' (' || CurCashLinesOrder.Name || (CASE WHEN CurCashLinesOrder.POREFERENCE IS NULL THEN '' ELSE ' .Ref:'||TO_CHAR(CurCashLinesOrder.POREFERENCE) END) || ')',
      CurCashLinesOrder.C_ORDER_ID, CurCashLinesOrder.C_BPartner_ID,
      CurCashLinesOrder.C_CURRENCY_ID, NULL,NULL,v_C_CashBook_ID, CurCashLinesOrder.PAYMENTRULE,
      'N',(CASE CurCashLinesOrder.IsSOTrx WHEN 'Y' THEN CurCashLinesOrder.AMT ELSE (-1)*CurCashLinesOrder.AMT END),0,CurCashLinesOrder.STATEMENTDATE,'N','Y',
      NULL,'N','N','N',CurCashLinesOrder.C_PROJECT_ID);
      UPDATE C_CASHLINE
      SET C_DEBT_PAYMENT_ID = v_debtPaymentID,
              Updated=now(),
              UpdatedBy=v_User
      WHERE C_CASHLINE_ID = CurCashLinesOrder.C_CASHLINE_ID;
      END LOOP;
      END;
      */
      /**
      *  Generate C_Settlement
      */
      SELECT COUNT(*)
      INTO v_count
      FROM C_CASHLINE cl,
        C_DEBT_PAYMENT dp
      WHERE cl.C_Cash_ID=v_Record_ID
        AND cl.CASHTYPE IN('O', 'P')
        AND cl.C_Debt_Payment_ID=dp.C_Debt_Payment_ID
        AND C_Debt_Payment_Status(dp.C_SETTLEMENT_CANCEL_ID, dp.Cancel_Processed, dp.Generate_Processed, dp.IsPaid, dp.IsValid, dp.C_CashLine_ID, dp.C_BankStatementLine_ID)='P';
      v_ResultStr:='GettingCashBookInfo';
      SELECT cb.C_Currency_ID,
        c.DateAcct
      INTO v_CB_Currency_ID,
        v_CB_Date
      FROM C_CASHBOOK cb,
        C_CASH c
      WHERE cb.C_CashBook_ID=c.C_CashBook_ID
        AND c.C_Cash_ID=v_Record_ID;
      IF(v_count>0) THEN
        v_SettlementDocType_ID:=Ad_Get_DocType(v_AD_Client_ID, v_AD_Org_ID, 'STT') ;
        Ad_Sequence_Next('C_Settlement', v_Record_ID, v_settlementID) ;
        Ad_Sequence_Doctype(v_SettlementDocType_ID, v_Record_ID, 'Y', v_DocumentNo) ;
        IF(v_DocumentNo IS NULL) THEN
          Ad_Sequence_Doc('DocumentNo_C_Settlement', v_AD_Client_ID, 'Y', v_DocumentNo) ;
        END IF;
        INSERT
        INTO C_SETTLEMENT
          (
            C_SETTLEMENT_ID, AD_CLIENT_ID, AD_ORG_ID, ISACTIVE,
            CREATED, CREATEDBY, UPDATED, UPDATEDBY,
            DOCUMENTNO, DATETRX, DATEACCT, SETTLEMENTTYPE,
            C_DOCTYPE_ID, PROCESSING, PROCESSED, POSTED,
            C_CURRENCY_ID, C_PROJECT_ID, C_CAMPAIGN_ID, C_ACTIVITY_ID,
            USER1_ID, USER2_ID, CREATEFROM, ISGENERATED
          )
        SELECT v_settlementID,
          AD_Client_ID, AD_Org_ID, 'Y', now(),
          v_User, now(), v_User, '*CP*'||v_DocumentNo,
          v_CB_Date, v_CB_Date, 'B', v_SettlementDocType_ID,
           'N', 'N', 'N', v_CB_Currency_ID,
          C_PROJECT_ID, C_CAMPAIGN_ID, C_ACTIVITY_ID, USER1_ID,
          USER2_ID, 'N', 'Y'
        FROM C_CASH
        WHERE C_Cash_ID=v_Record_ID;
        UPDATE C_DEBT_PAYMENT
          SET C_SETTLEMENT_CANCEL_ID=v_settlementID,
          IsPaid='Y',
          Updated=now(),
          UpdatedBy=v_User
        WHERE C_DEBT_PAYMENT.C_Debt_Payment_ID IN
          (SELECT C_Debt_Payment_ID FROM C_CASHLINE WHERE C_Cash_ID=v_Record_ID)
          AND C_Debt_Payment_Status(C_DEBT_PAYMENT.C_SETTLEMENT_CANCEL_ID, C_DEBT_PAYMENT.Cancel_Processed, C_DEBT_PAYMENT.Generate_Processed, C_DEBT_PAYMENT.IsPaid, C_DEBT_PAYMENT.IsValid, C_DEBT_PAYMENT.C_CashLine_ID, C_DEBT_PAYMENT.C_BankStatementLine_ID)='P';
        C_SETTLEMENT_POST(NULL, v_settlementID) ;
      END IF;
    END IF;--FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      /**
      *  Update Balances + De-Activate + Conciliate Debt_Payments
      */
      DECLARE
        v_Total NUMBER:=0;
        v_Currency_ID VARCHAR2(32):=NULL;
        -- Lines
        Cur_Lines RECORD;
      BEGIN
        -- Calculate Tital
        FOR Cur_Lines IN
          (SELECT *  FROM C_CASHLINE  WHERE C_Cash_ID=v_Record_ID)
        LOOP
          v_ResultStr:='GettingTrxCurrency';
          -- Get Debt_Payment Currency and conciliate Debt/Payments
          IF(Cur_Lines.CashType IN('O', 'P') AND Cur_Lines.C_Debt_Payment_ID IS NOT NULL) THEN
            UPDATE C_DEBT_PAYMENT
              SET C_CashLine_ID=Cur_Lines.C_CashLine_ID,
              Updated=now(),
              UpdatedBy=v_User
            WHERE C_Debt_Payment_ID=Cur_Lines.C_Debt_Payment_ID;
            SELECT C_Currency_ID
            INTO v_Currency_ID
            FROM C_DEBT_PAYMENT
            WHERE C_Debt_Payment_ID=Cur_Lines.C_Debt_Payment_ID;
          END IF;
          -- Assume CashBook Currency for Charge
          /* Lines are in cashbook currency
     IF(v_Currency_ID IS NULL) THEN
            v_Currency_ID:=v_CB_Currency_ID;
          END IF;
          v_ResultStr:='CalculatingSum';
          IF(v_Currency_ID<>v_CB_Currency_ID) THEN
            v_Total:=v_Total + C_Currency_Convert(Cur_Lines.Amount, v_Currency_ID, v_CB_Currency_ID, v_CB_Date, NULL, Cur_Lines.AD_Client_ID, Cur_Lines.AD_Org_ID) ;
          ELSE
            v_Total:=v_Total + Cur_Lines.Amount;
          END IF;
     */
     v_Total:=v_Total + Cur_Lines.Amount;
        END LOOP;
        --
        DBMS_OUTPUT.PUT_LINE('CashJournal Complete - Total=' || v_Total) ;
        v_ResultStr:='UpdatingRecord';
        UPDATE C_CASH
          SET StatementDifference=v_Total,
          EndingBalance=BeginningBalance + v_Total,
          Processed='Y',
          Updated=now(),
          UpdatedBy=v_User
        WHERE C_Cash_ID=v_Record_ID;
        -- Synchronize Client/Org Ownership
        UPDATE C_CASHLINE
          SET AD_Client_ID=v_AD_Client_ID,
          AD_Org_ID=v_AD_Org_ID,
          Updated=now(),
          UpdatedBy=v_User
        WHERE C_Cash_ID=v_Record_ID
          AND(AD_Client_ID<>v_AD_Client_ID
          OR AD_Org_ID<>v_AD_Org_ID) ;
      END;
    END IF;--FINISH_PROCESS
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, v_User, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END C_CASH_POST
]]></body>
    </function>
  </database>
