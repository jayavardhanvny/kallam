<?xml version="1.0"?>
  <database name="FUNCTION M_MOVE_LOCATOR">
    <function name="M_MOVE_LOCATOR" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2006 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    -- Lines to create
    Cur_MovementLine RECORD;
    -- Parameter Variables
    v_AD_User_ID VARCHAR2(32) ;
    v_LocatorFrom  VARCHAR2(32);
    v_LocatorTo VARCHAR2(32) ;
    v_ClientID varchar2(32) ;
    v_OrgID varchar2(32) ;
    v_Processed VARCHAR2(60) ;
    v_MovementLine_ID VARCHAR2(32) ;
    v_LineNo NUMBER(10) ;
    END_PROCESS BOOLEAN:=false;
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date,
        i.CreatedBy AS AD_User_ID
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
      IF(Cur_Parameter.ParameterName='M_LocatorFrom') THEN
        v_LocatorFrom:=Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE(' M_LocatorFrom=' || v_LocatorFrom) ;
      ELSIF(Cur_Parameter.ParameterName='M_LocatorTo') THEN
        v_LocatorTo:=Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE(' M_LocatorTo=' || v_LocatorTo) ;
      ELSE
        DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || Cur_Parameter.ParameterName) ;
      END IF;
    END LOOP; -- Get Parameter
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
    -- Reading Movement
    SELECT AD_Client_ID,
      AD_Org_ID,
      Processed
    INTO v_ClientID,
      v_OrgID,
      v_Processed
    FROM M_Movement
    WHERE M_Movement_ID=v_Record_ID  FOR UPDATE;
    IF(v_Processed='Y') THEN
      v_Message:='@AlreadyPosted@';
      END_PROCESS:=true;
    END IF;
    IF(NOT END_PROCESS) THEN
      SELECT COALESCE(MAX(Line), 0)
      INTO v_LineNo
      FROM M_MovementLine
      WHERE M_Movement_ID=v_Record_ID;
      FOR Cur_MovementLine IN
        (SELECT T.M_PRODUCT_ID,
          T.C_UOM_ID,
          T.M_PRODUCT_UOM_ID,
          T.M_LOCATOR_ID,
          T.M_ATTRIBUTESETINSTANCE_ID,
          T.QTYONHAND AS QTY,
          T.QTYORDERONHAND AS QTYORDER
        FROM M_STORAGE_DETAIL T
        WHERE M_LOCATOR_ID=v_LocatorFrom
          AND(T.QTYONHAND<>0
          OR COALESCE(T.QTYORDERONHAND, 0)<>0)
        ORDER BY QTY DESC
        )
      LOOP
        Ad_Sequence_Next('M_MovementLine', v_ClientID, v_MovementLine_ID) ;
        v_LineNo:=v_LineNo + 10;
        INSERT
        INTO M_MOVEMENTLINE
          (
            M_MOVEMENTLINE_ID, AD_CLIENT_ID, AD_ORG_ID, ISACTIVE,
            CREATED, CREATEDBY, UPDATED, UPDATEDBY,
            M_MOVEMENT_ID, M_LOCATOR_ID, M_LOCATORTO_ID, M_PRODUCT_ID,
            LINE, MOVEMENTQTY, DESCRIPTION, M_ATTRIBUTESETINSTANCE_ID,
            M_PRODUCT_UOM_ID, QUANTITYORDER, C_UOM_ID
          )
          VALUES
          (
            v_MovementLine_ID, v_ClientID, v_OrgID, 'Y',
            now(), v_AD_User_ID, now(), v_AD_User_ID,
            v_Record_ID, v_LocatorFrom, v_LocatorTo, Cur_MovementLine.M_Product_ID,
            v_LineNo, Cur_MovementLine.QTY, NULL, Cur_MovementLine.M_ATTRIBUTESETINSTANCE_ID,
            Cur_MovementLine.M_PRODUCT_UOM_ID, Cur_MovementLine.QTYORDER, Cur_MovementLine.C_UOM_ID
          )
          ;
      END LOOP;
    END IF;--END_PROCESS
    --<<END_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END M_MOVE_LOCATOR
]]></body>
    </function>
  </database>
