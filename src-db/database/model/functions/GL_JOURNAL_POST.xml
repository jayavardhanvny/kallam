<?xml version="1.0"?>
  <database name="FUNCTION GL_JOURNAL_POST">
    <function name="GL_JOURNAL_POST" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_gl_journal_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SLU
  * Contributions are Copyright (C) 2001-2012 Openbravo, S.L.U.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: GL_Journal_Post.sql,v 1.2 2002/05/22 02:48:28 jjanke Exp $
  ***
  * Title: GL Journal Post (preparation)
  * Description:
  * - Check Control Amount
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_DateAcctBelongsToPeriod NUMBER;
  v_Record_ID VARCHAR2(32);
  v_AD_User_ID VARCHAR2(32);
  v_AD_Org_ID VARCHAR2(32);
  v_C_Period_ID VARCHAR2(32);
  v_DateAcct DATE;
  v_DocType_ID VARCHAR2(32);
  v_BatchOrg_ID VARCHAR2(32);
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_Org_Lines RECORD;
    -- Parameter Variables
    -- Other Variables
    v_DocStatus GL_Journal.DocStatus%TYPE;
    v_DocAction GL_Journal.DocAction%TYPE;
    v_Processing GL_Journal.Processing%TYPE;
    v_Posted GL_Journal.Posted%TYPE;
    v_TotalDr GL_Journal.TotalDr%TYPE;
    v_TotalCr GL_Journal.TotalCr%TYPE;
    v_ControlAmt GL_Journal.ControlAmt%TYPE;
    FINISH_PROCESS BOOLEAN:=false;
    v_is_included NUMBER:=0;
    v_available_period NUMBER:=0;
    v_is_ready AD_Org.IsReady%TYPE;
    v_is_tr_allow AD_OrgType.IsTransactionsAllowed%TYPE;
    v_isacctle AD_OrgType.IsAcctLegalEntity%TYPE;
    v_org_bule_id AD_Org.AD_Org_ID%TYPE;
    v_documentNo GL_Journal.DocumentNo%TYPE;
    
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    IF(p_PInstance_ID IS NOT NULL) THEN
      v_ResultStr:='PInstanceNotFound';
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,
          i.AD_User_ID,
          p.ParameterName,
          p.P_String,
          p.P_Number,
          p.P_Date
        FROM AD_PInstance i
        LEFT JOIN AD_PInstance_Para p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_AD_User_ID:=Cur_Parameter.AD_User_ID;
      END LOOP; -- Get Parameter
    ELSE
      v_Record_ID:=p_GL_Journal_ID;
    END IF;
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
  BEGIN --BODY
    /**
    * Status - Actions
    * DR   CO, VO
    * CO   CL
    */
    v_ResultStr:='ReadingJournal';
    SELECT DocStatus,
      DocAction,
      Processing,
      Posted, AD_Org_ID, DateAcct, C_DocType_ID,
      C_Period_ID
    INTO v_DocStatus,
      v_DocAction,
      v_Processing,
      v_Posted, v_AD_Org_ID, v_DateAcct, v_DocType_ID,
      v_C_Period_ID
    FROM GL_Journal
    WHERE GL_Journal_ID=v_Record_ID  FOR UPDATE;
    /**
    * Closed, Voided or Reversed - No action possible
    */
    IF(v_DocStatus IN('CL', 'VO', 'RE')) THEN
      RAISE_APPLICATION_ERROR(-20000, '@AlreadyPosted@') ;
    END IF;
    /**
    * Unlock
    */
    IF(NOT FINISH_PROCESS) THEN
      IF(v_DocAction='XL') THEN
        UPDATE GL_Journal
          SET Processing='N',
          DocAction='--',
          Updated=now(),
          UpdatedBy=v_AD_User_ID
        WHERE GL_Journal_ID=v_Record_ID;
        FINISH_PROCESS:=true;
      END IF;
    END IF; --FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      IF(v_Processing='Y') THEN
        RAISE_APPLICATION_ERROR(-20000, '@OtherProcessActive@') ;
      END IF;
    END IF; --FINISH_PROCESS
    /**
    * Close Order
    */
    IF(NOT FINISH_PROCESS) THEN
      IF(v_DocAction='CL') THEN
        UPDATE GL_Journal
          SET DocStatus='CL',
          DocAction='--',
          Processed='Y',
          Updated=now(),
          UpdatedBy=v_AD_User_ID
        WHERE GL_Journal_ID=v_Record_ID;
        FINISH_PROCESS:=true;
      END IF;
    END IF; --FINISH_PROCESS
    /**
    * Void Order
    */
    IF(NOT FINISH_PROCESS) THEN
      IF(v_DocAction='VO' AND v_DocStatus='DR') THEN
        -- Cancel all Lines
        UPDATE GL_JournalLine
          SET IsActive='N',
          Updated=now()
        WHERE GL_Journal_ID=v_Record_ID;
        UPDATE GL_Journal
          SET DocStatus='VO',
          DocAction='--',
          Processed='Y',
          Updated=now()
        WHERE GL_Journal_ID=v_Record_ID;
        FINISH_PROCESS:=true;
      END IF;
    END IF; --FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      IF(v_DocAction='RE') THEN
        IF(v_Posted='Y') THEN
          RAISE_APPLICATION_ERROR(-20000, '@GLJournalDocumentPosted@') ;
        END IF;
        IF(NOT FINISH_PROCESS) THEN
            UPDATE GL_Journal
              SET DocStatus='DR',
              DocAction='CO',
              Processed='N',
              Updated=now()
            WHERE GL_Journal_ID=v_Record_ID;
            FINISH_PROCESS:=true;
        END IF;
      END IF;
    END IF; --FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      --  Lock journal comes here
      /**
      * Process Journal
      */
      -- Check the header belongs to a organization where transactions are posible and ready to use
      SELECT AD_Org.IsReady, Ad_OrgType.IsTransactionsAllowed
      INTO v_is_ready, v_is_tr_allow
      FROM GL_JOURNAL, AD_Org, AD_OrgType
      WHERE AD_Org.AD_Org_ID=GL_JOURNAL.AD_Org_ID
      AND AD_Org.AD_OrgType_ID=AD_OrgType.AD_OrgType_ID
      AND GL_JOURNAL.GL_JOURNAL_ID=v_Record_ID;
      IF (v_is_ready='N') THEN
        RAISE_APPLICATION_ERROR(-20000, '@OrgHeaderNotReady@');
      END IF;
      IF (v_is_tr_allow='N') THEN
        RAISE_APPLICATION_ERROR(-20000, '@OrgHeaderNotTransAllowed@');
      END IF;

      -- Check if the gl journal has lines.
     
      SELECT max(documentNo) INTO v_documentNo
      FROM GL_Journal
      WHERE EXISTS (SELECT 1
                    FROM GL_JournalLine
                    WHERE GL_JournalLine.GL_Journal_ID = GL_Journal.GL_Journal_ID
                    AND GL_JournalLine.GL_Journal_ID = v_Record_ID);

      IF (v_documentno IS NULL) THEN
        SELECT documentNo INTO v_documentNo
        FROM GL_Journal
        WHERE GL_Journal_ID = v_Record_ID;
        
        RAISE_APPLICATION_ERROR(-20000, '@GLJournalHasNoLines@' || ' ' || v_DocumentNo);
      END IF;
      
      SELECT AD_ORG_CHK_DOCUMENTS('GL_JOURNAL', 'GL_JOURNALLINE', v_Record_ID, 'GL_JOURNAL_ID', 'GL_JOURNAL_ID') INTO v_is_included FROM dual;
      IF (v_is_included=-1) THEN
        RAISE_APPLICATION_ERROR(-20000, '@LinesAndHeaderDifferentLEorBU@');
      END IF;   

      FOR Cur_Org_Lines IN
        (SELECT gll.ad_org_id,
             gll.ad_client_id
        FROM gl_journalline gll
        WHERE gll.gl_journal_id = v_Record_id
        )
      LOOP
        SELECT AD_ISORGINCLUDED(Cur_Org_Lines.ad_org_id, v_AD_Org_ID, Cur_Org_Lines.ad_client_id)
        INTO v_is_included
        FROM DUAL;

        IF (v_is_included=-1) THEN
          RAISE_APPLICATION_ERROR(-20000, '@ForcedOrgNotMatchDocument@');
        END IF;
      END LOOP;

      SELECT ad_org_id
      INTO v_BatchOrg_ID
      FROM gl_journalbatch
      WHERE gl_journalbatch_id = (select gl_journalbatch_id
                                 from gl_journal
                                 where gl_journal_id = v_Record_id);
      
      IF (v_BatchOrg_ID <> v_AD_Org_ID) THEN
        RAISE_APPLICATION_ERROR(-20000, '@BatchAndHeaderDifferentOrg@');
      END IF;
      
      -- Check if the Accounting Date belongs to the Period

      SELECT COUNT(*) INTO v_DateAcctBelongsToPeriod
  	  FROM c_period p
      WHERE p.c_period_id = v_C_Period_ID
      AND v_DateAcct BETWEEN p.startdate AND p.enddate;

      IF v_DateAcctBelongsToPeriod < 1 THEN
          RAISE_APPLICATION_ERROR(-20000, '@PeriodNotValid@');
      END IF;

      -- Check the period control is opened (only if it is legal entity with accounting)
      -- Gets the BU or LE of the document
      SELECT AD_GET_DOC_LE_BU('GL_JOURNAL', v_Record_ID, 'GL_JOURNAL_ID', 'LE')
      INTO v_org_bule_id
      FROM DUAL;
      
      SELECT AD_OrgType.IsAcctLegalEntity
      INTO v_isacctle
      FROM AD_OrgType, AD_Org
      WHERE AD_Org.AD_OrgType_ID = AD_OrgType.AD_OrgType_ID
      AND AD_Org.AD_Org_ID=v_org_bule_id;
      
      IF (v_isacctle='Y') THEN     	
        SELECT C_CHK_OPEN_PERIOD_GLJ(v_AD_Org_ID, v_C_Period_ID) 
        INTO v_available_period
        FROM DUAL;
        
        IF (v_available_period<>1) THEN
          RAISE_APPLICATION_ERROR(-20000, '@PeriodNotAvailable@');
        END IF;
      END IF;   
      
      -- Recalculate Totals
      v_ResultStr:='RecalculateTotals';
      UPDATE GL_Journal
        SET TotalDr=
        (SELECT COALESCE(SUM(AmtSourceDr), 0)
        FROM GL_JournalLine
        WHERE GL_Journal_ID=v_Record_ID
          AND IsActive='Y'
        )
        ,
        TotalCr=
        (SELECT COALESCE(SUM(AmtSourceCr), 0)
        FROM GL_JournalLine
        WHERE GL_Journal_ID=v_Record_ID
          AND IsActive='Y'
        )
      WHERE GL_Journal_ID=v_Record_ID;
      v_ResultStr:='ReadingAmounts';
      SELECT ControlAmt,
        TotalDr,
        TotalCr
      INTO v_ControlAmt,
        v_TotalDr,
        v_TotalCr
      FROM GL_Journal
      WHERE GL_Journal_ID=v_Record_ID  FOR UPDATE;
      IF(v_TotalDr<>v_TotalCr) THEN
        RAISE_APPLICATION_ERROR(-20000, '@DistinctAmtError@') ;
      END IF;
    END IF; --FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      -- Check ControlAmt
      IF(v_ControlAmt<>0 AND(v_ControlAmt<>v_TotalDr)) THEN
        RAISE_APPLICATION_ERROR(-20000, '@ControlAmtError@') ;
      ELSE
        UPDATE GL_Journal
          SET DocStatus='CO',
          DocAction='--',
          Processed='Y',
          Updated=now()
        WHERE GL_Journal_ID=v_Record_ID;
      END IF;
    END IF; --FINISH_PROCESS
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    IF(p_PInstance_ID IS NOT NULL) THEN
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  ELSE
    RAISE;
  END IF;
  RETURN;
END GL_JOURNAL_POST
]]></body>
    </function>
  </database>
