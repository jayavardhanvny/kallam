<?xml version="1.0"?>
  <database name="FUNCTION C_GENERATESOFROMPROJECTORDER">
    <function name="C_GENERATESOFROMPROJECTORDER" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2006 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID VARCHAR2(32);
  v_AD_User_ID VARCHAR2(32);
  v_M_PriceList_ID2 VARCHAR2(32);
  v_fin_paymentmethod_id C_BPARTNER.FIN_PAYMENTMETHOD_ID%TYPE;
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    v_C_Order_ID VARCHAR2(32);
    v_C_OrderLine_ID VARCHAR2(32);
    v_C_DOCTYPE_ID VARCHAR2(32);
    v_DocumentNo VARCHAR(40);
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get PARAMETERS
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, i.AD_User_ID, i.AD_Client_ID, i.AD_Org_ID, p.ParameterName,
        p.P_String, p.P_Number, p.P_Date, p.P_Date_To
      FROM AD_PINSTANCE i
      LEFT JOIN AD_PINSTANCE_PARA p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
    END LOOP; -- Get Parameter
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
    DECLARE
      v_Size NUMBER;
      v_UOM VARCHAR2(32);
      v_PriceStd NUMBER;
      v_PriceList NUMBER;
      v_PriceLimit NUMBER;
      v_C_UOM_ID VARCHAR2(32);
      v_C_Currency_ID VARCHAR2(32);
      v_M_PriceList_ID VARCHAR2(32);
    TYPE RECORD IS REF CURSOR;
      Cur_SO RECORD;
      SOLINES RECORD;
      FINISH_PROCESS BOOLEAN:=FALSE;
    BEGIN
      v_ResultStr:='StartLoop';
      FOR Cur_SO IN
        (SELECT * FROM C_PROJECT WHERE C_PROJECT_ID=v_Record_ID)
      LOOP
        -- Check that we have some restrictions
        v_ResultStr:='CheckRestriction';
        IF(Cur_SO.PROJECTSTATUS IS NULL OR Cur_SO.PROJECTSTATUS<>'OR') THEN
          RAISE_APPLICATION_ERROR(-20000, '@Invalidprojectstatus@');
        END IF;
        IF(NOT FINISH_PROCESS) THEN
          v_C_Order_ID:=Ad_Sequence_Nextno('C_Order') ;
          v_ResultStr:='C_ORDER_ID - ' || v_C_Order_ID;
          v_C_DOCTYPE_ID:=Ad_Get_Doctype(Cur_SO.AD_Client_ID, Cur_SO.AD_Org_ID, 'SOO', 'SO') ;
          v_ResultStr:='C_DOCTYPE_ID - ' || v_C_DOCTYPE_ID;
          Ad_Sequence_Doctype(v_C_DOCTYPE_ID, Cur_SO.AD_Client_ID, 'Y', v_DocumentNo) ;
          IF(v_DocumentNo IS NULL) THEN
            Ad_Sequence_Doc('DocumentNo_C_Order', Cur_SO.AD_Client_ID, 'Y', v_DocumentNo) ;
          END IF;
          SELECT M_PriceList_ID
        INTO v_M_PriceList_ID2
        FROM M_PRICELIST_VERSION
        WHERE M_PriceList_Version_ID=Cur_SO.M_PRICELIST_VERSION_ID;
        SELECT fin_paymentmethod_id INTO v_fin_paymentmethod_id
        FROM C_BPARTNER
        WHERE C_BPartner_ID = Cur_SO.C_BPARTNER_ID;
        v_ResultStr:='DocumentNo - ' || v_DocumentNo || ' m_pricelist_id - ' || COALESCE(Cur_SO.m_pricelist_id, v_M_Pricelist_ID2);
          INSERT
          INTO C_ORDER
            (
              C_ORDER_ID, AD_CLIENT_ID, AD_ORG_ID, CREATEDBY,
              UPDATEDBY, ISSOTRX, DOCUMENTNO, DOCSTATUS,
              DOCACTION, C_DOCTYPE_ID, C_DOCTYPETARGET_ID, DATEORDERED,
              DATEACCT, C_BPARTNER_ID, C_BPARTNER_LOCATION_ID, ISDISCOUNTPRINTED,
              C_CURRENCY_ID, PAYMENTRULE, C_PAYMENTTERM_ID, INVOICERULE,
              DELIVERYRULE, FREIGHTCOSTRULE, DELIVERYVIARULE, PRIORITYRULE,
              TOTALLINES, GRANDTOTAL, M_WAREHOUSE_ID, M_PRICELIST_ID,
              ISTAXINCLUDED, POSTED, PROCESSING, SALESREP_ID,
              BILLTO_ID, C_CAMPAIGN_ID, C_PROJECT_ID, AD_USER_ID,
              COPYFROM, DATEPROMISED, FIN_PAYMENTMETHOD_ID
            )
            VALUES
            (
              v_C_Order_ID, Cur_SO.AD_CLIENT_ID, Cur_SO.AD_ORG_ID, v_AD_User_ID,
              v_AD_User_ID, 'Y', v_DocumentNo, 'DR',
               'CO', '0', v_C_DOCTYPE_ID, TRUNC(now(), 'DD'),
              TRUNC(now(), 'DD'), Cur_SO.C_BPARTNER_ID, Cur_SO.C_BPARTNER_LOCATION_ID, 'N',
              Cur_SO.C_CURRENCY_ID, COALESCE(Cur_SO.PAYMENTRULE, 'P'), Cur_SO.C_PAYMENTTERM_ID, 'D',
               'A', 'I', 'D', '5',
              0, 0, Cur_SO.M_WAREHOUSE_ID, COALESCE(Cur_SO.M_PRICELIST_ID, v_M_PriceList_ID2),
               'N', 'N', 'N', Cur_SO.SALESREP_ID,
              Cur_SO.BILLTO_ID, Cur_SO.C_CAMPAIGN_ID, Cur_SO.C_PROJECT_ID, Cur_SO.AD_User_ID,
               'N', TRUNC(now(), 'DD'), COALESCE(Cur_SO.FIN_PAYMENTMETHOD_ID, v_fin_paymentmethod_id)
            )
            ;
          FOR SOLINES IN
            (SELECT * FROM C_PROJECTLINE WHERE C_PROJECT_ID=v_Record_ID)
          LOOP
            IF(SOLINES.M_PRODUCT_ID IS NOT NULL AND Cur_SO.M_PRICELIST_VERSION_ID IS NOT NULL) THEN
              v_ResultStr:='SOLINES1 - SO.M_PRICELIST_VERSION_ID - ' || Cur_SO.M_PRICELIST_VERSION_ID || ' - ' || SOLINES.M_PRODUCT_ID;
              SELECT COUNT(p.C_UOM_ID)
              INTO v_Size
              FROM M_PRODUCT p,
                M_PRODUCTPRICE pp,
                M_PRICELIST_VERSION pv,
                M_PRICELIST pl
              WHERE p.M_Product_ID=pp.M_Product_ID
                AND pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID
                AND pv.M_PriceList_ID=pl.M_PriceList_ID
                AND pv.IsActive='Y'
                AND p.M_Product_ID=SOLINES.M_PRODUCT_ID
                AND pv.M_PriceList_Version_ID=Cur_SO.M_PRICELIST_VERSION_ID;
              IF(v_Size>0) THEN
                SELECT M_BOM_PriceStd(p.M_Product_ID, pv.M_PriceList_Version_ID) AS PriceStd,
                  M_BOM_PriceList(p.M_Product_ID, pv.M_PriceList_Version_ID) AS PriceList,
                  M_BOM_PriceLimit(p.M_Product_ID, pv.M_PriceList_Version_ID) AS PriceLimit,
                  p.C_UOM_ID, pl.C_Currency_ID
                INTO v_PriceStd, v_PriceList, v_PriceLimit, v_C_UOM_ID, v_C_Currency_ID
                FROM M_PRODUCT p, M_PRODUCTPRICE pp,M_PRICELIST_VERSION pv,M_PRICELIST pl
                WHERE p.M_Product_ID=pp.M_Product_ID
                  AND pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID
                  AND pv.M_PriceList_ID=pl.M_PriceList_ID
                  AND pv.IsActive='Y'
                  AND p.M_Product_ID=SOLINES.M_PRODUCT_ID
                  AND pv.M_PriceList_Version_ID=Cur_SO.M_PRICELIST_VERSION_ID;
              END IF;
            END IF;
            IF(SOLINES.M_PRODUCT_ID IS NOT NULL AND v_PriceStd IS NULL AND v_PriceList IS NULL AND v_PriceLimit IS NULL AND v_C_UOM_ID IS NULL AND v_C_Currency_ID IS NULL) THEN
              v_ResultStr:='SOLINES - v_PriceStd - ' || v_PriceStd;
              IF(Cur_SO.M_PRICELIST_ID IS NULL) THEN
                SELECT M_PriceList_ID
                INTO v_M_PriceList_ID
                FROM M_PRICELIST pl,
                  M_PRODUCT p
                WHERE pl.AD_Client_ID=p.AD_Client_ID
                  AND M_Product_ID=SOLINES.M_PRODUCT_ID
                ORDER BY IsDefault DESC;
              END IF;
              v_ResultStr:='SOLINES2 - v_M_PriceList_ID - ' || v_M_PriceList_ID;
              SELECT M_BOM_PriceStd(p.M_Product_ID, pv.M_PriceList_Version_ID) AS PriceStd,
                M_BOM_PriceList(p.M_Product_ID, pv.M_PriceList_Version_ID) AS PriceList,
                M_BOM_PriceLimit(p.M_Product_ID, pv.M_PriceList_Version_ID) AS PriceLimit,
                p.C_UOM_ID,pl.C_Currency_ID
              INTO v_PriceStd,v_PriceList,v_PriceLimit,v_C_UOM_ID,v_C_Currency_ID
              FROM M_PRODUCT p,M_PRODUCTPRICE pp,M_PRICELIST_VERSION pv,M_PRICELIST pl
              WHERE p.M_Product_ID=pp.M_Product_ID
                AND pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID
                AND pv.M_PriceList_ID=pl.M_PriceList_ID
                AND pv.IsActive='Y'
                AND p.M_Product_ID=SOLINES.M_PRODUCT_ID
                AND pv.M_PriceList_ID=COALESCE(Cur_SO.M_PRICELIST_ID, v_M_PriceList_ID)
              ORDER BY pv.ValidFrom DESC;
              v_ResultStr:='SOLINES - v_PriceStd - ' || v_PriceStd;
            END IF;
            IF(SOLINES.M_PRODUCT_ID IS NOT NULL AND v_PriceStd IS NULL AND v_PriceList IS NULL AND v_PriceLimit IS NULL AND v_C_UOM_ID IS NULL AND v_C_Currency_ID IS NULL) THEN
              SELECT M_BOM_PriceStd(p.M_Product_ID, pv.M_PriceList_Version_ID) AS PriceStd,
                M_BOM_PriceList(p.M_Product_ID, pv.M_PriceList_Version_ID) AS PriceList,
                M_BOM_PriceLimit(p.M_Product_ID, pv.M_PriceList_Version_ID) AS PriceLimit,
                p.C_UOM_ID,pl.C_Currency_ID
              INTO v_PriceStd,v_PriceList,v_PriceLimit,v_C_UOM_ID,v_C_Currency_ID
              FROM M_PRODUCT p,M_PRODUCTPRICE pp,M_PRICELIST_VERSION pv,M_PRICELIST bpl,M_PRICELIST pl
              WHERE p.M_Product_ID=pp.M_Product_ID
                AND pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID
                AND pv.M_PriceList_ID=bpl.M_PriceList_ID
                AND bpl.M_PriceList_ID=pl.BasePriceList_ID
                AND pv.IsActive='Y'
                AND p.M_Product_ID=SOLINES.M_PRODUCT_ID
                AND pl.M_PriceList_ID=COALESCE(Cur_SO.M_PRICELIST_ID, v_M_PriceList_ID)
              ORDER BY pv.ValidFrom DESC;
            END IF;
            SELECT U.C_UOM_ID
            INTO v_UOM
            FROM C_UOM U,M_PRODUCT P
            WHERE P.C_UOM_ID=U.C_UOM_ID
              AND M_PRODUCT_ID=SOLINES.M_PRODUCT_ID;
            v_C_OrderLine_ID:=Ad_Sequence_Nextno('C_OrderLine') ;
            v_ResultStr:='C_OrderLine_ID - ' || v_C_OrderLine_ID;
            INSERT
            INTO C_ORDERLINE
              (
                DateOrdered, M_Warehouse_ID, QtyOrdered, QtyDelivered,
                QtyReserved, M_Shipper_ID, QtyInvoiced,
                C_Currency_ID, PriceList, DatePromised, DateDelivered,
                DateInvoiced, Created, IsActive, Line,
                C_OrderLine_ID, AD_Client_ID, C_Order_ID, Description,
                M_Product_ID, C_UOM_ID, DirectShip, CreatedBy,
                UpdatedBy, FreightAmt, C_Charge_ID, ChargeAmt,
                Updated, AD_Org_ID, S_ResourceAssignment_ID, C_BPartner_ID,
                PriceActual, C_Tax_ID, C_BPartner_Location_ID,
                Discount, PriceLimit, Ref_OrderLine_ID, LineNetAmt,
                M_AttributeSetInstance_ID, IsDescription, PriceStd
              )
              VALUES
              (
                TRUNC(now(), 'DD'), Cur_SO.M_WAREHOUSE_ID, SOLINES.InvoicedQty, 0,
                0, NULL, 0,
                Cur_SO.C_CURRENCY_ID, v_PriceList, TRUNC(now(), 'DD'), NULL,
                NULL, now(), 'Y', SOLINES.LINE,
                v_C_OrderLine_ID, Cur_SO.AD_CLIENT_ID, v_C_Order_ID, SOLINES.DESCRIPTION,
                SOLINES.M_PRODUCT_ID, v_UOM, 'N', v_AD_User_ID,
                v_AD_User_ID, 0, NULL, 0,
                now(), Cur_SO.AD_ORG_ID, NULL, Cur_SO.C_BPARTNER_ID,
                M_Get_Offers_Price(now(), Cur_SO.C_BPARTNER_ID, SOLINES.M_PRODUCT_ID, v_PriceStd, SOLINES.InvoicedQty,  v_M_PriceList_ID),
    C_Gettax(SOLINES.M_PRODUCT_ID, TRUNC(now(), 'DD'), Cur_SO.AD_ORG_ID, Cur_SO.M_WAREHOUSE_ID, Cur_SO.C_BPARTNER_LOCATION_ID, Cur_SO.C_BPARTNER_LOCATION_ID, Cur_SO.C_PROJECT_ID, 'Y'), Cur_SO.C_BPARTNER_LOCATION_ID,
                (v_PriceList-v_PriceStd) *100/v_PriceList, v_PriceLimit, NULL, (M_Get_Offers_Price(now(), Cur_SO.C_BPARTNER_ID, SOLINES.M_PRODUCT_ID, v_PriceStd, SOLINES.InvoicedQty,  v_M_PriceList_ID) * SOLINES.InvoicedQty),
                NULL, 'N', v_PriceStd
              )
              ;
          END LOOP;
          IF NOT(v_Message='') THEN
            v_Message:=v_Message || ', ';
          END IF;
          v_Message:=v_Message || v_DocumentNo;
        END IF;--FINISH_PROCESS
      END LOOP;
      v_Message:='@DocumentNo@: ' || v_Message;
    END;
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END C_GENERATESOFROMPROJECTORDER
]]></body>
    </function>
  </database>
