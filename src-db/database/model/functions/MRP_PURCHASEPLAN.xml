<?xml version="1.0"?>
  <database name="FUNCTION MRP_PURCHASEPLAN">
    <function name="MRP_PURCHASEPLAN" type="NULL">
      <parameter name="p_user_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_org_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_client_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_run_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_planner_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_vendor_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_timehorizon" type="NUMERIC" mode="in">
        <default/>
      </parameter>
      <parameter name="p_planningdate" type="TIMESTAMP" mode="in">
        <default/>
      </parameter>
      <parameter name="p_securitymargin" type="NUMERIC" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2012 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure

  v_Aux_New VARCHAR2(32);

  v_Stock NUMBER:=0;
  v_neededQty_New NUMBER;
  v_neededQty_Old NUMBER;
  v_Qty_New NUMBER;
  v_Qty_Old NUMBER;
  v_Qty_Added VARCHAR(1);

  v_plannedorderdate_new DATE;
  v_planneddate_new DATE;
  v_planneddate_old DATE;

  FINISH_PROCESS BOOLEAN DEFAULT FALSE;
  --  Parameter
  TYPE RECORD IS REF CURSOR;
  Cur_PlanProduct RECORD;
  Cur_Lines RECORD;

BEGIN
  BEGIN --BODY
    v_ResultStr := 'Purchase mrp';

    FOR Cur_PlanProduct IN (
        SELECT rpl.m_product_id, p.name AS productname,
            COALESCE(ppo.capacity, porg.capacity, p.capacity) AS capacity,
            COALESCE(ppo.deliverytime_promised, porg.delaymin, p.delaymin, 0) AS delaymin,
            COALESCE(ppo.qtytype, porg.qtytype, 'E') AS qtytype,
            COALESCE(ppo.order_min, porg.qtymin,0) AS qtymin,
            COALESCE(ppo.qtystd, porg.qtystd, 1) AS qtystd,
            ppo.c_bpartner_id AS vendor_id,
            COALESCE(porg.stockmin, 0) as stockmin,
            COALESCE(porg.maximumqty, 0) as maximumqty
        FROM mrp_run_purchaseline rpl
              JOIN m_product p ON p.m_product_id = rpl.m_product_id AND p.ispurchased = 'Y'
              JOIN m_product_org porg ON p.m_product_id = porg.m_product_id AND rpl.ad_org_id = porg.ad_org_id
              JOIN (SELECT MAX(m_product_po_id) AS m_product_po_id, m_product_id
                    FROM m_product_po
                    WHERE iscurrentvendor = 'Y'
                      AND (p_vendor_id IS NULL OR m_product_po.c_bpartner_id = p_vendor_id)
                      AND m_product_po.discontinued = 'N'
                    GROUP BY m_product_id
                  ) maxppo ON maxppo.m_product_id = p.m_product_id --CASE WITH MORE THAN ONE DEFAULT VENDOR
              LEFT JOIN m_product_po prefppo ON prefppo.discontinued = 'N' AND porg.m_product_po_id = prefppo.m_product_po_id
              JOIN m_product_po ppo ON COALESCE(prefppo.m_product_po_id, maxppo.m_product_po_id) = ppo.m_product_po_id
        WHERE mrp_run_purchase_id = p_run_id
        GROUP BY rpl.m_product_id, p.name, ppo.capacity, porg.capacity, p.capacity,
            ppo.deliverytime_promised, porg.delaymin, p.delaymin,
            ppo.qtytype, porg.qtytype, 
            ppo.order_min, porg.qtymin,
            ppo.qtystd, porg.qtystd, ppo.c_bpartner_id, --CASE WITH MORE THAN ONE DEFAULT VENDOR
            porg.stockmin, porg.maximumqty
    ) LOOP
      v_stock := 0;
      v_neededqty_old := NULL;
      v_planneddate_old := NULL;
      v_Qty_Added := 'N';
      FOR Cur_Lines IN (
        SELECT pl.*,
          (CASE WHEN pl.INOUTTRXTYPE = 'ST' THEN 0
                WHEN pl.INOUTTRXTYPE = 'MS' THEN 2
                WHEN pl.QTY >= 0 THEN 1
                ELSE 3 END) AS PRIORITY
        FROM MRP_RUN_PURCHASELINE pl,
          M_PRODUCT
        WHERE pl.MRP_RUN_PURCHASE_ID = p_Run_ID
          AND M_PRODUCT.M_PRODUCT_ID = pl.M_PRODUCT_ID
          AND pl.M_PRODUCT_ID = Cur_PlanProduct.M_Product_ID
        ORDER BY TRUNC(pl.planneddate), priority
        ) LOOP

        v_neededQty_New :=  - Cur_Lines.qty - v_Stock;

        IF (v_neededQty_New > 0) THEN
          v_planneddate_new := TO_DATE(Cur_Lines.planneddate) - p_securitymargin;

          IF (v_Planneddate_old IS NULL OR TRUNC(v_Planneddate_old) <> TRUNC(v_Planneddate_new)) THEN
            v_planneddate_old := v_planneddate_new;
            UPDATE MRP_RUN_PURCHASELINE
            SET iscompleted = 'Y',
              neededqty = qty
            WHERE MRP_RUN_PURCHASE_ID = p_Run_ID
	      AND iscompleted = 'N'
              AND planneddate <= v_planneddate_new;

            v_Qty_New := GREATEST(v_neededqty_New, Cur_PlanProduct.qtymin);

            IF (Cur_PlanProduct.maximumqty > 0 AND v_Qty_Added = 'N') THEN
              v_Qty_New := v_Qty_New + Cur_PlanProduct.maximumqty - Cur_PlanProduct.stockmin;
	    END IF;
	    
            IF (Cur_PlanProduct.qtytype = 'M') THEN --Multiple lot qty
              IF (Cur_PlanProduct.maximumqty > 0) THEN
                v_Qty_new := FLOOR(v_qty_new/Cur_PlanProduct.qtystd)*Cur_PlanProduct.qtystd;
              ELSE
		v_Qty_new := CEIL(v_qty_new/Cur_PlanProduct.qtystd)*Cur_PlanProduct.qtystd;
              END IF;
            END IF;

            IF (Cur_PlanProduct.CAPACITY = 0) THEN
		RAISE_APPLICATION_ERROR(-20000, '@CapacityZero@ ' || Cur_PlanProduct.PRODUCTNAME);
            END IF;

            v_plannedorderdate_new := TRUNC(v_planneddate_new -
                                      GREATEST(Cur_PlanProduct.DELAYMIN, (CASE WHEN Cur_PlanProduct.CAPACITY IS NULL THEN 0
                                                                  ELSE CEIL(v_Qty_new/Cur_PlanProduct.CAPACITY)
                                                                  END)));
            Mrp_Run_Insertlines(p_Client_ID, p_Org_ID, p_User_ID, p_Run_ID, Cur_PlanProduct.M_Product_ID, v_qty_new, v_neededqty_new, NULL, 'PP', 'Y', NULL, NULL, NULL, NULL, NULL, v_Planneddate_new, v_plannedorderdate_new, 'N', 'N', Cur_PlanProduct.Vendor_ID, v_Aux_new);

            IF (Cur_PlanProduct.maximumqty > 0 AND v_Qty_Added = 'N') THEN
		v_stock := v_stock + v_qty_new - (Cur_PlanProduct.maximumqty - Cur_PlanProduct.stockmin);
		v_Qty_Added := 'Y';
	    ELSE
	        v_stock := v_stock + v_qty_new;
            END IF;
            
          ELSE
            v_neededqty_new := v_neededqty_new + COALESCE(v_qty_old,0);
            v_qty_new := GREATEST(v_qty_new, v_neededqty_new);
            IF (Cur_PlanProduct.qtytype = 'M') THEN --Multiple lot qty
              IF (Cur_PlanProduct.maximumqty > 0) THEN
                v_Qty_new := FLOOR(v_qty_new/Cur_PlanProduct.qtystd)*Cur_PlanProduct.qtystd;
              ELSE
		v_Qty_new := CEIL(v_qty_new/Cur_PlanProduct.qtystd)*Cur_PlanProduct.qtystd;
              END IF;
            END IF;

            IF (Cur_PlanProduct.CAPACITY = 0) THEN
		RAISE_APPLICATION_ERROR(-20000, '@CapacityZero@ ' || Cur_PlanProduct.PRODUCTNAME);
            END IF;

            v_plannedorderdate_new := TRUNC(v_planneddate_old -
                                      GREATEST(Cur_PlanProduct.DELAYMIN, (CASE WHEN Cur_PlanProduct.CAPACITY IS NULL THEN 0
                                                                  ELSE CEIL(v_Qty_new/Cur_PlanProduct.CAPACITY)
                                                                  END)));
            UPDATE MRP_RUN_PURCHASELINE
            SET neededqty = v_neededqty_new,
                qty = v_qty_new,
                plannedorderdate = v_plannedorderdate_new
            WHERE MRP_RUN_PURCHASELINE_ID = v_Aux_new;
            v_stock := v_stock + v_qty_new - v_qty_old;
          END IF;
          v_neededqty_old := v_neededqty_new;
          v_qty_old := v_qty_new;
        END IF;

        v_stock := v_stock + Cur_Lines.qty;
        UPDATE MRP_RUN_PURCHASELINE
        SET CUMQTY = v_stock
        WHERE MRP_RUN_PURCHASELINE_ID = Cur_Lines.MRP_RUN_PURCHASELINE_ID;

      END LOOP;
    END LOOP;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('MRP_PURCHASEPLAN exception: ' || v_ResultStr);
  RAISE;
--  RETURN;
END MRP_PURCHASEPLAN
]]></body>
    </function>
  </database>
