<?xml version="1.0"?>
  <database name="FUNCTION M_BOM_QTY_ONHAND">
    <function name="M_BOM_QTY_ONHAND" type="NUMERIC">
      <parameter name="p_product_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_warehouse_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_locator_id" type="VARCHAR" mode="in">
        <default><![CDATA[NULL]]></default>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Compiere Public
* License 1.1 ("License"); You may not use this file except in
* compliance with the License. You may obtain a copy of the License in
* the legal folder of your Openbravo installation.
* Software distributed under the License is distributed on an
* "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
* implied. See the License for the specific language governing rights
* and limitations under the License.
* The Original Code is  Compiere  ERP &  Business Solution
* The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
* Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
* parts created by ComPiere are Copyright (C) ComPiere, Inc.;
* All Rights Reserved.
* Contributor(s): Openbravo SLU
* Contributions are Copyright (C) 2001-2012 Openbravo, S.L.U.
*
* Specifically, this derivative work is based upon the following Compiere
* file and version.
*************************************************************************
* Return quantity on hand for BOM
*/
    v_myWarehouse_ID VARCHAR2(32);
    v_Quantity NUMBER:=99999; -- unlimited
    v_IsBOM CHAR(1) ;
    v_IsStocked CHAR(1) ;
    v_ProductType VARCHAR(60) ;
    v_ProductQty NUMBER;
    v_StdPrecision NUMBER;
    -- Get BOM Product info
  TYPE RECORD IS REF CURSOR;
    CUR_BOM RECORD;
    --
  BEGIN
    -- Check Parameters
    v_myWarehouse_ID:=p_Warehouse_ID;
    IF(v_myWarehouse_ID IS NULL) THEN
      IF(p_Locator_ID IS NULL) THEN
        RETURN 0;
      ELSE
        SELECT MAX(M_Warehouse_ID)
        INTO v_myWarehouse_ID
        FROM M_LOCATOR
        WHERE M_Locator_ID=p_Locator_ID;
      END IF;
    END IF;
    IF(v_myWarehouse_ID IS NULL) THEN
      RETURN 0;
    END IF;
    -- DBMS_OUTPUT.PUT_LINE('Warehouse=' || v_myWarehouse_ID);
    -- Check, if product exists and if it is stocked
  BEGIN
    SELECT IsBOM, ProductType, IsStocked
    INTO v_IsBOM, v_ProductType, v_IsStocked
    FROM M_PRODUCT
    WHERE M_Product_ID=p_Product_ID;
    --
  EXCEPTION -- not found
  WHEN OTHERS THEN
    RETURN 0;
  END;
  -- Unimited capacity if no item
  IF((v_ProductType<>'I' OR(v_IsStocked='N' AND(v_IsBOM='N')))) THEN
    RETURN v_Quantity;
    -- Stocked item
  ELSIF(v_IsStocked='Y') THEN
    -- Get ProductQty
    SELECT COALESCE(SUM(QtyOnHand), 0)
    INTO v_ProductQty
    FROM M_STORAGE_DETAIL s
    WHERE M_Product_ID=p_Product_ID  AND EXISTS
      (SELECT *
      FROM M_LOCATOR l
      WHERE s.M_Locator_ID=l.M_Locator_ID  AND l.M_Warehouse_ID=v_myWarehouse_ID
      )
      ;
    --
    -- DBMS_OUTPUT.PUT_LINE('Qty=' || v_ProductQty);
    RETURN v_ProductQty;
  END IF;
  -- Go though BOM
  -- DBMS_OUTPUT.PUT_LINE('BOM');
  FOR CUR_BOM IN
    (SELECT b.M_ProductBOM_ID, b.BOMQty, p.IsBOM, p.IsStocked, p.ProductType
    FROM M_PRODUCT_BOM b, M_PRODUCT p
    WHERE b.M_ProductBOM_ID=p.M_Product_ID AND b.isactive='Y' 
    AND b.M_Product_ID=p_Product_ID
    )
  LOOP
    -- Stocked Items "leaf node"
    IF(CUR_BOM.ProductType='I' AND CUR_BOM.IsBOM='N' AND CUR_BOM.IsStocked = 'Y') THEN
      -- Get v_ProductQty
      SELECT COALESCE(SUM(QtyOnHand), 0)
      INTO v_ProductQty
      FROM M_STORAGE_DETAIL s
      WHERE M_Product_ID=CUR_BOM.M_ProductBOM_ID  AND EXISTS
        (SELECT *
        FROM M_LOCATOR l
        WHERE s.M_Locator_ID=l.M_Locator_ID  AND l.M_Warehouse_ID=v_myWarehouse_ID
        )
        ;
      -- Get Rounding Precision
      SELECT COALESCE(MAX(u.StdPrecision), 0)
      INTO v_StdPrecision
      FROM C_UOM u, M_PRODUCT p
      WHERE u.C_UOM_ID=p.C_UOM_ID AND p.M_Product_ID=CUR_BOM.M_ProductBOM_ID;
      -- How much can we make with this product
      IF COALESCE(CUR_BOM.BOMQty, 0)=0 THEN
        v_ProductQty:=0;
      ELSE
        v_ProductQty:=ROUND(v_ProductQty/CUR_BOM.BOMQty, v_StdPrecision) ;
      END IF;
      -- How much can we make overall
      IF(v_ProductQty<v_Quantity) THEN
        v_Quantity:=v_ProductQty;
      END IF;
      -- Another BOM
    ELSIF(CUR_BOM.IsBOM='Y') THEN
      v_ProductQty:=M_BOM_Qty_OnHand(CUR_BOM.M_ProductBOM_ID, v_myWarehouse_ID) ;
      -- How much can we make overall
      IF(v_ProductQty<v_Quantity) THEN
        v_Quantity:=v_ProductQty;
      END IF;
    END IF;
  END LOOP; -- BOM
  IF(v_Quantity>0) THEN
    -- Get Rounding Precision for Product
    SELECT COALESCE(MAX(u.StdPrecision), 0)
    INTO v_StdPrecision
    FROM C_UOM u, M_PRODUCT p
    WHERE u.C_UOM_ID=p.C_UOM_ID AND p.M_Product_ID=p_Product_ID;
    --
    RETURN ROUND(v_Quantity, v_StdPrecision) ;
  END IF;
  RETURN 0;
END M_BOM_QTY_ONHAND
]]></body>
    </function>
  </database>
