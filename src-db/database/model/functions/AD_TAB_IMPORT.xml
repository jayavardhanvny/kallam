<?xml version="1.0"?>
  <database name="FUNCTION AD_TAB_IMPORT">
    <function name="AD_TAB_IMPORT" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_ad_tab_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SLU
  * Contributions are Copyright (C) 2001-2012 Openbravo, S.L.U.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: AD_Tab_Import.sql,v 1.4 2002/11/18 06:11:18 jjanke Exp $
  ***
  * Title: Import Field Definitions
  * Description:
  *   Import the Fields of the Tab not existing yet
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID VARCHAR2(32);
  v_AD_User_ID VARCHAR2(32):='0';
  v_module_id varchar2(32);
  v_fieldModule varchar2(32);
  v_Aux NUMBER;
  
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    -- Variables
    Cur_Column RECORD;
    --
    v_NextNo VARCHAR2(32) ;
    v_AD_Table_ID VARCHAR2(32) ;
    v_count NUMBER(10):=0;
    -- added by Pablo Sarobe
    v_isDisplayed CHAR(1):='Y';
    v_showInRelation CHAR(1):='N';
    v_isReadOnly CHAR(1):='N';
    v_SeqNo NUMBER(10) ;
    v_SeqNoCounter NUMBER;
    v_gridSeqno NUMBER;
    v_sortNo NUMBER(10) ;
    v_columnName VARCHAR2(40) ;
    v_LastColumnName VARCHAR2(40) ;
    v_DisplayLength NUMBER(10) ;
    v_PInstance_Log_ID VARCHAR2(32);
    v_Client_ID VARCHAR2(32);
  BEGIN
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
      v_ResultStr:='PInstanceNotFound';
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date, p.AD_CLIENT_ID
        FROM AD_PInstance i
        LEFT JOIN AD_PInstance_Para p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_AD_User_ID:=Cur_Parameter.AD_User_ID;
        v_Client_ID:=Cur_Parameter.AD_CLIENT_ID;
      END LOOP; -- Get Parameter
    ELSE
      v_Record_ID:=p_AD_Tab_ID;
    END IF;
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
  BEGIN --BODY
   select max(t.ad_module_id)
     into v_module_id
     from ad_tab t, ad_module m
    where ad_tab_id = v_Record_ID
      and m.ad_module_id = t.ad_module_id
      and ISINDEVELOPMENT ='Y';

    select max(seqno)
      into v_SeqNoCounter
      from ad_field
      where ad_field.ad_tab_id = v_Record_ID;
      
    if v_module_id is null then
      select max(ad_module_id)
        into v_module_id
        from ad_module
       where isdefault = 'Y';
      if v_module_id is null then
        v_module_id := '0';
      end if;
    end if;
  
    SELECT AD_Table_ID
    INTO v_AD_Table_ID
    FROM AD_Tab
    WHERE AD_Tab_ID=v_Record_ID  AND AD_Table_ID!='291'; -- C_BPartner (multiple tabs)
    
    
    --always set grid sequence to null as by default the showinrelation is set to 'N'
    v_GridSeqNo := null;

    if v_SeqNoCounter < 20 OR v_SeqNoCounter is NULL then
      v_SeqNoCounter := 10; --Reserve 10 for Organization. The field in the first iteration will be 20 (line 189)
    end if;
    
    FOR Cur_Column IN(-- added by Pablo Sarobe
    SELECT c.Columnname, c.Name, c.Description, c.Help, c.AD_Column_ID, c.FieldLength, t.tablename, c.AD_Module_ID, c.IsIdentifier
    FROM AD_Column c, AD_Table t
    WHERE NOT EXISTS
      (SELECT *
      FROM AD_Field f
      WHERE c.AD_Column_ID=f.AD_Column_ID  AND c.AD_Table_ID=v_AD_Table_ID  AND f.AD_Tab_ID=v_Record_ID
      )
      AND c.AD_Table_ID=v_AD_Table_ID  AND c.AD_Table_ID=t.AD_Table_ID  -- added by Pablo Sarobe
      AND UPPER(c.Columnname) NOT IN ('CREATED', 'UPDATED', 'CREATEDBY', 'UPDATEDBY') AND c.IsActive='Y'
    ORDER BY POSITION)
    LOOP
      v_showInRelation:='N';
      v_SeqNo:=null;
      AD_Sequence_Next('AD_Field', '0', v_NextNo) ; -- get ID
      -- added by Pablo Sarobe
      v_isDisplayed:='Y';
      v_isReadOnly:='N';
      v_SeqNo:=0;
      v_sortNo:=NULL;
      v_DisplayLength:=Cur_Column.FieldLength;
      IF(UPPER(Cur_Column.Columnname)=UPPER(Cur_Column.Tablename) ||'_ID') THEN --ID column
        v_isDisplayed:='N';
        v_showInRelation:='N';
        v_SeqNo:=null;
        IF(UPPER(Cur_Column.Columnname) IN('M_PRODUCT_ID', 'C_BPARTNER_ID')) THEN
          v_DisplayLength:=40;
        ELSIF(UPPER(Cur_Column.Columnname) IN('C_LOCATION_ID', 'C_BPARTNER_LOCATION_ID')) THEN
          v_DisplayLength:=60;
        END IF;
      ELSIF(UPPER(Cur_Column.Columnname)='AD_CLIENT_ID') THEN
        v_SeqNo:=null;
        v_showInRelation:='N';
        v_isDisplayed:='N';
      ELSIF(UPPER(Cur_Column.Columnname)='AD_ORG_ID') THEN
        v_SeqNo:=10;
        v_showInRelation:='N';
      ELSIF(UPPER(Cur_Column.Columnname)='LINENO') THEN
        v_DisplayLength:=5;
      ELSIF(UPPER(Cur_Column.Columnname) IN('VALUE', 'ALIAS', 'SEQNO')) THEN
        v_sortNo:=1;
        IF(UPPER(Cur_Column.Columnname) IN('VALUE')) THEN
          v_DisplayLength:=20;
        END IF;
      END IF;
      IF(UPPER(v_LastColumnName)='UPDATEDBY' AND UPPER(Cur_Column.Columnname) LIKE '%_ID') THEN
        v_isReadOnly:='Y';
      END IF;
      
      --show in grid only if the column is identifier
      IF Cur_Column.isidentifier = 'Y' THEN
        v_showInRelation:='Y';
        v_SeqNo:=0;
      END IF;

      IF COALESCE(v_SeqNo,-1) = 0 THEN
        v_SeqNoCounter := v_SeqNoCounter + 10;
        v_SeqNo := v_SeqNoCounter;
      END IF;
      
      select count(*)
        into v_aux
        from ad_module
       where ad_module_id = Cur_Column.AD_Module_ID
         and isInDevelopment='Y';
         
      if v_Aux!=0 then
        v_fieldModule := Cur_Column.AD_Module_ID;
      else
        v_fieldModule := v_module_id;
      end if;
      
      INSERT
      INTO AD_Field
        (
          ad_field_id, ad_client_id, ad_org_id, isactive,
          created, createdby, updated, updatedby,
          name, description, help, seqno, AD_Tab_ID,
          AD_Column_ID, DisplayLength, IsCentrallyMaintained,
          isdisplayed, isreadonly, sortno, issameline, showinrelation, ad_module_id,
          grid_seqNo
        )
        VALUES
        (v_NextNo, '0', '0', 'Y',
        now(), '0', now(), '0',
        Cur_Column.Name, Cur_Column.Description, Cur_Column.Help, v_SeqNo, v_Record_ID,
        Cur_Column.AD_Column_ID, v_DisplayLength, 'Y', 
        v_isDisplayed, v_isReadOnly, v_sortNo, 'N', v_showInRelation, v_fieldModule,
        v_gridSeqno) ;
      --
      v_count:=v_count + 1;
      -- Added by Pablo Sarobe
      v_LastColumnName:=Cur_Column.Columnname;

    END LOOP; --  for all columns
    -- Summary info
    v_Message:='@Created@ = ' || v_count;
    --<<FINISH_PROCESS>>
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Finished ' || v_Message) ;
    END IF;
    -- Commented by cromero 19102006 COMMIT;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;

  SELECT AD_TABLE_ID INTO v_AD_TABLE_ID FROM AD_Tab WHERE AD_Tab_ID=v_Record_ID;
  IF (v_AD_Table_ID='291') THEN
    RAISE_APPLICATION_ERROR(-20000, '@20507@') ;
  END IF;
--  RETURN;
END AD_TAB_IMPORT
]]></body>
    </function>
  </database>
